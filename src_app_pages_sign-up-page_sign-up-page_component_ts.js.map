{"version":3,"file":"src_app_pages_sign-up-page_sign-up-page_component_ts.js","mappings":"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","sources":["./src/app/commons/pfcc-validators.ts","./src/app/pages/sign-up-page/sign-up-page.component.ts","./src/app/pages/sign-up-page/sign-up-page.component.html"],"sourcesContent":["import {ValidatorFn} from '@angular/forms';\n\nexport const fieldsMatches: (origin: string, ...toCompare: string[]) => ValidatorFn = (origin: string, ...toCompare: string[]) => {\n  return control => {\n    if (toCompare == null || toCompare.length == 0) {\n      console.warn('Fields to compare is not configured');\n      return null;\n    }\n\n    const originalValue = control.get(origin)?.value;\n    if (originalValue == null) {\n      return null;\n    }\n\n    for (const field of toCompare) {\n      const comparingControl = control.get(field);\n\n      if (comparingControl == null) {\n        throw new Error(`Can't find ${field} in provided form`);\n      }\n\n      const comparingValue = comparingControl.value || null;\n\n      if (comparingValue !== originalValue) {\n        return {\n          fieldsMatches: `Value of ${field} (${comparingValue}) doesn't match ${origin} (${originalValue})`,\n        };\n      }\n    }\n\n    return null;\n  };\n};\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport * as fromPfccValidators from '../../commons/pfcc-validators';\nimport {Store} from '@ngxs/store';\nimport {AuthSignUpAction} from '../../state/auth/auth.state-models';\nimport {map} from 'rxjs';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\n\n@Component({\n  selector: 'pfc-sign-up-page',\n  templateUrl: './sign-up-page.component.html',\n  styleUrls: ['./sign-up-page.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    TranslateModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignUpPageComponent implements OnInit {\n\n\n  readonly minPasswordLength = 6;\n  form = this.fb.group({\n    email: ['', Validators.compose([Validators.email, Validators.required])],\n    password: ['', Validators.compose([Validators.required, Validators.minLength(this.minPasswordLength)])],\n    confirmPassword: ['', Validators.compose([Validators.required, Validators.minLength(this.minPasswordLength)])],\n  }, {\n    validators: fromPfccValidators.fieldsMatches('password', 'confirmPassword'),\n  });\n\n  constructor(private fb: FormBuilder, private store: Store) {\n  }\n\n  ngOnInit(): void {\n    this.form.statusChanges\n      .pipe(\n        map(formStatus => {\n          return [\n            formStatus,\n            this.form.errors,\n            this.form.controls.email.errors,\n            this.form.controls.password.errors,\n            this.form.controls.confirmPassword.errors,\n          ];\n        }),\n      )\n      .subscribe(console.log);\n  }\n\n  signUp() {\n    const password = this.form.value.password as string;\n    const email = this.form.value.email as string;\n    this.store.dispatch(new AuthSignUpAction(email, password));\n  }\n}\n","<form (ngSubmit)=\"signUp()\" [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>{{'sign-up.email.label' | translate}}</mat-label>\n    <input formControlName=\"email\" matInput type=\"email\"/>\n\n    <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n               [innerHTML]=\"'sign-up.email.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.controls.email.hasError('email')\">\n      {{'sign-in.email.email' | translate}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.password.label' | translate}}</mat-label>\n    <input formControlName=\"password\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.password.hasError('required')\"\n               [innerHTML]=\"'sign-up.password.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('fieldsMatches')\">\n      {{'sign-up.password.matches' | translate}}\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('minlength')\">\n      {{'sign-up.password.min-length' | translate:({value: minPasswordLength})}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.confirm-password.label' | translate}}</mat-label>\n    <input formControlName=\"confirmPassword\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.confirmPassword.hasError('required')\"\n               [innerHTML]=\"'sign-up.confirm-password.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('fieldsMatches')\">\n      {{'sign-up.confirm-password.matches' | translate}}\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('minlength')\">\n      {{'sign-up.confirm-password.min-length' | translate:({value: minPasswordLength})}}\n    </mat-error>\n  </mat-form-field>\n\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button\n          type=\"submit\">{{'sign-up.sign-up-btn' | translate}}</button>\n  <a href=\"/signin\" mat-button>{{'sign-up.sign-in-link' | translate}}</a>\n</form>\n"],"names":["fieldsMatches","origin","toCompare","control","length","console","warn","originalValue","get","value","field","comparingControl","Error","comparingValue","ReactiveFormsModule","Validators","CommonModule","fromPfccValidators","AuthSignUpAction","map","TranslateModule","MatFormFieldModule","MatButtonModule","MatInputModule","i0","SignUpPageComponent","constructor","fb","store","group","email","compose","required","password","minLength","minPasswordLength","confirmPassword","validators","ngOnInit","form","statusChanges","pipe","formStatus","errors","controls","subscribe","log","signUp","dispatch","selectors","standalone","features","decls","vars","consts","template","ctx","styles","changeDetection"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}