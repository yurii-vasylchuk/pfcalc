{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddMealDialogData",
            "id": "interface-AddMealDialogData-5c2236ce0c878783acbca9570997c636b4a1af10f897c6c474a9699b711d0aca1ed2a43b216f7ad9c2e8f38d015f08822d3d9f989dcf1360cca57bc0cce6172b",
            "file": "src/app/components/add-meal/add-meal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MAT_DIALOG_DATA, MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {IMeal} from '../../commons/models/domain.models';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatListModule} from '@angular/material/list';\nimport {Observable} from 'rxjs';\nimport {IPfcc} from '../../commons/models/common.models';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\nexport interface AddMealDialogData {\n  items: Observable<IDishOption[]>;\n  filter: (val: string) => void;\n}\n\n@Component({\n  selector: 'pfc-add-meal',\n  standalone: true,\n  imports: [CommonModule,\n    TranslateModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatListModule,\n    MatExpansionModule],\n  templateUrl: './add-meal.component.html',\n  styleUrls: ['./add-meal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddMealComponent {\n  meals: IMeal[] = [];\n\n  @Output()\n  search = new EventEmitter<string | null>();\n\n  @ViewChild('searchField')\n  searchField!: ElementRef<HTMLInputElement>;\n  selectedOptionId = 'NOTHING';\n\n  constructor(private dialogRef: MatDialogRef<AddMealComponent>,\n              private cdr: ChangeDetectorRef,\n              @Inject(MAT_DIALOG_DATA) public data: AddMealDialogData) {\n  }\n\n  dishOptionTrackBy = (idx: number, item: IDishOption) => item.id;\n\n  handleSearchChange() {\n    this.data.filter(this.searchField.nativeElement.value);\n  }\n\n  handleOptionClick(selectedOptionId: string) {\n    if (this.selectedOptionId === selectedOptionId) {\n      this.selectedOptionId = 'NOTHING';\n    } else {\n      this.selectedOptionId = selectedOptionId;\n    }\n    this.cdr.markForCheck();\n  }\n\n  handleDeleteOptionClick(option: IDishOption) {\n    if (option.type === 'dish' && option.delete != null) {\n      option.delete();\n    }\n  }\n}\n\nexport type DishOptionType = 'dish' | 'recipe' | 'raw-food';\n\ninterface IBaseDishOption {\n  id: string;\n  name: string;\n  type: DishOptionType;\n  pfcc: IPfcc;\n}\n\nexport type IDishOption =\n  (IBaseDishOption & { type: 'dish', delete?: (() => void) }) |\n  (IBaseDishOption & { type: 'recipe' | 'raw-food' })\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDishOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAccount",
            "id": "interface-IAccount-babb81083146668cdd382cca610d491edea69ab88aca14ace3dd80d55453cb1e2f49a01dee3dc2a4c8ef0bc0bfd0fb44543f6508ab9febc9f04cfbc87af271c0",
            "file": "src/app/commons/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IProfileResponse} from './domain.models';\n\nexport interface ISignInResponse extends IProfileResponse {\n  token: string;\n}\n\nexport interface ISignUpResponse {\n  token: string;\n}\n\nexport type Language = 'en' | 'ua';\n\nexport interface IAccount {\n  email: string;\n  preferredLanguage: Language;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "preferredLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IApiError",
            "id": "interface-IApiError-2f42887daaae3f3c5d64c3096985d0b6a896f482fbde7cc810940ac74d41eec6c685d03843845ee145de777ef0f1c07df00a7f29e7a61a22f4f4b63f931b33b6",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAuthState",
            "id": "interface-IAuthState-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccount | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UnknownBoolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "profileConfigured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UnknownBoolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBaseDishOption",
            "id": "interface-IBaseDishOption-5c2236ce0c878783acbca9570997c636b4a1af10f897c6c474a9699b711d0aca1ed2a43b216f7ad9c2e8f38d015f08822d3d9f989dcf1360cca57bc0cce6172b",
            "file": "src/app/components/add-meal/add-meal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MAT_DIALOG_DATA, MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {IMeal} from '../../commons/models/domain.models';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatListModule} from '@angular/material/list';\nimport {Observable} from 'rxjs';\nimport {IPfcc} from '../../commons/models/common.models';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\nexport interface AddMealDialogData {\n  items: Observable<IDishOption[]>;\n  filter: (val: string) => void;\n}\n\n@Component({\n  selector: 'pfc-add-meal',\n  standalone: true,\n  imports: [CommonModule,\n    TranslateModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatListModule,\n    MatExpansionModule],\n  templateUrl: './add-meal.component.html',\n  styleUrls: ['./add-meal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddMealComponent {\n  meals: IMeal[] = [];\n\n  @Output()\n  search = new EventEmitter<string | null>();\n\n  @ViewChild('searchField')\n  searchField!: ElementRef<HTMLInputElement>;\n  selectedOptionId = 'NOTHING';\n\n  constructor(private dialogRef: MatDialogRef<AddMealComponent>,\n              private cdr: ChangeDetectorRef,\n              @Inject(MAT_DIALOG_DATA) public data: AddMealDialogData) {\n  }\n\n  dishOptionTrackBy = (idx: number, item: IDishOption) => item.id;\n\n  handleSearchChange() {\n    this.data.filter(this.searchField.nativeElement.value);\n  }\n\n  handleOptionClick(selectedOptionId: string) {\n    if (this.selectedOptionId === selectedOptionId) {\n      this.selectedOptionId = 'NOTHING';\n    } else {\n      this.selectedOptionId = selectedOptionId;\n    }\n    this.cdr.markForCheck();\n  }\n\n  handleDeleteOptionClick(option: IDishOption) {\n    if (option.type === 'dish' && option.delete != null) {\n      option.delete();\n    }\n  }\n}\n\nexport type DishOptionType = 'dish' | 'recipe' | 'raw-food';\n\ninterface IBaseDishOption {\n  id: string;\n  name: string;\n  type: DishOptionType;\n  pfcc: IPfcc;\n}\n\nexport type IDishOption =\n  (IBaseDishOption & { type: 'dish', delete?: (() => void) }) |\n  (IBaseDishOption & { type: 'recipe' | 'raw-food' })\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "pfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DishOptionType",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBaseFood",
            "id": "interface-IBaseFood-cdefbeb8fed3ad5cd91f0888c35add08e9e46397fc70d26c424abe76a26921277c5c048ad101c3311e0d2cc052113dce2599ea6ccb2ddd13b9c0bcc68e685d7f",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {IAccount} from './auth.models';\n\ninterface IBaseFood {\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  isCookable: boolean;\n}\n\nexport type IFood =\n  (IBaseFood & {\n    type: 'ingredient',\n    consistOf: null\n  }) |\n  (IBaseFood & {\n    type: 'recipe',\n    consistOf: IFood[]\n  });\n\nexport type FoodType = 'ingredient' | 'recipe';\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  recipeWeight: number;\n  cookedWeight: number;\n}\n\ninterface IBaseMeal {\n  id: number;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n}\n\nexport type IMeal =\n  (IBaseMeal & { cooked: true, dishId: number }) |\n  (IBaseMeal & { cooked: false, dishId: null });\n\nexport interface IProfile {\n  aims: IPfcc;\n  base: IPfcc | null;\n  profileConfigured: boolean;\n}\n\nexport interface IProfileResponse extends IProfile {\n  meals: IMeal[];\n  dishes: IDish[];\n  foods: IFood[];\n  account: IAccount;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isCookable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ownedByUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "pfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodType",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBaseMeal",
            "id": "interface-IBaseMeal-cdefbeb8fed3ad5cd91f0888c35add08e9e46397fc70d26c424abe76a26921277c5c048ad101c3311e0d2cc052113dce2599ea6ccb2ddd13b9c0bcc68e685d7f",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {IAccount} from './auth.models';\n\ninterface IBaseFood {\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  isCookable: boolean;\n}\n\nexport type IFood =\n  (IBaseFood & {\n    type: 'ingredient',\n    consistOf: null\n  }) |\n  (IBaseFood & {\n    type: 'recipe',\n    consistOf: IFood[]\n  });\n\nexport type FoodType = 'ingredient' | 'recipe';\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  recipeWeight: number;\n  cookedWeight: number;\n}\n\ninterface IBaseMeal {\n  id: number;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n}\n\nexport type IMeal =\n  (IBaseMeal & { cooked: true, dishId: number }) |\n  (IBaseMeal & { cooked: false, dishId: null });\n\nexport interface IProfile {\n  aims: IPfcc;\n  base: IPfcc | null;\n  profileConfigured: boolean;\n}\n\nexport interface IProfileResponse extends IProfile {\n  meals: IMeal[];\n  dishes: IDish[];\n  foods: IFood[];\n  account: IAccount;\n}\n",
            "properties": [
                {
                    "name": "eatenOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "foodId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "pfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDish",
            "id": "interface-IDish-cdefbeb8fed3ad5cd91f0888c35add08e9e46397fc70d26c424abe76a26921277c5c048ad101c3311e0d2cc052113dce2599ea6ccb2ddd13b9c0bcc68e685d7f",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {IAccount} from './auth.models';\n\ninterface IBaseFood {\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  isCookable: boolean;\n}\n\nexport type IFood =\n  (IBaseFood & {\n    type: 'ingredient',\n    consistOf: null\n  }) |\n  (IBaseFood & {\n    type: 'recipe',\n    consistOf: IFood[]\n  });\n\nexport type FoodType = 'ingredient' | 'recipe';\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  recipeWeight: number;\n  cookedWeight: number;\n}\n\ninterface IBaseMeal {\n  id: number;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n}\n\nexport type IMeal =\n  (IBaseMeal & { cooked: true, dishId: number }) |\n  (IBaseMeal & { cooked: false, dishId: null });\n\nexport interface IProfile {\n  aims: IPfcc;\n  base: IPfcc | null;\n  profileConfigured: boolean;\n}\n\nexport interface IProfileResponse extends IProfile {\n  meals: IMeal[];\n  dishes: IDish[];\n  foods: IFood[];\n  account: IAccount;\n}\n",
            "properties": [
                {
                    "name": "cookedOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "cookedWeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "foodId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "recipeWeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDomainState",
            "id": "interface-IDomainState-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "properties": [
                {
                    "name": "dishes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDish[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "foods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "meals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeal[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IGaugeCircleConf",
            "id": "interface-IGaugeCircleConf-afb8330b32816de28b557e008cc938df83ef4782c6e70bccf5f0c321f3e2e871a1bd188b7ee0d1dc3f416e732525e08211fb084b6180553cbd80e0c4bbbd4350",
            "file": "src/app/components/gauge/gauge-component.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGaugeCircleConf {\n  circleId?: any;\n  value: number;\n  maxValue: number;\n  color: string;\n  blink?: boolean;\n}\n\nexport interface IGaugeTrackConf {\n  trackId?: any;\n  bgStrokeColor: string;\n  strokeWidth: number;\n  circles: IGaugeCircleConf[];\n}\n",
            "properties": [
                {
                    "name": "blink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "circleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "maxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IGaugeInternalTrackConfig",
            "id": "interface-IGaugeInternalTrackConfig-b854589f3ad76904f17683d49067158c7e4789007229f2e7c5efec62fe457452402c8c6d23ebce4cf5dfb662ca220aff39f51abecc04f64703952aa68472ba90",
            "file": "src/app/components/gauge/gauge.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input} from '@angular/core';\nimport {GaugeCircleDirective} from './gauge-circle.directive';\nimport {IGaugeCircleConf, IGaugeTrackConf} from './gauge-component.interfaces';\nimport {CommonModule} from '@angular/common';\n\ninterface IGaugeInternalTrackConfig extends IGaugeTrackConf {\n  radius: number;\n}\n\n@Component({\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'pfc-gauge',\n  templateUrl: './gauge.component.html',\n  styleUrls: ['./gauge.component.scss'],\n  imports: [\n    CommonModule, GaugeCircleDirective,\n  ],\n})\nexport class GaugeComponent {\n  @Input() animationDuration = 3;\n  @Input() title!: string;\n  @Input() subtitle?: string;\n\n  @Input() titleShift?: number;\n  @Input() subtitleShift?: number;\n\n  @Input() titleFontSize = 35;\n  @Input() subtitleFontSize = 20;\n\n  titleX = 50;\n  titleY = 50;\n  subtitleX = 52;\n  subtitleY = 70;\n  width = 100;\n  height = 100;\n  viewBox = '0 0 100 100';\n\n  _tracks: IGaugeInternalTrackConfig[] = [];\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  @Input()\n  set values(values: IGaugeTrackConf[]) {\n    let cumulativeRadius = 40;\n    this._tracks = values.map((track, idx) => {\n      cumulativeRadius += track.strokeWidth;\n      return {\n        ...track,\n        trackId: track.trackId != null ? track.trackId : idx,\n        radius: cumulativeRadius - (track.strokeWidth / 2),\n        circles: track.circles.map((circle, idx) => {\n          return {\n            ...circle,\n            circleId: circle.circleId != null ? circle.circleId : idx,\n          };\n        }),\n      };\n    });\n\n    this.width = this.height = cumulativeRadius * 2;\n    this.titleY = this.titleX = cumulativeRadius;\n    this.subtitleX = cumulativeRadius;\n    this.subtitleY = cumulativeRadius + this.subtitleFontSize;\n    this.viewBox = `0 0 ${this.width} ${this.height}`;\n    for (const track of this._tracks) {\n      track.circles.sort((c1, c2) => c2.value - c1.value);\n    }\n    // this.cdr.markForCheck();\n  }\n\n  trackTrackByFn = (idx: number, track: IGaugeTrackConf) => {\n    return track.trackId != null ? track.trackId : idx;\n  };\n\n  circleTrackByFn = (idx: number, circle: IGaugeCircleConf) => {\n    return circle.circleId ? circle.circleId : idx;\n  };\n}\n",
            "properties": [
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IGaugeTrackConf"
        },
        {
            "name": "IGaugeTrackConf",
            "id": "interface-IGaugeTrackConf-afb8330b32816de28b557e008cc938df83ef4782c6e70bccf5f0c321f3e2e871a1bd188b7ee0d1dc3f416e732525e08211fb084b6180553cbd80e0c4bbbd4350",
            "file": "src/app/components/gauge/gauge-component.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGaugeCircleConf {\n  circleId?: any;\n  value: number;\n  maxValue: number;\n  color: string;\n  blink?: boolean;\n}\n\nexport interface IGaugeTrackConf {\n  trackId?: any;\n  bgStrokeColor: string;\n  strokeWidth: number;\n  circles: IGaugeCircleConf[];\n}\n",
            "properties": [
                {
                    "name": "bgStrokeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "circles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGaugeCircleConf[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "trackId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPfcc",
            "id": "interface-IPfcc-2f42887daaae3f3c5d64c3096985d0b6a896f482fbde7cc810940ac74d41eec6c685d03843845ee145de777ef0f1c07df00a7f29e7a61a22f4f4b63f931b33b6",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "calories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "carbohydrates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "protein",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProfile",
            "id": "interface-IProfile-cdefbeb8fed3ad5cd91f0888c35add08e9e46397fc70d26c424abe76a26921277c5c048ad101c3311e0d2cc052113dce2599ea6ccb2ddd13b9c0bcc68e685d7f",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {IAccount} from './auth.models';\n\ninterface IBaseFood {\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  isCookable: boolean;\n}\n\nexport type IFood =\n  (IBaseFood & {\n    type: 'ingredient',\n    consistOf: null\n  }) |\n  (IBaseFood & {\n    type: 'recipe',\n    consistOf: IFood[]\n  });\n\nexport type FoodType = 'ingredient' | 'recipe';\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  recipeWeight: number;\n  cookedWeight: number;\n}\n\ninterface IBaseMeal {\n  id: number;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n}\n\nexport type IMeal =\n  (IBaseMeal & { cooked: true, dishId: number }) |\n  (IBaseMeal & { cooked: false, dishId: null });\n\nexport interface IProfile {\n  aims: IPfcc;\n  base: IPfcc | null;\n  profileConfigured: boolean;\n}\n\nexport interface IProfileResponse extends IProfile {\n  meals: IMeal[];\n  dishes: IDish[];\n  foods: IFood[];\n  account: IAccount;\n}\n",
            "properties": [
                {
                    "name": "aims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc | null",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "profileConfigured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProfileResponse",
            "id": "interface-IProfileResponse-cdefbeb8fed3ad5cd91f0888c35add08e9e46397fc70d26c424abe76a26921277c5c048ad101c3311e0d2cc052113dce2599ea6ccb2ddd13b9c0bcc68e685d7f",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {IAccount} from './auth.models';\n\ninterface IBaseFood {\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  isCookable: boolean;\n}\n\nexport type IFood =\n  (IBaseFood & {\n    type: 'ingredient',\n    consistOf: null\n  }) |\n  (IBaseFood & {\n    type: 'recipe',\n    consistOf: IFood[]\n  });\n\nexport type FoodType = 'ingredient' | 'recipe';\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  recipeWeight: number;\n  cookedWeight: number;\n}\n\ninterface IBaseMeal {\n  id: number;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n}\n\nexport type IMeal =\n  (IBaseMeal & { cooked: true, dishId: number }) |\n  (IBaseMeal & { cooked: false, dishId: null });\n\nexport interface IProfile {\n  aims: IPfcc;\n  base: IPfcc | null;\n  profileConfigured: boolean;\n}\n\nexport interface IProfileResponse extends IProfile {\n  meals: IMeal[];\n  dishes: IDish[];\n  foods: IFood[];\n  account: IAccount;\n}\n",
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccount",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "dishes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDish[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "foods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "meals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeal[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IProfile"
        },
        {
            "name": "ISignInResponse",
            "id": "interface-ISignInResponse-babb81083146668cdd382cca610d491edea69ab88aca14ace3dd80d55453cb1e2f49a01dee3dc2a4c8ef0bc0bfd0fb44543f6508ab9febc9f04cfbc87af271c0",
            "file": "src/app/commons/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IProfileResponse} from './domain.models';\n\nexport interface ISignInResponse extends IProfileResponse {\n  token: string;\n}\n\nexport interface ISignUpResponse {\n  token: string;\n}\n\nexport type Language = 'en' | 'ua';\n\nexport interface IAccount {\n  email: string;\n  preferredLanguage: Language;\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IProfileResponse"
        },
        {
            "name": "ISignUpResponse",
            "id": "interface-ISignUpResponse-babb81083146668cdd382cca610d491edea69ab88aca14ace3dd80d55453cb1e2f49a01dee3dc2a4c8ef0bc0bfd0fb44543f6508ab9febc9f04cfbc87af271c0",
            "file": "src/app/commons/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IProfileResponse} from './domain.models';\n\nexport interface ISignInResponse extends IProfileResponse {\n  token: string;\n}\n\nexport interface ISignUpResponse {\n  token: string;\n}\n\nexport type Language = 'en' | 'ua';\n\nexport interface IAccount {\n  email: string;\n  preferredLanguage: Language;\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthState",
            "id": "injectable-AuthState-fc851c704894e2ffcbb57609dbb6588ddb3753ce864e2ae450f1516c0f76604f6cb5414a0535f7dd5b31661b9615d46f28db00c074ee9ef6032a1b83d44a9241",
            "file": "src/app/state/auth/auth.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "account",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IAccount | null",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAuthLogOutAction",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthLogOutAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthLogOutAction"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthLogOutAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleProfileConfigured",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ProfileConfiguredSuccessfullyEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleProfileLoadedEvent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ProfileLoadedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSignInFailed",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthSignInFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthSignInFailedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthSignInFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSignUpFailed",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthSignUpFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthSignUpFailedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthSignUpFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSignUpSuccess",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthSignUpSucceededEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthSignUpSucceededEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthSignUpSucceededEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngxsOnInit",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileConfigured",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthSignInAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthSignInAction"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthSignInAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signInSucceeded",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthSignInSucceededEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthSignInSucceededEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthSignInSucceededEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "AuthSignUpAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AuthSignUpAction"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "AuthSignUpAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "token",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Action, NgxsOnInit, Selector, State, StateContext} from '@ngxs/store';\nimport {\n  AuthLogOutAction,\n  AuthSignInAction,\n  AuthSignInFailedEvent,\n  AuthSignInSucceededEvent,\n  AuthSignUpAction,\n  AuthSignUpFailedEvent,\n  AuthSignUpSucceededEvent,\n  IAuthState,\n} from './auth.state-models';\nimport {ProfileService} from '../../service/profile.service';\nimport {catchError, map, mergeMap, of, tap} from 'rxjs';\nimport {Navigate} from '@ngxs/router-plugin';\nimport {ProfileConfiguredSuccessfullyEvent, ProfileLoadedEvent} from '../domain/domain.state-models';\nimport * as fromRoutes from '../../commons/routes';\nimport {LocalStoreService} from '../../service/local-store.service';\nimport {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\n\n@State<IAuthState>({\n  name: 'auth',\n  defaults: {\n    profileConfigured: UnknownBoolean.UNKNOWN,\n    loggedIn: UnknownBoolean.UNKNOWN,\n    token: null,\n    account: null,\n  },\n})\n@Injectable()\nexport class AuthState implements NgxsOnInit {\n  constructor(private profileService: ProfileService,\n              private localStoreService: LocalStoreService) {\n  }\n\n  @Selector()\n  static token(state: IAuthState): string | null {\n    return state.token;\n  }\n\n  @Selector()\n  static profileConfigured(state: IAuthState): UnknownBoolean {\n    return state.loggedIn.and(state.profileConfigured);\n  }\n\n  @Selector()\n  static isAuthenticated(state: IAuthState): UnknownBoolean {\n    return state.loggedIn;\n  }\n\n  @Selector()\n  static account(state: IAuthState): IAccount | null {\n    return state.account;\n  }\n\n  ngxsOnInit(ctx: StateContext<IAuthState>): void {\n    const token = this.localStoreService.loadJwtToken();\n    if (token == null) {\n      ctx.patchState({\n        loggedIn: UnknownBoolean.FALSE,\n      });\n      return;\n    }\n\n    this.profileService.getProfile().pipe(\n      tap(profile => {\n        ctx.patchState({\n          loggedIn: UnknownBoolean.TRUE,\n          token: token,\n        });\n\n        if (profile.profileConfigured) {\n          ctx.dispatch(new Navigate([fromRoutes.dashboard]));\n        } else {\n          ctx.dispatch(new Navigate([fromRoutes.completeProfile]));\n        }\n      }),\n      map(profile => new ProfileLoadedEvent(profile)))\n      .subscribe(ctx.dispatch);\n  }\n\n  @Action(AuthLogOutAction)\n  handleAuthLogOutAction(ctx: StateContext<IAuthState>, action: AuthLogOutAction) {\n    ctx.patchState({\n      token: null,\n      loggedIn: UnknownBoolean.FALSE,\n      profileConfigured: UnknownBoolean.UNKNOWN,\n      account: null,\n    });\n  }\n\n  @Action(AuthSignInAction)\n  signIn(ctx: StateContext<IAuthState>, action: AuthSignInAction) {\n    return this.profileService.signIn(action.email, action.password)\n      .pipe(\n        mergeMap(rsp => of(\n          new ProfileLoadedEvent(rsp),\n          new AuthSignInSucceededEvent(rsp.token, rsp.profileConfigured, rsp.account),\n        )),\n        catchError(err => of(new AuthSignInFailedEvent(err.message ?? 'Sign in failed'))),\n        map(ctx.dispatch),\n      );\n  }\n\n  @Action(AuthSignInSucceededEvent)\n  signInSucceeded(ctx: StateContext<IAuthState>, action: AuthSignInSucceededEvent) {\n    ctx.patchState({\n      token: action.token,\n      loggedIn: UnknownBoolean.TRUE,\n      profileConfigured: action.isProfileConfigured ? UnknownBoolean.TRUE : UnknownBoolean.FALSE,\n      account: action.account,\n    });\n\n    this.localStoreService.saveJwtToken(action.token);\n\n    return action.isProfileConfigured ? ctx.dispatch(new Navigate(['/'])) : ctx.dispatch(new Navigate([`/${fromRoutes.completeProfile}`]));\n  }\n\n  @Action(AuthSignInFailedEvent)\n  handleSignInFailed(ctx: StateContext<IAuthState>, action: AuthSignInFailedEvent) {\n    console.warn(action.msg);\n\n    ctx.patchState({\n      token: null,\n      loggedIn: UnknownBoolean.FALSE,\n      profileConfigured: UnknownBoolean.FALSE,\n    });\n  }\n\n  @Action(AuthSignUpAction)\n  signUp(ctx: StateContext<IAuthState>, action: AuthSignUpAction) {\n    return this.profileService.signUp(action.email, action.password)\n      .pipe(\n        map(rsp => new AuthSignUpSucceededEvent(rsp.token)),\n        catchError(err => of(new AuthSignUpFailedEvent(err.message))),\n        map(ctx.dispatch),\n      );\n  }\n\n  @Action(AuthSignUpSucceededEvent)\n  handleSignUpSuccess(ctx: StateContext<IAuthState>, action: AuthSignUpSucceededEvent) {\n    ctx.patchState({\n      token: action.token,\n      loggedIn: UnknownBoolean.TRUE,\n      profileConfigured: UnknownBoolean.FALSE,\n    });\n\n    this.localStoreService.saveJwtToken(action.token);\n\n    return ctx.dispatch(new Navigate([`/${fromRoutes.completeProfile}`]));\n  }\n\n  @Action(AuthSignUpFailedEvent)\n  handleSignUpFailed(ctx: StateContext<IAuthState>, action: AuthSignUpFailedEvent) {\n    console.warn(action.msg);\n\n    ctx.patchState({\n      token: null,\n      loggedIn: UnknownBoolean.FALSE,\n      profileConfigured: UnknownBoolean.FALSE,\n    });\n  }\n\n  @Action(ProfileConfiguredSuccessfullyEvent)\n  handleProfileConfigured(ctx: StateContext<IAuthState>, action: ProfileConfiguredSuccessfullyEvent) {\n    if (ctx.getState().loggedIn) {\n      ctx.patchState({\n        profileConfigured: UnknownBoolean.TRUE,\n      });\n\n      return ctx.dispatch(new Navigate(['/']));\n    }\n    return null;\n  }\n\n  @Action(ProfileLoadedEvent)\n  handleProfileLoadedEvent(ctx: StateContext<IAuthState>, action: ProfileLoadedEvent) {\n    ctx.patchState({\n      profileConfigured: action.profile.profileConfigured ? UnknownBoolean.TRUE : UnknownBoolean.FALSE,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStoreService",
                        "type": "LocalStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStoreService",
                        "type": "LocalStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DomainState",
            "id": "injectable-DomainState-7d76d8e1fe64fef9c8cfd5c7462c85972f4daf65d14ddaf8b9e61fd046fc91964762833232586bb3109dcc842c5fae03ba347361c8e4a9f82e817ab9ebf667a5",
            "file": "src/app/state/domain/domain.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "configureProfile",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ConfigureProfileAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ConfigureProfileAction"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ConfigureProfileAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dishes",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dishesMap",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<number, IDish>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "foods",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "foodsMap",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<number, IFood>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMealRemovedEvent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "MealRemovedSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MealRemovedSuccessfullyEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MealRemovedSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMealRemovingFailed",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "MealRemovingFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MealRemovingFailedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MealRemovingFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleProfileConfiguredSuccessfullyEvent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ProfileConfiguredSuccessfullyEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleProfileConfiguringFailed",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ProfileConfigurationFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ProfileConfigurationFailedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ProfileConfigurationFailedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemoveMealAction",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RemoveMealAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "RemoveMealAction"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RemoveMealAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSuccessfulSignIn",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ProfileLoadedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDomainState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "meals",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profile",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todayMeals",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMeal[]",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todayNutrients",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "weeklyNutrients",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDomainState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Action, Selector, State, StateContext} from '@ngxs/store';\nimport {\n  ConfigureProfileAction,\n  IDomainState,\n  MealRemovedSuccessfullyEvent,\n  MealRemovingFailedEvent,\n  ProfileConfigurationFailedEvent,\n  ProfileConfiguredSuccessfullyEvent,\n  ProfileLoadedEvent,\n  RemoveMealAction,\n} from './domain.state-models';\nimport {Injectable} from '@angular/core';\nimport {ProfileService} from '../../service/profile.service';\nimport {catchError, map, of} from 'rxjs';\nimport {IDish, IFood, IMeal, IProfile} from '../../commons/models/domain.models';\nimport {emptyPfcc, IPfcc} from '../../commons/models/common.models';\nimport {isOnCurrentWeek, isToday, sumPfccs} from '../../commons/functions';\nimport {DateTime} from 'luxon';\n\nexport const DOMAIN_STATE_NAME = 'domain';\n\n@State<IDomainState>({\n  name: DOMAIN_STATE_NAME,\n  defaults: {\n    profile: null,\n    dishes: [],\n    foods: [],\n    meals: [],\n  },\n})\n@Injectable()\nexport class DomainState {\n\n  constructor(private service: ProfileService) {\n  }\n\n  @Selector()\n  static profile(state: IDomainState) {\n    return state.profile;\n  }\n\n  @Selector()\n  static dishes(state: IDomainState) {\n    return state.dishes;\n  }\n\n  @Selector()\n  static foods(state: IDomainState) {\n    return state.foods;\n  }\n\n  @Selector()\n  static meals(state: IDomainState) {\n    return state.meals;\n  }\n\n  @Selector()\n  static foodsMap(state: IDomainState): Map<number, IFood> {\n    const result = new Map<number, IFood>();\n    state.foods.forEach(f => result.set(f.id, f));\n    return result;\n  }\n\n  @Selector()\n  static dishesMap(state: IDomainState): Map<number, IDish> {\n    const result = new Map<number, IDish>();\n    state.dishes.forEach(d => result.set(d.id, d));\n    return result;\n  }\n\n  @Selector()\n  static todayNutrients(state: IDomainState): IPfcc {\n    const eaten = state.meals\n      .filter(m => isToday(m.eatenOn))\n      .map(m => m.pfcc);\n\n    if (state.profile?.base != null) {\n      eaten.push(state.profile?.base);\n    }\n\n    return sumPfccs(...eaten);\n  }\n\n  @Selector()\n  static weeklyNutrients(state: IDomainState): IPfcc {\n    const eaten = state.meals\n      .filter(m => isOnCurrentWeek(m.eatenOn))\n      .map(m => m.pfcc);\n\n    if (state.profile?.base != null) {\n      for (let i = 0; i <= DateTime.now().weekday; i++) {\n        eaten.push(state.profile?.base);\n      }\n    }\n\n    return sumPfccs(...eaten);\n  }\n\n  @Selector()\n  static todayMeals(state: IDomainState): IMeal[] {\n    return state.meals\n      .filter(m => isToday(m.eatenOn));\n  }\n\n  @Action(ProfileLoadedEvent)\n  handleSuccessfulSignIn(ctx: StateContext<IDomainState>, action: ProfileLoadedEvent) {\n    ctx.setState({\n      profile: {\n        ...action.profile,\n      },\n      meals: action.profile.meals,\n      dishes: action.profile.dishes,\n      foods: action.profile.foods,\n    });\n  }\n\n  @Action(ConfigureProfileAction)\n  configureProfile(ctx: StateContext<IDomainState>, action: ConfigureProfileAction) {\n    return this.service.configureProfile(action.aims, action.base || null)\n      .pipe(\n        map(_ => new ProfileConfiguredSuccessfullyEvent(action.aims, action.base || null)),\n        catchError(err => of(new ProfileConfigurationFailedEvent(err.message))),\n        map(ctx.dispatch),\n      );\n  }\n\n  @Action(ProfileConfiguredSuccessfullyEvent)\n  handleProfileConfiguredSuccessfullyEvent(ctx: StateContext<IDomainState>, action: ProfileConfiguredSuccessfullyEvent) {\n    const profile = ctx.getState().profile as IProfile;\n    ctx.patchState({\n      profile: {\n        ...profile,\n        profileConfigured: true,\n        aims: action.aims,\n        base: action.base,\n      },\n    });\n  }\n\n  @Action(ProfileConfigurationFailedEvent)\n  handleProfileConfiguringFailed(ctx: StateContext<IDomainState>, action: ProfileConfigurationFailedEvent) {\n    ctx.patchState({\n      profile: {\n        ...ctx.getState().profile as IProfile,\n        profileConfigured: false,\n        aims: emptyPfcc,\n        base: null,\n      },\n    });\n  }\n\n  @Action(RemoveMealAction)\n  handleRemoveMealAction(ctx: StateContext<IDomainState>, action: RemoveMealAction) {\n    return this.service.removeMeal(action.mealId).pipe(\n      map(_ => new MealRemovedSuccessfullyEvent(action.mealId)),\n      catchError(err => of(new MealRemovingFailedEvent(action.mealId, err.message))),\n      map(ctx.dispatch),\n    );\n  }\n\n  @Action(MealRemovedSuccessfullyEvent)\n  handleMealRemovedEvent(ctx: StateContext<IDomainState>, action: MealRemovedSuccessfullyEvent) {\n    ctx.patchState({\n      meals: ctx.getState().meals.filter(m => m.id !== action.mealId),\n    });\n  }\n\n  @Action(MealRemovingFailedEvent)\n  handleMealRemovingFailed(ctx: StateContext<IDomainState>, action: MealRemovingFailedEvent) {\n    console.log(`Failed to remove meal, reason: ${action.msg}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStoreService",
            "id": "injectable-LocalStoreService-fd9bd9f48c85856e427bbcca73b15470de2ce3c871990128a556ca1d50f7fc42ea21d5c6adfc19a9054d472730949e02b2304bead49c7247293638ed8ba58f61",
            "file": "src/app/service/local-store.service.ts",
            "properties": [
                {
                    "name": "JWT_KEY",
                    "defaultValue": "'jwt'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dropJwtToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadJwtToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveJwtToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStoreService {\n  private readonly JWT_KEY = 'jwt';\n\n  constructor() {\n  }\n\n  loadJwtToken(): string | null {\n    return localStorage.getItem(this.JWT_KEY);\n  }\n\n  saveJwtToken(token: string) {\n    localStorage.setItem(this.JWT_KEY, token);\n  }\n\n  dropJwtToken() {\n    localStorage.removeItem(this.JWT_KEY);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-60320d928cfab1384a1285aec720ab9c078e7523dc883313b3cdc7fd66a26e94f4978bb01c3da0b495c2d19d6f7d8e92cd5eaaccf62548fc290787b56070327d",
            "file": "src/app/service/profile.service.ts",
            "properties": [
                {
                    "name": "mockProfile",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "configureProfile",
                    "args": [
                        {
                            "name": "aims",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "base",
                            "type": "IPfcc | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "aims",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "base",
                            "type": "IPfcc | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProfileResponse>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeMeal",
                    "args": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ISignInResponse>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ISignUpResponse>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, of, throwError} from 'rxjs';\nimport {ISignInResponse, ISignUpResponse} from '../commons/models/auth.models';\nimport {IProfileResponse} from '../commons/models/domain.models';\nimport {DateTime} from 'luxon';\nimport {IPfcc} from '../commons/models/common.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  signIn(email: string, password: string): Observable<ISignInResponse> {\n    if (email === 'error') {\n      return throwError(() => new Error('Sign in failed'));\n    }\n\n    return of({\n      token: 'test-token',\n      ...this.mockProfile(),\n    });\n  }\n\n  getProfile(): Observable<IProfileResponse> {\n    return of({...this.mockProfile()});\n  }\n\n  signUp(email: string, password: string): Observable<ISignUpResponse> {\n    if (email.includes('error')) {\n      return throwError(() => new Error('Sign up failed'));\n    }\n\n    return of({\n      token: 'test-token',\n    });\n  }\n\n  configureProfile(aims: IPfcc, base: IPfcc | null): Observable<null> {\n    return of(null);\n  }\n\n  removeMeal(mealId: number): Observable<null> {\n    return of(null);\n  }\n\n  private readonly mockProfile: () => IProfileResponse = () => {\n    return {\n      aims: {\n        protein: 120,\n        fat: 50,\n        carbohydrates: 180,\n        calories: null,\n      },\n      base: {\n        protein: null,\n        fat: null,\n        carbohydrates: 12.6,\n        calories: 49,\n      },\n\n      foods: [\n        {\n          id: 1,\n          type: 'ingredient',\n          name: 'СВ Задняя часть',\n          isCookable: true,\n          consistOf: null,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 21,\n            fat: 9.6,\n            carbohydrates: 0,\n            calories: 176,\n          },\n        },\n        {\n          id: 2,\n          type: 'ingredient',\n          name: 'СВ Корейка',\n          isCookable: true,\n          consistOf: null,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 20.50,\n            fat: 5.4,\n            carbohydrates: 0,\n            calories: 136,\n          },\n        },\n        {\n          id: 3,\n          type: 'ingredient',\n          name: 'СВ Лопатка',\n          isCookable: true,\n          consistOf: null,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 16.7,\n            fat: 20,\n            carbohydrates: 0,\n            calories: 253,\n          },\n        },\n        {\n          id: 4,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'СВ Шея',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 16.1,\n            fat: 22.8,\n            carbohydrates: 0,\n            calories: 267,\n          },\n        },\n        {\n          id: 5,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'КУР Бедро б.к.',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 25.7,\n            fat: 10.7,\n            carbohydrates: 0,\n            calories: 207,\n          },\n        },\n        {\n          id: 6,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'КУР Филе',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 23,\n            fat: 1.2,\n            carbohydrates: 0,\n            calories: 110,\n          },\n        },\n        {\n          id: 7,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'ГОВ Лопатка',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 20.5,\n            fat: 6.2,\n            carbohydrates: 0,\n            calories: 144,\n          },\n        },\n        {\n          id: 8,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'ГОВ Вырезка',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 20.7,\n            fat: 8.8,\n            carbohydrates: 0,\n            calories: 169,\n          },\n        },\n        {\n          id: 9,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Пельмени ГБ свинные',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 14,\n            fat: 11.5,\n            carbohydrates: 29,\n            calories: 272,\n          },\n        },\n        {\n          id: 10,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Пельмени ГБ с/г',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 13,\n            fat: 11.2,\n            carbohydrates: 28.3,\n            calories: 262,\n          },\n        },\n        {\n          id: 11,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Пельмени ГБ 3 мяса',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 13,\n            fat: 11.2,\n            carbohydrates: 28.3,\n            calories: 262,\n          },\n        },\n        {\n          id: 12,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Гречка',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 13.2,\n            fat: 3.4,\n            carbohydrates: 71.5,\n            calories: 343,\n          },\n        },\n        {\n          id: 13,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Рис/Макароны',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 7,\n            fat: 0.6,\n            carbohydrates: 77.3,\n            calories: 323,\n          },\n        },\n        {\n          id: 14,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Булгур',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 12.3,\n            fat: 1.3,\n            carbohydrates: 75.8,\n            calories: 342,\n          },\n        },\n        {\n          id: 15,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Горох',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 23,\n            fat: 1.2,\n            carbohydrates: 53.3,\n            calories: 303,\n          },\n        },\n        {\n          id: 16,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Нут',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 19.3,\n            fat: 6,\n            carbohydrates: 60.6,\n            calories: 364,\n          },\n        },\n        {\n          id: 17,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Яйцо',\n          isCookable: false,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 6.3,\n            fat: 5,\n            carbohydrates: 0,\n            calories: 74,\n          },\n        },\n        {\n          id: 18,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Полента',\n          isCookable: true,\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 7.2,\n            fat: 1.5,\n            carbohydrates: 72.1,\n            calories: 331,\n          },\n        },\n        {\n          id: 19,\n          type: 'ingredient',\n          consistOf: null,\n          isCookable: false,\n          name: 'Моцарелла',\n          hidden: true,\n          ownedByUser: true,\n          pfcc: {\n            protein: 19,\n            fat: 1,\n            carbohydrates: 18.5,\n            calories: 246,\n          },\n        },\n        {\n          id: 20,\n          type: 'ingredient',\n          consistOf: null,\n          name: 'Протеин',\n          hidden: true,\n          isCookable: false,\n          ownedByUser: true,\n          pfcc: {\n            protein: 80,\n            fat: 0,\n            carbohydrates: 0,\n            calories: 433,\n          },\n        },\n      ],\n      dishes: [\n        {\n          id: 1,\n          name: 'Рис 07.12',\n          cookedOn: DateTime.now().set({weekday: 1}),\n          foodId: 13,\n          recipeWeight: 230,\n          cookedWeight: 530,\n        },\n      ],\n      meals: [\n        {\n          id: 1,\n          cooked: true,\n          dishId: 1,\n          foodId: 13,\n          eatenOn: DateTime.now(),\n          weight: 200,\n          pfcc: {\n            protein: 6.07547,\n            fat: 0.52075,\n            carbohydrates: 67.09056,\n            calories: 280.33962,\n          },\n        },\n        {\n          id: 2,\n          cooked: false,\n          foodId: 20,\n          dishId: null,\n          eatenOn: DateTime.now(),\n          weight: 30,\n          pfcc: {\n            protein: 24,\n            calories: 130,\n            carbohydrates: null,\n            fat: null,\n          },\n        },\n      ],\n\n      profileConfigured: true,\n\n      account: {\n        email: 'yva@test.com',\n        preferredLanguage: 'en',\n      },\n    };\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "IsAuthenticatedGuard",
            "id": "injectable-IsAuthenticatedGuard-db27a2be206587da3cd3ab68fd4783b02aeeb01c0e484bce08b2f18b1de0ea0e06ad34c63487e351dfd8c84b835022ef14f99d5fae3569bba27e93a94b69d499",
            "file": "src/app/service/is-authenticated.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot} from '@angular/router';\nimport {filter, map, Observable, tap} from 'rxjs';\nimport {Store} from '@ngxs/store';\nimport {AuthState} from '../state/auth/auth.state';\nimport {Navigate} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../commons/routes';\nimport {UnknownBoolean} from '../commons/models/common.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsAuthenticatedGuard implements CanActivate {\n  constructor(private store: Store) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.store.select(AuthState.isAuthenticated)\n      .pipe(\n        filter(isAuthenticated => isAuthenticated !== UnknownBoolean.UNKNOWN),\n        map(value => value === UnknownBoolean.TRUE),\n        tap(isAuthenticated => {\n          if (!isAuthenticated) {\n            this.store.dispatch(new Navigate([`/${fromRoutes.signIn}`]));\n          }\n        }),\n      );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "IsNotAuthenticatedGuard",
            "id": "injectable-IsNotAuthenticatedGuard-85597db961cd809d1d498e73bb38c6943f894b6f2b1a70602b98002017f4c4685105e7cca03481281506c3071799ca88862ac0acdbb728da2cac0272d3c53014",
            "file": "src/app/service/is-not-authenticated.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot} from '@angular/router';\nimport {filter, map, Observable, tap} from 'rxjs';\nimport {Store} from '@ngxs/store';\nimport {AuthState} from '../state/auth/auth.state';\nimport {UnknownBoolean} from '../commons/models/common.models';\nimport {Navigate} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../commons/routes';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsNotAuthenticatedGuard implements CanActivate {\n  constructor(private store: Store) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.store.select(AuthState.isAuthenticated)\n      .pipe(\n        filter(isAuthenticated => isAuthenticated !== UnknownBoolean.UNKNOWN),\n        map(value => value === UnknownBoolean.FALSE),\n        tap(isNotAuthenticated => {\n          if (!isNotAuthenticated) {\n            this.store.dispatch(new Navigate([`/${fromRoutes.dashboard}`]));\n          }\n        }),\n      );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ProfileConfiguredGuard",
            "id": "injectable-ProfileConfiguredGuard-ff80e43f75ac7c77bff0806c1bf49d01245fb638c42c58ea5630af945f607f3bb43f1836820f13d422cd3236e6635a460b3cd1cffd2ba7a3565cdad7c6d3e0b7",
            "file": "src/app/service/profile-configured.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot} from '@angular/router';\nimport {filter, map, Observable, tap} from 'rxjs';\nimport {Store} from '@ngxs/store';\nimport {AuthState} from '../state/auth/auth.state';\nimport {Navigate} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../commons/routes';\nimport {UnknownBoolean} from '../commons/models/common.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileConfiguredGuard implements CanActivate {\n\n  constructor(private store: Store) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> {\n    return this.store.select(AuthState.profileConfigured)\n      .pipe(\n        filter(value => value !== UnknownBoolean.UNKNOWN),\n        map(value => value === UnknownBoolean.TRUE),\n        tap(isProfileConfigured => {\n          if (!isProfileConfigured) {\n            this.store.dispatch(new Navigate([`/${fromRoutes.completeProfile}`]));\n          }\n        }),\n      );\n\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-a7866751b3fd2ab1cc2cca8689de2e79729c3bdf86e53000972249dea16b9c510dfa098399065446ec5163713f65b8cbe73f5fb84bcb2494014daa0874349c66",
            "file": "src/app/service/jwt-interceptor.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {catchError, Observable, throwError} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {Store} from '@ngxs/store';\nimport {AuthState} from '../state/auth/auth.state';\nimport {AuthLogOutAction} from '../state/auth/auth.state-models';\n\n@Injectable({\n  providedIn: 'root',\n})\nclass JwtInterceptor implements HttpInterceptor {\n  private token: string | null | undefined;\n\n  constructor(private store: Store) {\n    store.select(AuthState.token)\n      .subscribe(token => this.token = token);\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.token !== null) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.token}`,\n        },\n      });\n    }\n\n    return next.handle(req)\n      .pipe(\n        catchError(err => {\n          if (err instanceof HttpErrorResponse) {\n            if (err.status === 403) {\n              this.store.dispatch(new AuthLogOutAction());\n            }\n          } else {\n            console.warn(`Unexpected http error: ${err}`);\n          }\n\n          return throwError(() => err);\n        }),\n      );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AuthLogOutAction",
            "id": "class-AuthLogOutAction-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Log out'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSignInAction",
            "id": "class-AuthSignInAction-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Sign in'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSignInFailedEvent",
            "id": "class-AuthSignInFailedEvent-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Sign in failed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSignInSucceededEvent",
            "id": "class-AuthSignInSucceededEvent-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isProfileConfigured",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "IAccount",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isProfileConfigured",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "IAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccount",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "isProfileConfigured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Sign in succeeded'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSignUpAction",
            "id": "class-AuthSignUpAction-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Sign up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSignUpFailedEvent",
            "id": "class-AuthSignUpFailedEvent-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Sign up failed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSignUpSucceededEvent",
            "id": "class-AuthSignUpSucceededEvent-9cabaf559f68d005f755d2e74a1dc00a29b70c50c98d4cd3097db9de337a611a60c524d9d30057c425b5348144aab46629c5e9f2c9375db8202d94af1e6cdd8e",
            "file": "src/app/state/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {UnknownBoolean} from '../../commons/models/common.models';\nimport {IAccount} from '../../commons/models/auth.models';\n\nexport interface IAuthState {\n  loggedIn: UnknownBoolean,\n  profileConfigured: UnknownBoolean,\n  token: string | null,\n  account: IAccount | null;\n}\n\nexport class AuthSignInAction {\n  static readonly type = '[AUTH] Sign in';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignInSucceededEvent {\n  static readonly type = '[AUTH] Sign in succeeded';\n\n  constructor(public readonly token: string,\n              public readonly isProfileConfigured: boolean,\n              public readonly account: IAccount) {\n  }\n}\n\nexport class AuthSignInFailedEvent {\n  static readonly type = '[AUTH] Sign in failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class AuthLogOutAction {\n  static readonly type = '[AUTH] Log out';\n}\n\nexport class AuthSignUpAction {\n  static readonly type = '[AUTH] Sign up';\n\n  constructor(public readonly email: string,\n              public readonly password: string) {\n  }\n}\n\nexport class AuthSignUpSucceededEvent {\n  static readonly type = '[AUTH] Sign up succeeded';\n\n  constructor(public readonly token: string) {\n  }\n}\n\nexport class AuthSignUpFailedEvent {\n  static readonly type = '[AUTH] Sign up failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[AUTH] Sign up succeeded'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConfigureProfileAction",
            "id": "class-ConfigureProfileAction-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "aims",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "base",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "aims",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "base",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "aims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Configure profile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteDishAction",
            "id": "class-DeleteDishAction-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dishId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "dishId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "dishId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Delete dish'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MealRemovedSuccessfullyEvent",
            "id": "class-MealRemovedSuccessfullyEvent-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mealId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "mealId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "mealId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Meal removed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MealRemovingFailedEvent",
            "id": "class-MealRemovingFailedEvent-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mealId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "mealId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "mealId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Meal removing failed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileConfigurationFailedEvent",
            "id": "class-ProfileConfigurationFailedEvent-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Profile configuration failed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileConfiguredSuccessfullyEvent",
            "id": "class-ProfileConfiguredSuccessfullyEvent-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "aims",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "base",
                        "type": "IPfcc | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "aims",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "base",
                        "type": "IPfcc | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "aims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc | null",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Profile configuration updated'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileLoadedEvent",
            "id": "class-ProfileLoadedEvent-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "profile",
                        "type": "IProfileResponse",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "profile",
                        "type": "IProfileResponse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfileResponse",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Profile loaded'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemoveMealAction",
            "id": "class-RemoveMealAction-b6988665ea2dbbe49a09e75fe1720fc2839e4a65d205e2758e185ed3538cb48b0d6612607d3b4f7f6887917c74626611b963d559ef59dbaa362c4f78a4f8eb51",
            "file": "src/app/state/domain/domain.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IDish, IFood, IMeal, IProfile, IProfileResponse} from '../../commons/models/domain.models';\nimport {IPfcc} from '../../commons/models/common.models';\n\nexport interface IDomainState {\n  profile: IProfile | null;\n  foods: IFood[];\n  meals: IMeal[];\n  dishes: IDish[];\n}\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[DOMAIN] Profile loaded';\n\n  constructor(public readonly profile: IProfileResponse) {\n  }\n}\n\nexport class ConfigureProfileAction {\n  static readonly type = '[DOMAIN] Configure profile';\n\n  constructor(public readonly aims: IPfcc, public readonly base?: IPfcc) {\n  }\n}\n\nexport class ProfileConfiguredSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Profile configuration updated';\n\n  constructor(public readonly aims: IPfcc, public readonly base: IPfcc | null) {\n  }\n}\n\nexport class ProfileConfigurationFailedEvent {\n  static readonly type = '[DOMAIN] Profile configuration failed';\n\n  constructor(public readonly msg: string) {\n  }\n}\n\nexport class RemoveMealAction {\n  static readonly type = '[DOMAIN] Remove meal';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovedSuccessfullyEvent {\n  static readonly type = '[DOMAIN] Meal removed';\n\n  constructor(public readonly mealId: number) {\n  }\n}\n\nexport class MealRemovingFailedEvent {\n  static readonly type = '[DOMAIN] Meal removing failed';\n\n  constructor(public readonly mealId: number,\n              public readonly msg: string) {\n  }\n}\n\nexport class DeleteDishAction {\n  static readonly type = '[DOMAIN] Delete dish';\n\n  constructor(public readonly dishId: number) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mealId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "mealId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "mealId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[DOMAIN] Remove meal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UnknownBoolean",
            "id": "class-UnknownBoolean-2f42887daaae3f3c5d64c3096985d0b6a896f482fbde7cc810940ac74d41eec6c685d03843845ee145de777ef0f1c07df00a7f29e7a61a22f4f4b63f931b33b6",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "modifierKind": [
                    121
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "FALSE",
                    "defaultValue": "new UnknownBoolean('FALSE')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "TRUE",
                    "defaultValue": "new UnknownBoolean('TRUE')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "UNKNOWN",
                    "defaultValue": "new UnknownBoolean('UNKNOWN')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "and",
                    "args": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "not",
                    "args": [],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "or",
                    "args": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "GaugeCircleDirective",
            "id": "directive-GaugeCircleDirective-892f3e66c6828131f4f5230f01fb6c4de2c1b127f75c646d6d53996508930a2b378965b6e12701d6478a8e2bd17bd041094d110017bd141e91a1389b07949e8e",
            "file": "src/app/components/gauge/gauge-circle.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {AfterViewInit, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {IGaugeCircleConf} from './gauge-component.interfaces';\n\n@Directive({\n  selector: '[pfcGaugeCircle]',\n  standalone: true,\n})\nexport class GaugeCircleDirective implements OnDestroy, OnInit, AfterViewInit {\n\n  private static readonly STROKE_DASHARRAY = 'stroke-dasharray';\n  private static readonly TRANSFORM = 'transform';\n  private static readonly DEFAULT_COLOR = '#ee1d1d';\n  private static readonly OBSERVING_ATTRIBUTES = ['r', 'cx', 'cy'];\n\n  color: string = GaugeCircleDirective.DEFAULT_COLOR;\n  value!: number;\n  blink: boolean = false;\n  radius!: number;\n  cx!: number;\n  cy!: number;\n\n  private radiusChangedObserver: MutationObserver;\n  private maxValue: number = 100;\n\n  constructor(private el: ElementRef<SVGCircleElement>, cdr: ChangeDetectorRef) {\n    this.radiusChangedObserver = new MutationObserver((mutations: MutationRecord[]) => {\n      const interestAttrPresent = mutations.some(m => m.type == 'attributes' &&\n        m.attributeName != null &&\n        GaugeCircleDirective.OBSERVING_ATTRIBUTES.includes(m.attributeName));\n\n      if (interestAttrPresent) {\n        this.scanCircleProperties();\n      }\n    });\n    this.radiusChangedObserver.observe(this.el.nativeElement, {\n      attributes: true,\n      attributeFilter: GaugeCircleDirective.OBSERVING_ATTRIBUTES,\n    });\n  }\n\n  @Input() set pfcGaugeCircle(conf: IGaugeCircleConf) {\n    this.value = Math.max(0, conf.value);\n    this.maxValue = conf.maxValue;\n\n    this.color = conf.color;\n\n    this.blink = !!conf.blink;\n    this.recalculate();\n  }\n\n  ngAfterViewInit() {\n    this.scanCircleProperties();\n  }\n\n  ngOnDestroy(): void {\n    this.radiusChangedObserver.disconnect();\n  }\n\n  ngOnInit(): void {\n    this.scanCircleProperties();\n  }\n\n  private recalculate(): void {\n    if (this.radius == null || this.value == null) {\n      return;\n    }\n\n    const circumference = this.radius * 2 * Math.PI;\n    const arc = circumference * this.value / this.maxValue;\n\n    this.el.nativeElement.setAttribute(GaugeCircleDirective.STROKE_DASHARRAY, `${arc} ${circumference - arc}`);\n    this.el.nativeElement.setAttribute(GaugeCircleDirective.TRANSFORM, `rotate(-90, ${this.cx}, ${this.cy})`);\n  }\n\n  private scanCircleProperties() {\n    const newRadius = this.el.nativeElement.r.baseVal.value;\n    const newCx = this.el.nativeElement.cx.baseVal.value;\n    const newCy = this.el.nativeElement.cy.baseVal.value;\n\n    if (newRadius === this.radius && newCx === this.cx && newCy === this.cy) {\n      return;\n    }\n\n    this.radius = newRadius;\n    this.cx = newCx;\n    this.cy = newCy;\n\n    this.recalculate();\n  }\n\n}\n",
            "selector": "[pfcGaugeCircle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "pfcGaugeCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "IGaugeCircleConf",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "blink",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "color",
                    "defaultValue": "GaugeCircleDirective.DEFAULT_COLOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "cx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "DEFAULT_COLOR",
                    "defaultValue": "'#ee1d1d'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "maxValue",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "OBSERVING_ATTRIBUTES",
                    "defaultValue": "['r', 'cx', 'cy']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "radiusChangedObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MutationObserver",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "STROKE_DASHARRAY",
                    "defaultValue": "'stroke-dasharray'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "TRANSFORM",
                    "defaultValue": "'transform'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "recalculate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scanCircleProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<SVGCircleElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<SVGCircleElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "pfcGaugeCircle": {
                    "name": "pfcGaugeCircle",
                    "setSignature": {
                        "name": "pfcGaugeCircle",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "conf",
                                "type": "IGaugeCircleConf",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "conf",
                                "type": "IGaugeCircleConf",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AddMealComponent",
            "id": "component-AddMealComponent-5c2236ce0c878783acbca9570997c636b4a1af10f897c6c474a9699b711d0aca1ed2a43b216f7ad9c2e8f38d015f08822d3d9f989dcf1360cca57bc0cce6172b",
            "file": "src/app/components/add-meal/add-meal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-add-meal",
            "styleUrls": [
                "./add-meal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-meal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "search",
                    "defaultValue": "new EventEmitter<string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddMealDialogData",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dishOptionTrackBy",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "meals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeal[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "searchField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchField'"
                        }
                    ]
                },
                {
                    "name": "selectedOptionId",
                    "defaultValue": "'NOTHING'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDeleteOptionClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "IDishOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "IDishOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOptionClick",
                    "args": [
                        {
                            "name": "selectedOptionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedOptionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSearchChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MAT_DIALOG_DATA, MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {IMeal} from '../../commons/models/domain.models';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatListModule} from '@angular/material/list';\nimport {Observable} from 'rxjs';\nimport {IPfcc} from '../../commons/models/common.models';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\nexport interface AddMealDialogData {\n  items: Observable<IDishOption[]>;\n  filter: (val: string) => void;\n}\n\n@Component({\n  selector: 'pfc-add-meal',\n  standalone: true,\n  imports: [CommonModule,\n    TranslateModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatListModule,\n    MatExpansionModule],\n  templateUrl: './add-meal.component.html',\n  styleUrls: ['./add-meal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddMealComponent {\n  meals: IMeal[] = [];\n\n  @Output()\n  search = new EventEmitter<string | null>();\n\n  @ViewChild('searchField')\n  searchField!: ElementRef<HTMLInputElement>;\n  selectedOptionId = 'NOTHING';\n\n  constructor(private dialogRef: MatDialogRef<AddMealComponent>,\n              private cdr: ChangeDetectorRef,\n              @Inject(MAT_DIALOG_DATA) public data: AddMealDialogData) {\n  }\n\n  dishOptionTrackBy = (idx: number, item: IDishOption) => item.id;\n\n  handleSearchChange() {\n    this.data.filter(this.searchField.nativeElement.value);\n  }\n\n  handleOptionClick(selectedOptionId: string) {\n    if (this.selectedOptionId === selectedOptionId) {\n      this.selectedOptionId = 'NOTHING';\n    } else {\n      this.selectedOptionId = selectedOptionId;\n    }\n    this.cdr.markForCheck();\n  }\n\n  handleDeleteOptionClick(option: IDishOption) {\n    if (option.type === 'dish' && option.delete != null) {\n      option.delete();\n    }\n  }\n}\n\nexport type DishOptionType = 'dish' | 'recipe' | 'raw-food';\n\ninterface IBaseDishOption {\n  id: string;\n  name: string;\n  type: DishOptionType;\n  pfcc: IPfcc;\n}\n\nexport type IDishOption =\n  (IBaseDishOption & { type: 'dish', delete?: (() => void) }) |\n  (IBaseDishOption & { type: 'recipe' | 'raw-food' })\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  > * {\n    width: 100%;\n    box-sizing: border-box;\n  }\n}\n\n.title {\n  flex-grow: 0;\n  flex-shrink: 0;\n  padding: 24px 24px 24px;\n  margin: 0;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 1;\n  overflow: hidden;\n\n  .dish-search {\n    padding: 0 5px;\n  }\n\n  .dishes {\n    overflow: scroll;\n\n    .dishes-header {\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: flex-start;\n    }\n\n    .dishes-header_title {\n      display: flex;\n      flex-direction: column;\n      align-items: flex-start;\n      justify-content: flex-start;\n    }\n\n    .dishes-header_title-primary {\n      margin: 0;\n    }\n\n    .dishes-header_title-secondary {\n      margin: 0;\n      font-size: .7rem;\n      color: #707070;\n\n      strong {\n        font-weight: 900;\n        color: red;\n      }\n    }\n  }\n}\n\n.actions {\n  flex-grow: 0;\n  flex-shrink: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 10px;\n  padding: 24px 10px;\n  box-sizing: border-box;\n  width: 100%;\n\n  * {\n    flex-grow: 1;\n  }\n}\n",
                    "styleUrl": "./add-meal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMealComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "AddMealDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMealComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "AddMealDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 class=\"title\">{{'add-meal.title' | translate}}</h1>\n<div class=\"content\">\n  <mat-form-field class=\"dish-search\">\n    <input #searchField (input)=\"handleSearchChange()\" matInput placeholder=\"Search\" type=\"text\">\n    <mat-icon matSuffix>search</mat-icon>\n  </mat-form-field>\n  <mat-accordion class=\"dishes\" displayMode=\"flat\">\n    <mat-expansion-panel *ngFor=\"let option of data.items | async; trackBy: dishOptionTrackBy\"\n                         hideToggle>\n      <mat-expansion-panel-header>\n        <div class=\"dishes-header\">\n          <div class=\"dishes-header_title\">\n            <p class=\"dishes-header_title-primary\">{{option.name}}</p>\n            <p [innerHTML]=\"'add-meal.option-subtitle' | translate:option.pfcc\"\n               class=\"dishes-header_title-secondary\"></p>\n          </div>\n\n          <div *ngIf=\"option.type === 'dish'\" class=\"flex-spacer\"></div>\n\n          <button (click)=\"handleDeleteOptionClick(option); $event.stopPropagation();\" *ngIf=\"option.type === 'dish'\" color=\"accent\"\n                  mat-icon-button>\n            <mat-icon>delete</mat-icon>\n          </button>\n        </div>\n      </mat-expansion-panel-header>\n\n      <ng-template matExpansionPanelContent>\n        <div [ngSwitch]=\"option.type\">\n          <div *ngSwitchCase=\"'dish'\">\n            <mat-form-field>\n              <mat-label>Вага</mat-label>\n              <input matInput matSuffix=\"г\">\n            </mat-form-field>\n          </div>\n          <div *ngSwitchCase=\"'recipe'\">\n            <p>a Recipe {{option.name}}</p></div>\n          <div *ngSwitchCase=\"'raw-food'\">\n            <p>a Raw food {{option.name}}</p></div>\n        </div>\n      </ng-template>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n<div class=\"actions\">\n  <button [mat-dialog-close]=\"meals\"\n          color=\"accent\"\n          mat-raised-button>\n    {{'add-meal.add-btn' | translate}}\n  </button>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b8053f36fe72014420475fc9909e120bcf07dc5053c7792529a191d4dca55b6c68c9abf956353988c45b62a4a962e60abe554550b9ed31cfe45aa160f0229b8f",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Store} from '@ngxs/store';\nimport {AuthState} from './state/auth/auth.state';\nimport {filter, map} from 'rxjs';\n\n@Component({\n  selector: 'pfc-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(private translateService: TranslateService, private store: Store) {\n    translateService.setDefaultLang('ua');\n    translateService.use('ua');\n\n    store.select(AuthState.account)\n      .pipe(\n        map(acc => acc?.preferredLanguage),\n        filter(lang => lang != null),\n      )\n      .subscribe(lang => translateService.use(lang as string));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ConfigureProfileComponent",
            "id": "component-ConfigureProfileComponent-ac32ac3221a551a456ec59cf8303bea5ef7a7ff7684c194f0f01dca4076f0571d6611fe71302fd6e19cb940af9f8eee0a490243fe1c71056062682cb3437ba5c",
            "file": "src/app/pages/configure-profile/configure-profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-configure-profile",
            "styleUrls": [
                "./configure-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./configure-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    protein: [100, Validators.min(0)],\n    fat: [40, Validators.min(0)],\n    carbohydrates: [150, Validators.min(0)],\n    calories: [2000, Validators.min(0)],\n    baseValues: [false],\n    baseProtein: [0, Validators.min(0)],\n    baseFat: [0, Validators.min(0)],\n    baseCarbohydrates: [0, Validators.min(0)],\n    baseCalories: [0, Validators.min(0)],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {Store} from '@ngxs/store';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {ConfigureProfileAction} from '../../state/domain/domain.state-models';\nimport {TranslateModule} from '@ngx-translate/core';\n\n@Component({\n  selector: 'pfc-configure-profile',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, MatFormFieldModule, MatButtonModule, MatInputModule, MatSlideToggleModule, TranslateModule],\n  templateUrl: './configure-profile.component.html',\n  styleUrls: ['./configure-profile.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfigureProfileComponent {\n  form = this.fb.group({\n    protein: [100, Validators.min(0)],\n    fat: [40, Validators.min(0)],\n    carbohydrates: [150, Validators.min(0)],\n    calories: [2000, Validators.min(0)],\n    baseValues: [false],\n    baseProtein: [0, Validators.min(0)],\n    baseFat: [0, Validators.min(0)],\n    baseCarbohydrates: [0, Validators.min(0)],\n    baseCalories: [0, Validators.min(0)],\n  });\n\n  constructor(private store: Store, private fb: FormBuilder) {\n  }\n\n  submit() {\n    this.store.dispatch(new ConfigureProfileAction({\n      protein: this.form.value.protein || null,\n      fat: this.form.value.fat || null,\n      carbohydrates: this.form.value.carbohydrates || null,\n      calories: this.form.value.calories || null,\n    }, this.form.value.baseValues ? {\n      protein: this.form.value.baseProtein || null,\n      fat: this.form.value.baseFat || null,\n      carbohydrates: this.form.value.baseCarbohydrates || null,\n      calories: this.form.value.baseCalories || null,\n    } : undefined));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 15%;\n  height: 100%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  width: 100%;\n}\n\na[mat-button] {\n  width: 100%;\n}\n\n.base-hint {\n  font-size: 0.6rem;\n  margin-top: 0.5em;\n  color: rgba(0, 0, 0, .54);\n}\n",
                    "styleUrl": "./configure-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>{{'common.protein' | translate}}</mat-label>\n    <input formControlName=\"protein\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>{{'common.fat' | translate}}</mat-label>\n    <input formControlName=\"fat\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>{{'common.carbohydrates' | translate}}</mat-label>\n    <input formControlName=\"carbohydrates\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>{{'common.calories' | translate}}</mat-label>\n    <input formControlName=\"calories\" matInput type=\"number\"/>\n  </mat-form-field>\n\n  <mat-slide-toggle formControlName=\"baseValues\">{{'complete-profile.base-values.label' | translate}}</mat-slide-toggle>\n  <p class=\"base-hint\">{{'complete-profile.base-values.description' | translate}}</p>\n\n\n  <mat-form-field *ngIf=\"form.controls.baseValues.value\">\n    <mat-label>{{'complete-profile.base-values.protein' | translate}}</mat-label>\n    <input formControlName=\"baseProtein\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field *ngIf=\"form.controls.baseValues.value\">\n    <mat-label>{{'complete-profile.base-values.fat' | translate}}</mat-label>\n    <input formControlName=\"baseFat\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field *ngIf=\"form.controls.baseValues.value\">\n    <mat-label>{{'complete-profile.base-values.carbohydrates' | translate}}</mat-label>\n    <input formControlName=\"baseCarbohydrates\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field *ngIf=\"form.controls.baseValues.value\">\n    <mat-label>{{'complete-profile.base-values.calories' | translate}}</mat-label>\n    <input formControlName=\"baseCalories\" matInput type=\"number\"/>\n  </mat-form-field>\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button\n          type=\"submit\">{{'complete-profile.submit-btn' | translate}}</button>\n</form>\n"
        },
        {
            "name": "DashboardPageComponent",
            "id": "component-DashboardPageComponent-811f4a4624f26e5231ec8de8f262340041c18487d06d2747351e32ca897ee7fc14079af2f5fbcd89ced2ec00c8f03ae8ed6f8d55696ea4a228ca50a4316f6f52",
            "file": "src/app/pages/dashboard-page/dashboard-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-dashboard-page",
            "styleUrls": [
                "./dashboard-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dailyAims$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPfcc>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "dailyNutrients$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPfcc>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "eatenMeals$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IExtendedMeal[]>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "mealTrackBy",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "profile$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IProfile>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "weeklyAims$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPfcc>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "weeklyNutrients$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPfcc>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "addMeal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMealName",
                    "args": [
                        {
                            "name": "meal",
                            "type": "IExtendedMeal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "meal",
                            "type": "IExtendedMeal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeMeal",
                    "args": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewInit, ChangeDetectionStrategy, Component} from '@angular/core';\nimport {NutritionGaugeComponent} from '../../components/nutrition-gauge/nutrition-gauge.component';\nimport {Store} from '@ngxs/store';\nimport {DomainState} from '../../state/domain/domain.state';\nimport {IDish, IFood, IMeal, IProfile} from '../../commons/models/domain.models';\nimport {BehaviorSubject, combineLatest, combineLatestWith, filter, map, Observable} from 'rxjs';\nimport {AsyncPipe, CommonModule} from '@angular/common';\nimport {emptyPfcc, IPfcc} from '../../commons/models/common.models';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DateTime} from 'luxon';\nimport {MatListModule} from '@angular/material/list';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {ceilPfcc, multiplyPfcc} from '../../commons/functions';\nimport {MatIconModule} from '@angular/material/icon';\nimport {DeleteDishAction, RemoveMealAction} from '../../state/domain/domain.state-models';\nimport {MatDialog, MatDialogModule} from '@angular/material/dialog';\nimport {\n  AddMealComponent,\n  AddMealDialogData,\n  DishOptionType,\n  IDishOption,\n} from '../../components/add-meal/add-meal.component';\n\n@Component({\n  selector: 'pfc-dashboard-page',\n  templateUrl: './dashboard-page.component.html',\n  styleUrls: ['./dashboard-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [CommonModule, NutritionGaugeComponent, AsyncPipe, MatButtonModule, MatListModule, TranslateModule, MatIconModule, MatDialogModule],\n})\nexport class DashboardPageComponent implements AfterViewInit {\n  profile$: Observable<IProfile>;\n\n  dailyNutrients$: Observable<IPfcc>;\n  weeklyNutrients$: Observable<IPfcc>;\n\n  dailyAims$: Observable<IPfcc>;\n  weeklyAims$: Observable<IPfcc>;\n\n  eatenMeals$: Observable<IExtendedMeal[]>;\n\n  constructor(private store: Store, private dialog: MatDialog) {\n    const weekday = DateTime.now().weekday;\n\n    this.profile$ = this.store.select(DomainState.profile)\n      .pipe(\n        filter(p => p != null),\n      ) as Observable<IProfile>;\n\n    this.dailyAims$ = this.store.select(DomainState.profile).pipe(\n      filter(p => p != null),\n      map(p => p?.aims || emptyPfcc),\n    ) as Observable<IPfcc>;\n    this.weeklyAims$ = this.dailyAims$.pipe(\n      map(aims => {\n        return {\n          protein: (aims.protein || 0) * weekday,\n          fat: (aims.fat || 0) * weekday,\n          carbohydrates: (aims.carbohydrates || 0) * weekday,\n          calories: (aims.calories || 0) * weekday,\n        };\n      }),\n    ) as Observable<IPfcc>;\n\n\n    this.weeklyNutrients$ = this.store.select(DomainState.weeklyNutrients)\n      .pipe(\n        map(ceilPfcc),\n      );\n    this.dailyNutrients$ = this.store.select(DomainState.todayNutrients)\n      .pipe(\n        map(ceilPfcc),\n      );\n\n    this.eatenMeals$ = this.store.select(DomainState.todayMeals)\n      .pipe(\n        combineLatestWith(this.store.select(DomainState.dishesMap), this.store.select(DomainState.foodsMap)),\n        map(([meals, dishes, foods]) => {\n          return meals.map(meal => {\n            const dish = meal.cooked ? dishes.get(meal.dishId) || null : null;\n            let food: any;\n            if (meal.cooked) {\n              food = dish != null ? foods.get(dish.foodId) : null;\n            } else {\n              food = foods.get(meal.foodId);\n            }\n\n            const pfcc = ceilPfcc(meal.pfcc, 1);\n            const extendedMeal: IExtendedMeal = {\n              ...meal,\n              pfcc: {\n                protein: pfcc.protein || 0,\n                fat: pfcc.fat || 0,\n                carbohydrates: pfcc.carbohydrates || 0,\n                calories: pfcc.calories || 0,\n              },\n              dish: dish,\n              food: food,\n            };\n            return extendedMeal;\n          });\n        }),\n      );\n  }\n\n  mealTrackBy = (idx: number, item: IExtendedMeal) => item.id;\n\n  ngAfterViewInit() {\n    this.addMeal();\n  }\n\n  removeMeal(mealId: number) {\n    this.store.dispatch(new RemoveMealAction(mealId));\n  }\n\n  addMeal() {\n    const filter$ = new BehaviorSubject<string | null>(null);\n\n    const allDishOptions$ = combineLatest([\n      this.store.select(DomainState.dishes),\n      this.store.select(DomainState.foodsMap),\n    ]).pipe(\n      map(([dishes, foodsMap]): IDishOption[] => {\n        return [\n          ...dishes.filter(d => {\n            const foodIsPresent = foodsMap.has(d.foodId);\n            if (!foodIsPresent) {\n              console.error(`Food with id ${d.foodId} is not found; dish: ${d}`);\n            }\n            return foodIsPresent;\n          }).map(dish => {\n            const food = foodsMap.get(dish.foodId) as IFood;\n            const item: IDishOption = {\n              id: `dish-${dish.id}`,\n              name: dish.name,\n              type: 'dish',\n              pfcc: ceilPfcc(multiplyPfcc(food.pfcc, (dish.cookedWeight / dish.recipeWeight)), 1), // TODO: Ceil pfcc?\n              delete: () => {\n                this.store.dispatch(new DeleteDishAction(dish.id));\n              },\n            };\n            return item;\n          }),\n\n          ...Array.from(foodsMap.values()).map(food => {\n            return {\n              id: `food-${food.id}`,\n              name: food.name,\n              pfcc: food.pfcc,\n              type: (food.isCookable ? 'recipe' : 'raw-food') as DishOptionType,\n            };\n          }),\n        ];\n      }),\n    );\n    const ref = this.dialog.open<AddMealComponent, AddMealDialogData>(AddMealComponent, {\n      panelClass: 'fullscreen-dialog',\n\n      data: {\n        filter: val => filter$.next(val),\n        items: combineLatest([allDishOptions$, filter$])\n          .pipe(\n            map(([options, filter]): IDishOption[] => options.filter(o => filter == null || o.name.toLowerCase().includes(filter.toLowerCase()))),\n          ),\n      },\n    });\n    ref.afterClosed()\n      .subscribe(console.log);\n  }\n\n  getMealName(meal: IExtendedMeal): string | null {\n    return (meal.cooked ? meal.dish?.name : meal.food.name) || null;\n  }\n}\n\ntype IExtendedMeal = IMeal &\n  {\n    food: IFood,\n    dish: IDish | null\n  };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  row-gap: 3vw;\n  height: 100%;\n  padding: 3vw 0;\n}\n\n.nutrients {\n  display: flex;\n  flex-direction: column;\n  row-gap: 3vw;\n  padding: 0 3vw;\n\n  &__header {\n    font-size: 1.2rem;\n    margin: 0 0 .2rem;\n  }\n\n  &__gauges {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n\n    > * {\n      width: 22%;\n    }\n  }\n}\n\n.add-meal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0 3vw;\n\n  > * {\n    width: 100%;\n  }\n}\n\n.meals {\n  &__header {\n    font-size: 1.2rem;\n    margin: 0 0 .2rem;\n    padding: 0 3vw;\n  }\n\n  &__line {\n    width: 100%;\n    box-sizing: border-box;\n    padding: 0 3vw;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    &_even {\n      background-color: rgba(0, 0, 0, .1);\n    }\n  }\n\n  &__description {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  &__title {\n    font-size: .8rem;\n  }\n\n  &__weight {\n    font-size: .65rem;\n    color: rgba(0, 0, 0, .54);\n  }\n}\n",
                    "styleUrl": "./dashboard-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"nutrients\">\n  <div class=\"nutrients__period-block\">\n    <h1 class=\"nutrients__header\">{{'dashboard.weekly-nutrients' | translate}}</h1>\n    <div class=\"nutrients__gauges\">\n      <pfc-nutrition-gauge [aim]=\"(weeklyAims$ | async)?.protein || null\"\n                           [title]=\"'common.protein' | translate\"\n                           [value]=\"(weeklyNutrients$ | async)?.protein || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"(weeklyAims$ | async)?.fat || null\"\n                           [title]=\"'common.fat' | translate\"\n                           [value]=\"(weeklyNutrients$ | async)?.fat || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"(weeklyAims$ | async)?.carbohydrates || null\"\n                           [title]=\"'common.carbohydrates' | translate\"\n                           [value]=\"(weeklyNutrients$ | async)?.carbohydrates || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"(weeklyAims$ | async)?.calories || null\"\n                           [title]=\"'common.calories' | translate\"\n                           [value]=\"(weeklyNutrients$ | async)?.calories || 0\"></pfc-nutrition-gauge>\n    </div>\n  </div>\n\n  <div class=\"nutrients__period-block\">\n    <h1 class=\"nutrients__header\">{{'dashboard.daily-nutrients' | translate}}</h1>\n    <div class=\"nutrients__gauges\">\n      <pfc-nutrition-gauge [aim]=\"(dailyAims$ | async)?.protein || null\"\n                           [title]=\"'common.protein' | translate\"\n                           [value]=\"(dailyNutrients$ | async)?.protein || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"(dailyAims$ | async)?.fat || null\"\n                           [title]=\"'common.fat' | translate\"\n                           [value]=\"(dailyNutrients$ | async)?.fat || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"(dailyAims$ | async)?.carbohydrates || null\"\n                           [title]=\"'common.carbohydrates' | translate\"\n                           [value]=\"(dailyNutrients$ | async)?.carbohydrates || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"(dailyAims$ | async)?.calories || null\"\n                           [title]=\"'common.calories' | translate\"\n                           [value]=\"(dailyNutrients$ | async)?.calories || 0\"></pfc-nutrition-gauge>\n    </div>\n  </div>\n</div>\n\n<div class=\"meals\">\n  <h1 class=\"meals__header\">{{'dashboard.meals-list.title' | translate}}</h1>\n  <mat-list>\n    <div *ngFor=\"let meal of eatenMeals$ | async; let i=index; trackBy: mealTrackBy\" [ngClass]=\"i % 2 === 1 ? 'meals__line_even' : ''\" class=\"meals__line\"\n         mat-line>\n      <div class=\"meals__description\">\n        <span class=\"meals__title\">{{getMealName(meal)}} - {{meal.weight}}{{'common.gram-sign' | translate}}</span>\n        <span class=\"meals__weight\">{{meal.pfcc.protein}}{{'common.gram-sign' | translate}}\n          /{{meal.pfcc.fat}}{{'common.gram-sign' | translate}}\n          /{{meal.pfcc.carbohydrates}}{{'common.gram-sign' | translate}} {{meal.pfcc.calories}}{{'common.calories-sign' | translate}}</span>\n      </div>\n      <div class=\"flex-spacer\"></div>\n      <button (click)=\"removeMeal(meal.id)\" mat-icon-button>\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </mat-list>\n</div>\n\n\n<div class=\"flex-spacer\"></div>\n\n<div class=\"add-meal\">\n  <button (click)=\"addMeal()\" color=\"accent\" mat-raised-button>{{'dashboard.add-meal-btn' | translate}}</button>\n</div>\n"
        },
        {
            "name": "GaugeComponent",
            "id": "component-GaugeComponent-b854589f3ad76904f17683d49067158c7e4789007229f2e7c5efec62fe457452402c8c6d23ebce4cf5dfb662ca220aff39f51abecc04f64703952aa68472ba90",
            "file": "src/app/components/gauge/gauge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-gauge",
            "styleUrls": [
                "./gauge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gauge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "animationDuration",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitleFontSize",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "subtitleShift",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "titleFontSize",
                    "defaultValue": "35",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "titleShift",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "IGaugeTrackConf[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_tracks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGaugeInternalTrackConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "circleTrackByFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "height",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "subtitleX",
                    "defaultValue": "52",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "subtitleY",
                    "defaultValue": "70",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "titleX",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "titleY",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "trackTrackByFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "viewBox",
                    "defaultValue": "'0 0 100 100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "width",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input} from '@angular/core';\nimport {GaugeCircleDirective} from './gauge-circle.directive';\nimport {IGaugeCircleConf, IGaugeTrackConf} from './gauge-component.interfaces';\nimport {CommonModule} from '@angular/common';\n\ninterface IGaugeInternalTrackConfig extends IGaugeTrackConf {\n  radius: number;\n}\n\n@Component({\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'pfc-gauge',\n  templateUrl: './gauge.component.html',\n  styleUrls: ['./gauge.component.scss'],\n  imports: [\n    CommonModule, GaugeCircleDirective,\n  ],\n})\nexport class GaugeComponent {\n  @Input() animationDuration = 3;\n  @Input() title!: string;\n  @Input() subtitle?: string;\n\n  @Input() titleShift?: number;\n  @Input() subtitleShift?: number;\n\n  @Input() titleFontSize = 35;\n  @Input() subtitleFontSize = 20;\n\n  titleX = 50;\n  titleY = 50;\n  subtitleX = 52;\n  subtitleY = 70;\n  width = 100;\n  height = 100;\n  viewBox = '0 0 100 100';\n\n  _tracks: IGaugeInternalTrackConfig[] = [];\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  @Input()\n  set values(values: IGaugeTrackConf[]) {\n    let cumulativeRadius = 40;\n    this._tracks = values.map((track, idx) => {\n      cumulativeRadius += track.strokeWidth;\n      return {\n        ...track,\n        trackId: track.trackId != null ? track.trackId : idx,\n        radius: cumulativeRadius - (track.strokeWidth / 2),\n        circles: track.circles.map((circle, idx) => {\n          return {\n            ...circle,\n            circleId: circle.circleId != null ? circle.circleId : idx,\n          };\n        }),\n      };\n    });\n\n    this.width = this.height = cumulativeRadius * 2;\n    this.titleY = this.titleX = cumulativeRadius;\n    this.subtitleX = cumulativeRadius;\n    this.subtitleY = cumulativeRadius + this.subtitleFontSize;\n    this.viewBox = `0 0 ${this.width} ${this.height}`;\n    for (const track of this._tracks) {\n      track.circles.sort((c1, c2) => c2.value - c1.value);\n    }\n    // this.cdr.markForCheck();\n  }\n\n  trackTrackByFn = (idx: number, track: IGaugeTrackConf) => {\n    return track.trackId != null ? track.trackId : idx;\n  };\n\n  circleTrackByFn = (idx: number, circle: IGaugeCircleConf) => {\n    return circle.circleId ? circle.circleId : idx;\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".gauge {\n  width: 100%;\n  height: 100%;\n}\n\n.foreground-circle {\n  transition: stroke-dasharray 2s linear;\n\n  &__animated {\n    animation-name: foreground-circle-kf;\n    animation-duration: 1.2s;\n    animation-iteration-count: infinite;\n    animation-timing-function: ease-in;\n\n    @keyframes foreground-circle-kf {\n      from {\n        stroke-opacity: 100%;\n      }\n      50% {\n        stroke-opacity: 50%;\n      }\n      to {\n        stroke-opacity: 100%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./gauge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "values": {
                    "name": "values",
                    "setSignature": {
                        "name": "values",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "values",
                                "type": "IGaugeTrackConf[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "values",
                                "type": "IGaugeTrackConf[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<svg [attr.viewBox]=\"viewBox\" class=\"gauge\">\n  <ng-container *ngFor=\"let track of _tracks; let i = index; trackBy: trackTrackByFn\">\n    <circle [attr.cx]=\"width / 2\"\n            [attr.cy]=\"height / 2\"\n            [attr.r]=\"track.radius\"\n            [attr.stroke-width]=\"track.strokeWidth\"\n            [attr.stroke]=\"track.bgStrokeColor\"\n\n            fill=\"transparent\">\n    </circle>\n\n    <circle *ngFor=\"let circle of track.circles; trackBy: circleTrackByFn\"\n            [attr.cx]=\"width / 2\"\n            [attr.cy]=\"height / 2\"\n            [attr.r]=\"track.radius\"\n            [attr.stroke-width]=\"track.strokeWidth\"\n            [attr.stroke]=\"circle.color\"\n            [class.foreground-circle__animated]=\"circle.blink\"\n            [pfcGaugeCircle]=\"circle\"\n            class=\"foreground-circle\"\n            fill=\"transparent\"\n            stroke-linecap=\"round\">\n    </circle>\n  </ng-container>\n\n  <text [attr.font-size]=\"titleFontSize\"\n        [attr.x]=\"titleX\"\n        [attr.y]=\"titleY\"\n        class=\"title\"\n        font-weight=\"bold\"\n        text-anchor=\"middle\">\n    {{title}}\n  </text>\n  <text [attr.font-size]=\"subtitleFontSize\"\n        [attr.x]=\"subtitleX\"\n        [attr.y]=\"subtitleY\"\n        class=\"subtitle\"\n        text-anchor=\"middle\">\n    {{subtitle}}\n  </text>\n</svg>\n"
        },
        {
            "name": "NutritionGaugeComponent",
            "id": "component-NutritionGaugeComponent-109d9e7510af4fa12dd41521450b0d10963ac5ec21b4376e15e1e07b48e90531391d3c15de0ad4dffdf603aafa08613e15c0af8800ef30accc343bcf505917bd",
            "file": "src/app/components/nutrition-gauge/nutrition-gauge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-nutrition-gauge",
            "styleUrls": [
                "./nutrition-gauge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nutrition-gauge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addingValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "aim",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "'#bf3060'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mainColor",
                    "defaultValue": "'#ff4081'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "15",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {GaugeComponent} from '../gauge/gauge.component';\nimport {IGaugeTrackConf} from '../gauge/gauge-component.interfaces';\n\n@Component({\n  selector: 'pfc-nutrition-gauge',\n  standalone: true,\n  imports: [CommonModule, GaugeComponent],\n  templateUrl: './nutrition-gauge.component.html',\n  styleUrls: ['./nutrition-gauge.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NutritionGaugeComponent {\n  @Input() value = 0;\n  @Input() aim: number | null = 100;\n  @Input() addingValue = 0;\n  @Input() title!: string;\n\n  @Input() strokeWidth = 15;\n  @Input() mainColor = '#ff4081';\n  @Input() bgColor = '#bf3060';\n\n  constructor() {\n  }\n\n  get titleShorten(): string {\n    return this.title.charAt(0).toUpperCase();\n  }\n\n  get gaugeConfig(): IGaugeTrackConf[] {\n    const result = [\n      {\n        strokeWidth: this.strokeWidth,\n        bgStrokeColor: this.bgColor,\n        circles: [\n          {\n            value: this.value,\n            maxValue: this.aim || (this.value + (this.addingValue > 0 ? this.addingValue : 0)),\n            color: this.mainColor,\n            blink: false,\n          },\n        ],\n      },\n    ];\n\n    if (this.addingValue) {\n      result[0].circles.push({\n        value: this.value + this.addingValue,\n        maxValue: this.aim|| (this.value + (this.addingValue > 0 ? this.addingValue : 0)),\n        color: this.mainColor,\n        blink: true\n      });\n    }\n    return result;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .values, .title {\n    font-size: .7rem;\n  }\n}\n",
                    "styleUrl": "./nutrition-gauge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "accessors": {
                "titleShorten": {
                    "name": "titleShorten",
                    "getSignature": {
                        "name": "titleShorten",
                        "type": "string",
                        "returnType": "string",
                        "line": 27
                    }
                },
                "gaugeConfig": {
                    "name": "gaugeConfig",
                    "getSignature": {
                        "name": "gaugeConfig",
                        "type": "[]",
                        "returnType": "IGaugeTrackConf[]",
                        "line": 31
                    }
                }
            },
            "templateData": "<pfc-gauge [subtitle]=\"'' + aim\"\n           [title]=\"titleShorten\"\n           [values]=\"gaugeConfig\"\n></pfc-gauge>\n\n<span *ngIf=\"aim != null\" class=\"values\">{{value}}/{{aim}}</span>\n<span *ngIf=\"aim == null\" class=\"values\">{{value}}</span>\n<span class=\"title\">{{title}}</span>\n"
        },
        {
            "name": "SignInPageComponent",
            "id": "component-SignInPageComponent-3468ccef1ee0538b832e18f0785681626e3c77b32febe9f5d8f47a4fbcbda4c967e423cc7a317b341e809ff180a478a8e938afb7aee7ae5a33a3978dc31308b6",
            "file": "src/app/pages/sign-in-page/sign-in-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-sign-in-page",
            "styleUrls": [
                "./sign-in-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: ['', Validators.compose([Validators.required, Validators.email])],\n    password: ['', Validators.compose([Validators.required])],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatInputModule} from '@angular/material/input';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {Store} from '@ngxs/store';\nimport {AuthSignInAction} from '../../state/auth/auth.state-models';\nimport {TranslateModule} from '@ngx-translate/core';\n\n@Component({\n  selector: 'pfc-sign-in-page',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    TranslateModule,\n  ],\n  templateUrl: './sign-in-page.component.html',\n  styleUrls: ['./sign-in-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignInPageComponent implements OnInit {\n\n  form = this.fb.group({\n    email: ['', Validators.compose([Validators.required, Validators.email])],\n    password: ['', Validators.compose([Validators.required])],\n  });\n\n  constructor(private fb: FormBuilder,\n              private store: Store) {\n  }\n\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    const email = this.form.value.email as string;\n    const password = this.form.value.password as string;\n    this.store.dispatch(new AuthSignInAction(email, password));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 15%;\n  height: 100%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  width: 100%;\n}\n\na[mat-button] {\n  width: 100%;\n}\n",
                    "styleUrl": "./sign-in-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n\n  <mat-form-field>\n    <mat-label>{{'sign-in.email.label' | translate}}</mat-label>\n    <input formControlName=\"email\" matInput type=\"text\"/>\n\n    <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n               [innerHTML]=\"'sign-in.email.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.controls.email.hasError('email')\">\n      {{'sign-in.email.email' | translate}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-in.password.label' | translate}}</mat-label>\n    <input formControlName=\"password\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.password.hasError('required')\"\n               [innerHTML]=\"'sign-in.password.required' | translate\">\n    </mat-error>\n  </mat-form-field>\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button type=\"submit\">\n    {{'sign-in.sign-in-btn' | translate}}\n  </button>\n  <a href=\"/signup\" mat-button>\n    {{'sign-in.sign-up-link' | translate}}\n  </a>\n</form>\n"
        },
        {
            "name": "SignUpPageComponent",
            "id": "component-SignUpPageComponent-3b7c73909caeed7707806fd79dab53742f8555a526ade11f131f7ab66c026887504abd639044d1d1d51a75f199c254c28ae56ef7a34d5ae3e3bb98ba3e0e30e0",
            "file": "src/app/pages/sign-up-page/sign-up-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-sign-up-page",
            "styleUrls": [
                "./sign-up-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: ['', Validators.compose([Validators.email, Validators.required])],\n    password: ['', Validators.compose([Validators.required, Validators.minLength(this.minPasswordLength)])],\n    confirmPassword: ['', Validators.compose([Validators.required, Validators.minLength(this.minPasswordLength)])],\n  }, {\n    validators: fromPfccValidators.fieldsMatches('password', 'confirmPassword'),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "minPasswordLength",
                    "defaultValue": "6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {CommonModule} from '@angular/common';\nimport * as fromPfccValidators from '../../commons/pfcc-validators';\nimport {Store} from '@ngxs/store';\nimport {AuthSignUpAction} from '../../state/auth/auth.state-models';\nimport {MatInputModule} from '@angular/material/input';\nimport {map} from 'rxjs';\nimport {TranslateModule} from '@ngx-translate/core';\n\n@Component({\n  selector: 'pfc-sign-up-page',\n  templateUrl: './sign-up-page.component.html',\n  styleUrls: ['./sign-up-page.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    TranslateModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignUpPageComponent implements OnInit {\n\n\n  readonly minPasswordLength = 6;\n  form = this.fb.group({\n    email: ['', Validators.compose([Validators.email, Validators.required])],\n    password: ['', Validators.compose([Validators.required, Validators.minLength(this.minPasswordLength)])],\n    confirmPassword: ['', Validators.compose([Validators.required, Validators.minLength(this.minPasswordLength)])],\n  }, {\n    validators: fromPfccValidators.fieldsMatches('password', 'confirmPassword'),\n  });\n\n  constructor(private fb: FormBuilder, private store: Store) {\n  }\n\n  ngOnInit(): void {\n    this.form.statusChanges\n      .pipe(\n        map(formStatus => {\n          return [\n            formStatus,\n            this.form.errors,\n            this.form.controls.email.errors,\n            this.form.controls.password.errors,\n            this.form.controls.confirmPassword.errors,\n          ];\n        }),\n      )\n      .subscribe(console.log);\n  }\n\n  signUp() {\n    const password = this.form.value.password as string;\n    const email = this.form.value.email as string;\n    this.store.dispatch(new AuthSignUpAction(email, password));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 15%;\n  height: 100%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  width: 100%;\n}\n\na[mat-button] {\n  width: 100%;\n}\n",
                    "styleUrl": "./sign-up-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form (ngSubmit)=\"signUp()\" [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>{{'sign-up.email.label' | translate}}</mat-label>\n    <input formControlName=\"email\" matInput type=\"text\"/>\n\n    <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n               [innerHTML]=\"'sign-up.email.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.controls.email.hasError('email')\">\n      {{'sign-in.email.email' | translate}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.password.label' | translate}}</mat-label>\n    <input formControlName=\"password\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.password.hasError('required')\"\n               [innerHTML]=\"'sign-up.password.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('fieldsMatches')\">\n      {{'sign-up.password.matches' | translate}}\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('minlength')\">\n      {{'sign-up.password.min-length' | translate:({value: minPasswordLength})}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.confirm-password.label' | translate}}</mat-label>\n    <input formControlName=\"confirmPassword\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.confirmPassword.hasError('required')\"\n               [innerHTML]=\"'sign-up.confirm-password.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('fieldsMatches')\">\n      {{'sign-up.confirm-password.matches' | translate}}\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('minlength')\">\n      {{'sign-up.confirm-password.min-length' | translate:({value: minPasswordLength})}}\n    </mat-error>\n  </mat-form-field>\n\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button\n          type=\"submit\">{{'sign-up.sign-up-btn' | translate}}</button>\n  <a href=\"/signin\" mat-button>{{'sign-up.sign-in-link' | translate}}</a>\n</form>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-cc9e9e325df8ce4e7dc0a24507a0c96c075f3eabdbd092eb15b5ed8ae2b3f715dc4f33501f4742f9b362966b827d4742262c3ae42d5bfb9de4d8acc9f0f5f3f0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgxsReduxDevtoolsPluginModule} from '@ngxs/devtools-plugin';\nimport {environment} from '../environments/environment';\nimport {NgxsRouterPluginModule} from '@ngxs/router-plugin';\nimport {NgxsLoggerPluginModule} from '@ngxs/logger-plugin';\nimport {NgxsModule} from '@ngxs/store';\nimport {AuthState} from './state/auth/auth.state';\nimport {DomainState} from './state/domain/domain.state';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    NgxsModule.forRoot([AuthState, DomainState],\n      {developmentMode: !environment.production}),\n    NgxsRouterPluginModule.forRoot(),\n    NgxsLoggerPluginModule.forRoot({\n      disabled: environment.production,\n    }),\n    TranslateModule.forRoot({\n      defaultLanguage: 'ua',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient],\n      },\n    }),\n\n    NgxsReduxDevtoolsPluginModule.forRoot({\n      disabled: environment.production,\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-0cec5166792527e9d9190d11b0b73152ea0c828e7fab2878644dd08c07075a603ab3e605d67e809e6cb55c6774f48cc95e6c6a3d753d2b48d5d41b210889fc9d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {IsAuthenticatedGuard} from './service/is-authenticated.guard';\nimport {ProfileConfiguredGuard} from './service/profile-configured.guard';\nimport * as fromRoutes from './commons/routes';\nimport {IsNotAuthenticatedGuard} from './service/is-not-authenticated.guard';\n\nconst routes: Routes = [\n  {\n    path: 'dashboard',\n    loadComponent: () => \"import('./pages/dashboard-page/dashboard-page.component').then(mod => mod.DashboardPageComponent)\",\n    canActivate: [IsAuthenticatedGuard, ProfileConfiguredGuard],\n  },\n  {\n    path: 'signin',\n    loadComponent: () => \"import('./pages/sign-in-page/sign-in-page.component').then(mod => mod.SignInPageComponent)\",\n    canActivate: [IsNotAuthenticatedGuard],\n  },\n  {\n    path: 'signup',\n    loadComponent: () => \"import('./pages/sign-up-page/sign-up-page.component').then(mod => mod.SignUpPageComponent)\",\n    canActivate: [IsNotAuthenticatedGuard],\n  },\n  {\n    path: 'complete-profile',\n    loadComponent: () => \"import('./pages/configure-profile/configure-profile.component').then(mod => mod.ConfigureProfileComponent)\",\n    canActivate: [IsAuthenticatedGuard],\n  },\n  {\n    path: '**',\n    redirectTo: `/${'dashboard'}`,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "atStartOfDay",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/functions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DateObjectUnits",
                "defaultValue": "{hour: 0, minute: 0, second: 0, millisecond: 0}"
            },
            {
                "name": "atStartOfWeek",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/functions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DateObjectUnits",
                "defaultValue": "{hour: 0, minute: 0, second: 0, millisecond: 0, weekday: 1}"
            },
            {
                "name": "completeProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'complete-profile'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "dashboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dashboard'"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/gauge/gauge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DOMAIN_STATE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/domain/domain.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'domain'"
            },
            {
                "name": "emptyPfcc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/models/common.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPfcc",
                "defaultValue": "{\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "fieldsMatches",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/pfcc-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(origin: string, ...toCompare: string[]) => {\n  return control => {\n    if (toCompare == null || toCompare.length == 0) {\n      console.warn('Fields to compare is not configured');\n      return null;\n    }\n\n    const originalValue = control.get(origin)?.value;\n    if (originalValue == null) {\n      return null;\n    }\n\n    for (const field of toCompare) {\n      const comparingControl = control.get(field);\n\n      if (comparingControl == null) {\n        throw new Error(`Can't find ${field} in provided form`);\n      }\n\n      const comparingValue = comparingControl.value || null;\n\n      if (comparingValue !== originalValue) {\n        return {\n          fieldsMatches: `Value of ${field} (${comparingValue}) doesn't match ${origin} (${originalValue})`,\n        };\n      }\n    }\n\n    return null;\n  };\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "signIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'signin'"
            },
            {
                "name": "signUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'signup'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/gauge/gauge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n  },\n})"
            }
        ],
        "functions": [
            {
                "name": "ceilPfcc",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afterDotSigns",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "returnType": "IPfcc",
                "jsdoctags": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afterDotSigns",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isDefined",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isOnCurrentWeek",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "DateTime",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "DateTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isToday",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "DateTime",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "DateTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isValueAbsent",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "null | undefined",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "multiplyPfcc",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "multiplier",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IPfcc",
                "jsdoctags": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "multiplier",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sumPfccs",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "pfccs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "pfccs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sumUndefined",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "n1",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "n2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number | undefined",
                "jsdoctags": [
                    {
                        "name": "n1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "n2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DishOptionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dish\" | \"recipe\" | \"raw-food\"",
                "file": "src/app/components/add-meal/add-meal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FoodType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"ingredient\" | \"recipe\"",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IDishOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | ",
                "file": "src/app/components/add-meal/add-meal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IExtendedMeal",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/pages/dashboard-page/dashboard-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "IFood",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | ",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IMeal",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | ",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"en\" | \"ua\"",
                "file": "src/app/commons/models/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/commons/functions.ts": [
                {
                    "name": "atStartOfDay",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/functions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateObjectUnits",
                    "defaultValue": "{hour: 0, minute: 0, second: 0, millisecond: 0}"
                },
                {
                    "name": "atStartOfWeek",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/functions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateObjectUnits",
                    "defaultValue": "{hour: 0, minute: 0, second: 0, millisecond: 0, weekday: 1}"
                }
            ],
            "src/app/commons/routes.ts": [
                {
                    "name": "completeProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'complete-profile'"
                },
                {
                    "name": "dashboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dashboard'"
                },
                {
                    "name": "signIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'signin'"
                },
                {
                    "name": "signUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'signup'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/components/gauge/gauge.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/gauge/gauge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/gauge/gauge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n  },\n})"
                }
            ],
            "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n  },\n})"
                }
            ],
            "src/app/state/domain/domain.state.ts": [
                {
                    "name": "DOMAIN_STATE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/domain/domain.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'domain'"
                }
            ],
            "src/app/commons/models/common.models.ts": [
                {
                    "name": "emptyPfcc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/models/common.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "defaultValue": "{\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "src/app/commons/pfcc-validators.ts": [
                {
                    "name": "fieldsMatches",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/pfcc-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(origin: string, ...toCompare: string[]) => {\n  return control => {\n    if (toCompare == null || toCompare.length == 0) {\n      console.warn('Fields to compare is not configured');\n      return null;\n    }\n\n    const originalValue = control.get(origin)?.value;\n    if (originalValue == null) {\n      return null;\n    }\n\n    for (const field of toCompare) {\n      const comparingControl = control.get(field);\n\n      if (comparingControl == null) {\n        throw new Error(`Can't find ${field} in provided form`);\n      }\n\n      const comparingValue = comparingControl.value || null;\n\n      if (comparingValue !== originalValue) {\n        return {\n          fieldsMatches: `Value of ${field} (${comparingValue}) doesn't match ${origin} (${originalValue})`,\n        };\n      }\n    }\n\n    return null;\n  };\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/commons/functions.ts": [
                {
                    "name": "ceilPfcc",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterDotSigns",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "returnType": "IPfcc",
                    "jsdoctags": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterDotSigns",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDefined",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOnCurrentWeek",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isToday",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValueAbsent",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "null | undefined",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "multiplyPfcc",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "multiplier",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IPfcc",
                    "jsdoctags": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "multiplier",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sumPfccs",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "pfccs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "pfccs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sumUndefined",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "n1",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "n2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | undefined",
                    "jsdoctags": [
                        {
                            "name": "n1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "n2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/add-meal/add-meal.component.ts": [
                {
                    "name": "DishOptionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dish\" | \"recipe\" | \"raw-food\"",
                    "file": "src/app/components/add-meal/add-meal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IDishOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | ",
                    "file": "src/app/components/add-meal/add-meal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/commons/models/domain.models.ts": [
                {
                    "name": "FoodType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"ingredient\" | \"recipe\"",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IFood",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | ",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IMeal",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | ",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/pages/dashboard-page/dashboard-page.component.ts": [
                {
                    "name": "IExtendedMeal",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/pages/dashboard-page/dashboard-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/commons/models/auth.models.ts": [
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"en\" | \"ua\"",
                    "file": "src/app/commons/models/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ceilPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isDefined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isOnCurrentWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isToday",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValueAbsent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "multiplyPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sumPfccs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sumUndefined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "atStartOfDay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "atStartOfWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccount",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignInResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignUpResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnknownBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApiError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseFood",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseMeal",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDish",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfileResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/pfcc-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fieldsMatches",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-meal/add-meal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMealComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-meal/add-meal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddMealDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/add-meal/add-meal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseDishOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge-circle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "GaugeCircleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge-component.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGaugeCircleConf",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge-component.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGaugeTrackConf",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GaugeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGaugeInternalTrackConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nutrition-gauge/nutrition-gauge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NutritionGaugeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nutrition-gauge/nutrition-gauge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/configure-profile/configure-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigureProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dashboard-page/dashboard-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/sign-in-page/sign-in-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/sign-up-page/sign-up-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/service/is-authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "IsAuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/is-not-authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "IsNotAuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/jwt-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/local-store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStoreService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/service/profile-configured.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProfileConfiguredGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthLogOutAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSignInAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSignInFailedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSignInSucceededEvent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSignUpAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSignUpFailedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSignUpSucceededEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfigureProfileAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteDishAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MealRemovedSuccessfullyEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MealRemovingFailedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileConfigurationFailedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileConfiguredSuccessfullyEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileLoadedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemoveMealAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDomainState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DomainState",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/state/domain/domain.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOMAIN_STATE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}