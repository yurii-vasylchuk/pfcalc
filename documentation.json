{
    "pipes": [],
    "interfaces": [
        {
            "name": "IApiError",
            "id": "interface-IApiError-89befc4437dc85009507afa622a3e9819f6bc24051ef711516f545b9d3baeb1c2039570cbe2f50dee04844fb8f194efba7fc44d3076dab01635b37f772a11407",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport type IApiResponse<T> = ({\n  data: T | null;\n  success: boolean;\n  error: string | null;\n});\n\nexport interface IPage<T> {\n  data: T[];\n  page: number;\n  pageSize: number;\n  totalElements: number;\n  totalPages: number;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public get isTrue(): boolean {\n    return this === UnknownBoolean.TRUE;\n  }\n\n  public get isFalse(): boolean {\n    return this === UnknownBoolean.FALSE;\n  }\n\n  static of(value: boolean) {\n    return value ? UnknownBoolean.TRUE : UnknownBoolean.FALSE;\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAuthState",
            "id": "interface-IAuthState-a9f85dbb17d58c0d7ad0261219e6abf54402cbc4c0ccfc37d2a755459d7093f7041f5c39eb44ca51cf829f1e3bf497c82b1942a205703051b6609d26aa2809fd",
            "file": "src/app/features/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IPfcc, UnknownBoolean} from '../../commons/models/common.models';\n\n\nexport namespace Auth {\n  export interface IAuthState {\n    loggedIn: UnknownBoolean,\n    profileConfigured: UnknownBoolean,\n    refreshToken: string | null,\n    afterAuthUrl?: string,\n    refreshInProgress: boolean,\n  }\n\n  export const SIGN_IN = '[AUTH] Sign in';\n  export const LOG_OUT = '[AUTH] Log out';\n  export const SIGN_UP = '[AUTH] Sign up';\n  export const REFRESH_AUTH = '[AUTH] Refresh auth action';\n  export const CONFIGURE_PROFILE = '[AUTH] Configure profile';\n\n  export type SignInPayload = {\n    email: string,\n    password: string\n  };\n\n  export type SignUpPayload = {\n    email: string;\n    name: string;\n    password: string;\n  };\n\n  export type ConfigureProfilePayload = {\n    aims: IPfcc;\n  };\n\n  export class ProfileConfiguredSuccessfullyEvent {\n    static readonly type = '[Auth] Profile configured successfully';\n\n    constructor(readonly aims: IPfcc) {\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "afterAuthUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UnknownBoolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "profileConfigured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UnknownBoolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "refreshInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAuthTokensResponse",
            "id": "interface-IAuthTokensResponse-bb205cb330f3df6fb8e4e6b25976c46a217971c1bb6d07ec3253a691a8ab5f7634d4f22c18cd3d410627debbb2828617149d5d05ca0f1b856112a2f43e6a6dda",
            "file": "src/app/commons/models/auth.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAuthTokensResponse {\n  refreshToken: string;\n}\n\nexport type Language = 'EN' | 'UA';\n",
            "properties": [
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDish",
            "id": "interface-IDish-533b626a73d885dc024442d2bfa088938e4b4e96ba0e603f13a435c8fe9728c5709a1ae458829c42bb30646e80445537266897f05fada1cb99e48b5dcac59bfc",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {Language} from './auth.models';\n\nexport type IIngredient = (IFood & {\n  ingredientWeight: number\n});\n\nexport type IFood ={\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  ingredients: IIngredient[]\n  measurements: IMeasurement[]\n}\n\nexport type FoodType = 'INGREDIENT' | 'RECIPE';\n\nexport function isFoodType(input: string): input is FoodType {\n  return ['RECIPE', 'INGREDIENT'].includes(input);\n}\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  pfcc: IPfcc;\n  name: string;\n  foodId: number;\n  ingredients: IIngredient[];\n  recipeWeight: number;\n  cookedWeight: number;\n  deleted: boolean;\n}\n\nexport interface IMeal {\n  id: number | null;\n  name: string;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n  dishId: number | null;\n}\n\nexport interface IProfile {\n  email: string;\n  name: string;\n  preferredLanguage: Language;\n  aims: IPfcc;\n  profileConfigured: boolean;\n}\n\nexport interface IDishToCreate {\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  ingredients: {\n    id: number;\n    ingredientWeight: number;\n  }[];\n  cookedWeight: number;\n}\n\nexport type IMeasurement = {\n  id: number;\n  foodId: number;\n  name: string;\n  defaultValue: number;\n  toGramMultiplier: number;\n};\n",
            "properties": [
                {
                    "name": "cookedOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "cookedWeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "deleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "foodId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIngredient[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "recipeWeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDishToCreate",
            "id": "interface-IDishToCreate-533b626a73d885dc024442d2bfa088938e4b4e96ba0e603f13a435c8fe9728c5709a1ae458829c42bb30646e80445537266897f05fada1cb99e48b5dcac59bfc",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {Language} from './auth.models';\n\nexport type IIngredient = (IFood & {\n  ingredientWeight: number\n});\n\nexport type IFood ={\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  ingredients: IIngredient[]\n  measurements: IMeasurement[]\n}\n\nexport type FoodType = 'INGREDIENT' | 'RECIPE';\n\nexport function isFoodType(input: string): input is FoodType {\n  return ['RECIPE', 'INGREDIENT'].includes(input);\n}\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  pfcc: IPfcc;\n  name: string;\n  foodId: number;\n  ingredients: IIngredient[];\n  recipeWeight: number;\n  cookedWeight: number;\n  deleted: boolean;\n}\n\nexport interface IMeal {\n  id: number | null;\n  name: string;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n  dishId: number | null;\n}\n\nexport interface IProfile {\n  email: string;\n  name: string;\n  preferredLanguage: Language;\n  aims: IPfcc;\n  profileConfigured: boolean;\n}\n\nexport interface IDishToCreate {\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  ingredients: {\n    id: number;\n    ingredientWeight: number;\n  }[];\n  cookedWeight: number;\n}\n\nexport type IMeasurement = {\n  id: number;\n  foodId: number;\n  name: string;\n  defaultValue: number;\n  toGramMultiplier: number;\n};\n",
            "properties": [
                {
                    "name": "cookedOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "cookedWeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "foodId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFoodsManagementState",
            "id": "interface-IFoodsManagementState-220701520bca79cc647a160d10a5487e657478259b3ea4eaf0a1f17022b69159830922e5f115f865462ec99e158ce18a1cb15148e6d53b6cfacc14555ef6a433",
            "file": "src/app/features/foods-management/foods-management.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IFood} from '../../commons/models/domain.models';\n\n\nexport interface IFoodsManagementState {\n  products: {\n    data: IFood[],\n    page: number,\n    pageSize: number,\n    totalElements: number,\n    totalPages: number,\n\n    name: string,\n  },\n  recipes: {\n    data: IFood[],\n    page: number,\n    pageSize: number,\n    totalElements: number,\n    totalPages: number,\n\n    name: string,\n  },\n}\n\nexport namespace FoodsManagement {\n  export const LOAD_MORE_PRODUCTS = '[FoodsManagement] Load More Products';\n  export const LOAD_MORE_RECIPES = '[FoodsManagement] Load More Recipes';\n  export const LOAD_PRODUCTS = '[FoodsManagement] Load Products';\n  export const LOAD_RECIPES = '[FoodsManagement] Load Recipes';\n  export const CREATE_FOOD = '[FoodsManagement] Create Food';\n  export const EDIT_FOOD = '[FoodsManagement] Edit Food';\n  export const DELETE_FOOD = '[FoodsManagement] Delete Food';\n\n  export interface LoadFoodsActionPayload {\n    page: number,\n    pageSize: number,\n    name: string,\n  }\n\n  export type CreateFoodActionPayload = Omit<IFood, 'id' | 'ownedByUser'>\n\n  export type EditFoodActionPayload = Omit<IFood, 'ownedByUser'>\n\n  export type DeleteFoodActionPayload = number;\n}\n",
            "properties": [
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "recipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IGaugeCircleConf",
            "id": "interface-IGaugeCircleConf-afb8330b32816de28b557e008cc938df83ef4782c6e70bccf5f0c321f3e2e871a1bd188b7ee0d1dc3f416e732525e08211fb084b6180553cbd80e0c4bbbd4350",
            "file": "src/app/components/gauge/gauge-component.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGaugeCircleConf {\n  circleId?: any;\n  value: number;\n  maxValue: number;\n  color: string;\n  blink?: boolean;\n}\n\nexport interface IGaugeTrackConf {\n  trackId?: any;\n  bgStrokeColor: string;\n  strokeWidth: number;\n  circles: IGaugeCircleConf[];\n}\n",
            "properties": [
                {
                    "name": "blink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "circleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "maxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IGaugeInternalTrackConfig",
            "id": "interface-IGaugeInternalTrackConfig-a95921818be76f77da153eaa371d258bae0fb3017eb2971603a51e2ec142c2d7ec7e707c02c6f85b47c0b29ec11f1e39258b61bc74eb39fccd53a0f942c45d1e",
            "file": "src/app/components/gauge/gauge.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {GaugeCircleDirective} from './gauge-circle.directive';\nimport {IGaugeCircleConf, IGaugeTrackConf} from './gauge-component.interfaces';\nimport {CommonModule} from '@angular/common';\n\ninterface IGaugeInternalTrackConfig extends IGaugeTrackConf {\n  radius: number;\n}\n\n@Component({\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'pfc-gauge',\n  templateUrl: './gauge.component.html',\n  styleUrls: ['./gauge.component.scss'],\n  imports: [\n    CommonModule, GaugeCircleDirective,\n  ],\n})\nexport class GaugeComponent implements OnChanges {\n  @Input() animationDuration = 3;\n  @Input() title!: string;\n  @Input() subtitle?: string;\n\n  @Input() titleFontSize = 35;\n  @Input() subtitleFontSize = 20;\n\n  titleX = 50;\n  titleY = 50;\n  subtitleX = 52;\n  subtitleY = 70;\n  width = 100;\n  height = 100;\n  viewBox = '0 0 100 100';\n\n  _tracks: IGaugeInternalTrackConfig[] = [];\n\n  private cumulativeRadius = 40;\n\n  constructor() {\n  }\n\n  @Input()\n  set values(values: IGaugeTrackConf[]) {\n    this.cumulativeRadius = 40;\n    this._tracks = values.map((track, idx) => {\n      this.cumulativeRadius += track.strokeWidth;\n      return {\n        ...track,\n        trackId: track.trackId != null ? track.trackId : idx,\n        radius: this.cumulativeRadius - (track.strokeWidth / 2),\n        circles: track.circles.map((circle, idx) => {\n          return {\n            ...circle,\n            circleId: circle.circleId != null ? circle.circleId : idx,\n          };\n        }),\n      };\n    });\n    for (const track of this._tracks) {\n      track.circles.sort((c1, c2) => c2.value - c1.value);\n    }\n  }\n\n  trackTrackByFn = (idx: number, track: IGaugeTrackConf) => {\n    return track.trackId != null ? track.trackId : idx;\n  };\n\n  circleTrackByFn = (idx: number, circle: IGaugeCircleConf) => {\n    return circle.circleId ? circle.circleId : idx;\n  };\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.width = this.height = this.cumulativeRadius * 2;\n    this.titleX = this.cumulativeRadius;\n    this.titleY = this.subtitle != null ? this.cumulativeRadius : this.cumulativeRadius + (this.titleFontSize * 0.39);\n    this.subtitleX = this.cumulativeRadius;\n    this.subtitleY = this.cumulativeRadius + this.subtitleFontSize;\n    this.viewBox = `0 0 ${this.width} ${this.height}`;\n  }\n}\n",
            "properties": [
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IGaugeTrackConf"
        },
        {
            "name": "IGaugeTrackConf",
            "id": "interface-IGaugeTrackConf-afb8330b32816de28b557e008cc938df83ef4782c6e70bccf5f0c321f3e2e871a1bd188b7ee0d1dc3f416e732525e08211fb084b6180553cbd80e0c4bbbd4350",
            "file": "src/app/components/gauge/gauge-component.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGaugeCircleConf {\n  circleId?: any;\n  value: number;\n  maxValue: number;\n  color: string;\n  blink?: boolean;\n}\n\nexport interface IGaugeTrackConf {\n  trackId?: any;\n  bgStrokeColor: string;\n  strokeWidth: number;\n  circles: IGaugeCircleConf[];\n}\n",
            "properties": [
                {
                    "name": "bgStrokeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "circles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGaugeCircleConf[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "trackId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMeal",
            "id": "interface-IMeal-533b626a73d885dc024442d2bfa088938e4b4e96ba0e603f13a435c8fe9728c5709a1ae458829c42bb30646e80445537266897f05fada1cb99e48b5dcac59bfc",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {Language} from './auth.models';\n\nexport type IIngredient = (IFood & {\n  ingredientWeight: number\n});\n\nexport type IFood ={\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  ingredients: IIngredient[]\n  measurements: IMeasurement[]\n}\n\nexport type FoodType = 'INGREDIENT' | 'RECIPE';\n\nexport function isFoodType(input: string): input is FoodType {\n  return ['RECIPE', 'INGREDIENT'].includes(input);\n}\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  pfcc: IPfcc;\n  name: string;\n  foodId: number;\n  ingredients: IIngredient[];\n  recipeWeight: number;\n  cookedWeight: number;\n  deleted: boolean;\n}\n\nexport interface IMeal {\n  id: number | null;\n  name: string;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n  dishId: number | null;\n}\n\nexport interface IProfile {\n  email: string;\n  name: string;\n  preferredLanguage: Language;\n  aims: IPfcc;\n  profileConfigured: boolean;\n}\n\nexport interface IDishToCreate {\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  ingredients: {\n    id: number;\n    ingredientWeight: number;\n  }[];\n  cookedWeight: number;\n}\n\nexport type IMeasurement = {\n  id: number;\n  foodId: number;\n  name: string;\n  defaultValue: number;\n  toGramMultiplier: number;\n};\n",
            "properties": [
                {
                    "name": "dishId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "eatenOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "foodId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "pfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "INavigationEntry",
            "id": "interface-INavigationEntry-79cbfe63269bbbc0612412c27edcb539801ee617d00664035daf087e727b758882480c5b285b52e16b6ededbe2c85a6f3b4734afe247d5b1e9927f1b8fba398c",
            "file": "src/app/state/navigation.state-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export namespace Navigation {\n  export interface INavigationState {\n    history: INavigationEntry[];\n  }\n\n  export interface INavigationEntry {\n    url: string[];\n    queryParams: { [key: string]: any };\n  }\n\n  export const NAVIGATE_BACK = \"[Navigation] Navigate back\";\n\n  export type NavigateBackPayload = {\n    additionalQueryParams?: { [key: string]: any };\n  }\n}\n",
            "properties": [
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "INavigationState",
            "id": "interface-INavigationState-79cbfe63269bbbc0612412c27edcb539801ee617d00664035daf087e727b758882480c5b285b52e16b6ededbe2c85a6f3b4734afe247d5b1e9927f1b8fba398c",
            "file": "src/app/state/navigation.state-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export namespace Navigation {\n  export interface INavigationState {\n    history: INavigationEntry[];\n  }\n\n  export interface INavigationEntry {\n    url: string[];\n    queryParams: { [key: string]: any };\n  }\n\n  export const NAVIGATE_BACK = \"[Navigation] Navigate back\";\n\n  export type NavigateBackPayload = {\n    additionalQueryParams?: { [key: string]: any };\n  }\n}\n",
            "properties": [
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPage",
            "id": "interface-IPage-89befc4437dc85009507afa622a3e9819f6bc24051ef711516f545b9d3baeb1c2039570cbe2f50dee04844fb8f194efba7fc44d3076dab01635b37f772a11407",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport type IApiResponse<T> = ({\n  data: T | null;\n  success: boolean;\n  error: string | null;\n});\n\nexport interface IPage<T> {\n  data: T[];\n  page: number;\n  pageSize: number;\n  totalElements: number;\n  totalPages: number;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public get isTrue(): boolean {\n    return this === UnknownBoolean.TRUE;\n  }\n\n  public get isFalse(): boolean {\n    return this === UnknownBoolean.FALSE;\n  }\n\n  static of(value: boolean) {\n    return value ? UnknownBoolean.TRUE : UnknownBoolean.FALSE;\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPfcc",
            "id": "interface-IPfcc-89befc4437dc85009507afa622a3e9819f6bc24051ef711516f545b9d3baeb1c2039570cbe2f50dee04844fb8f194efba7fc44d3076dab01635b37f772a11407",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport type IApiResponse<T> = ({\n  data: T | null;\n  success: boolean;\n  error: string | null;\n});\n\nexport interface IPage<T> {\n  data: T[];\n  page: number;\n  pageSize: number;\n  totalElements: number;\n  totalPages: number;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public get isTrue(): boolean {\n    return this === UnknownBoolean.TRUE;\n  }\n\n  public get isFalse(): boolean {\n    return this === UnknownBoolean.FALSE;\n  }\n\n  static of(value: boolean) {\n    return value ? UnknownBoolean.TRUE : UnknownBoolean.FALSE;\n  }\n}\n",
            "properties": [
                {
                    "name": "calories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "carbohydrates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "protein",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProfile",
            "id": "interface-IProfile-533b626a73d885dc024442d2bfa088938e4b4e96ba0e603f13a435c8fe9728c5709a1ae458829c42bb30646e80445537266897f05fada1cb99e48b5dcac59bfc",
            "file": "src/app/commons/models/domain.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DateTime} from 'luxon';\nimport {IPfcc} from './common.models';\nimport {Language} from './auth.models';\n\nexport type IIngredient = (IFood & {\n  ingredientWeight: number\n});\n\nexport type IFood ={\n  id: number;\n  name: string;\n  description?: string;\n  pfcc: IPfcc;\n  hidden: boolean;\n  ownedByUser: boolean;\n  type: FoodType;\n  ingredients: IIngredient[]\n  measurements: IMeasurement[]\n}\n\nexport type FoodType = 'INGREDIENT' | 'RECIPE';\n\nexport function isFoodType(input: string): input is FoodType {\n  return ['RECIPE', 'INGREDIENT'].includes(input);\n}\n\nexport interface IDish {\n  id: number;\n  cookedOn: DateTime;\n  pfcc: IPfcc;\n  name: string;\n  foodId: number;\n  ingredients: IIngredient[];\n  recipeWeight: number;\n  cookedWeight: number;\n  deleted: boolean;\n}\n\nexport interface IMeal {\n  id: number | null;\n  name: string;\n  eatenOn: DateTime;\n  weight: number;\n  pfcc: IPfcc;\n  foodId: number;\n  dishId: number | null;\n}\n\nexport interface IProfile {\n  email: string;\n  name: string;\n  preferredLanguage: Language;\n  aims: IPfcc;\n  profileConfigured: boolean;\n}\n\nexport interface IDishToCreate {\n  cookedOn: DateTime;\n  name: string;\n  foodId: number;\n  ingredients: {\n    id: number;\n    ingredientWeight: number;\n  }[];\n  cookedWeight: number;\n}\n\nexport type IMeasurement = {\n  id: number;\n  foodId: number;\n  name: string;\n  defaultValue: number;\n  toGramMultiplier: number;\n};\n",
            "properties": [
                {
                    "name": "aims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "preferredLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "profileConfigured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUiStateModel",
            "id": "interface-IUiStateModel-b921cf9d9dd4ed862f2f9d6c36160402b08a808714bf81ec9881a048e5cdfbc304c09e4e0b4758b6893cb2b8b2782f271f9d716ddd94be38350bfabe6c0aa70e",
            "file": "src/app/state/ui/ui.state-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export namespace Ui {\n  export interface IUiStateModel {\n    sideMenuOpened: boolean;\n    showHeader: boolean;\n  }\n\n  export const TOGGLE_SIDE_MENU = '[UI] Toggle side menu';\n}\n",
            "properties": [
                {
                    "name": "showHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sideMenuOpened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoadFoodsActionPayload",
            "id": "interface-LoadFoodsActionPayload-220701520bca79cc647a160d10a5487e657478259b3ea4eaf0a1f17022b69159830922e5f115f865462ec99e158ce18a1cb15148e6d53b6cfacc14555ef6a433",
            "file": "src/app/features/foods-management/foods-management.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IFood} from '../../commons/models/domain.models';\n\n\nexport interface IFoodsManagementState {\n  products: {\n    data: IFood[],\n    page: number,\n    pageSize: number,\n    totalElements: number,\n    totalPages: number,\n\n    name: string,\n  },\n  recipes: {\n    data: IFood[],\n    page: number,\n    pageSize: number,\n    totalElements: number,\n    totalPages: number,\n\n    name: string,\n  },\n}\n\nexport namespace FoodsManagement {\n  export const LOAD_MORE_PRODUCTS = '[FoodsManagement] Load More Products';\n  export const LOAD_MORE_RECIPES = '[FoodsManagement] Load More Recipes';\n  export const LOAD_PRODUCTS = '[FoodsManagement] Load Products';\n  export const LOAD_RECIPES = '[FoodsManagement] Load Recipes';\n  export const CREATE_FOOD = '[FoodsManagement] Create Food';\n  export const EDIT_FOOD = '[FoodsManagement] Edit Food';\n  export const DELETE_FOOD = '[FoodsManagement] Delete Food';\n\n  export interface LoadFoodsActionPayload {\n    page: number,\n    pageSize: number,\n    name: string,\n  }\n\n  export type CreateFoodActionPayload = Omit<IFood, 'id' | 'ownedByUser'>\n\n  export type EditFoodActionPayload = Omit<IFood, 'ownedByUser'>\n\n  export type DeleteFoodActionPayload = number;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AddDishState",
            "id": "injectable-AddDishState-b3bf703b4561332191e0ddeccfd24bc5f282e68a9622b5d318b1d6cfbb4aef685afddb86e346f76d818724fd98d49ffafee66287562cc221913fc56128ffbead",
            "file": "src/app/features/add-dish/add-dish.state.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "defaultOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addIngredient",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction<AddDish.AddIngredientPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction<AddDish.AddIngredientPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddDish.DeleteIngredientPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddDish.DeleteIngredientPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNavigation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: RouterNavigated}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialization",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddDish.IAddDishState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDish",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddDish.IAddDishState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadDish",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddDish.LoadDishPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddDish.LoadDishPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadRecipe",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddDish.LoadRecipePayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddDish.LoadRecipePayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "options",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddDish.IAddDishState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddDish.IAddDishState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveDish",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddDish.SaveDishPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddDish.SaveDishPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchIngredientOptions",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddDish.SearchIngredientOptionsPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddDish.IAddDishState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddDish.SearchIngredientOptionsPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Selector, State, StateContext} from '@ngxs/store';\nimport {AddDish} from './add-dish.state-models';\nimport {Injectable} from '@angular/core';\nimport {ApiService} from '../../service/api.service';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {RouterNavigated} from '@ngxs/router-plugin';\nimport {EMPTY, map, of, tap} from 'rxjs';\nimport * as fromRoutes from '../../commons/routes';\nimport {IDish, IFood} from '../../commons/models/domain.models';\nimport {Navigation} from '../../state/navigation.state-model';\nimport {DateTime} from 'luxon';\n\n\n@State<AddDish.IAddDishState>({\n  name: 'addDish',\n  defaults: {\n    recipeId: null,\n    dishId: null,\n    ingredientOptions: [],\n    initialization: null,\n  },\n})\n@Injectable()\nexport class AddDishState {\n  private static api: ApiService;\n  private static defaultOptions: IFood[] = [];\n\n  @Selector()\n  static options(state: AddDish.IAddDishState): IFood[][] {\n    return state.ingredientOptions;\n  }\n\n  @Selector()\n  static initialization(state: AddDish.IAddDishState): IDish {\n    return state.initialization;\n  }\n\n  constructor(private api: ApiService) {\n    AddDishState.api = api;\n\n    api.loadFoodsList(0, AddDish.OPTIONS_PAGE_SIZE)\n      .pipe(\n        map(page => page.data),\n      )\n      .subscribe(foods => AddDishState.defaultOptions = foods);\n  }\n\n  @Receiver({action: RouterNavigated})\n  static handleNavigation(ctx: StateContext<AddDish.IAddDishState>, action: RouterNavigated) {\n    ctx.patchState({\n      initialization: null,\n      ingredientOptions: [],\n      dishId: null,\n      recipeId: null,\n    });\n\n    if (!action.routerState.url.match(`/${fromRoutes.addDish}.*`)) {\n      return EMPTY;\n    }\n\n    const recipeIdParam = action.routerState.root.queryParams?.['recipeId'];\n    const dishIdParam = action.routerState.root.queryParams?.['dishId'];\n    if (recipeIdParam == null && dishIdParam == null) {\n      console.error(`One of query parameters 'recipeId' or 'dishId' is required`);\n      return of(new EmitterAction(null, Navigation.NAVIGATE_BACK));\n    }\n\n    if (recipeIdParam != null) {\n      const recipeId = parseInt(recipeIdParam);\n      if (isNaN(recipeId)) {\n        console.error(`Parameter 'recipeId' should number`);\n        return of(new EmitterAction(null, Navigation.NAVIGATE_BACK));\n      }\n\n      return ctx.dispatch(new EmitterAction(recipeId, AddDish.LOAD_RECIPE));\n    }\n\n    if (dishIdParam != null) {\n      const dishId = parseInt(dishIdParam);\n      if (isNaN(dishId)) {\n        console.error(`Parameter 'dishId' should number`);\n        return of(new EmitterAction(null, Navigation.NAVIGATE_BACK));\n      }\n\n      return ctx.dispatch(new EmitterAction(dishId, AddDish.LOAD_DISH));\n    }\n\n    throw new Error('Shouldn\\' happen');\n  }\n\n  @Receiver({type: AddDish.LOAD_RECIPE})\n  static loadRecipe(ctx: StateContext<AddDish.IAddDishState>, {payload}: EmitterAction<AddDish.LoadRecipePayload>) {\n    return this.api.loadFood(payload)\n      .pipe(\n        tap(recipe => {\n          const now = DateTime.now();\n          const recipeWeight = recipe.ingredients.map(i => i.ingredientWeight).reduce((a, b) => a + b, 0);\n          ctx.patchState({\n            recipeId: recipe.id,\n            dishId: null,\n            initialization: {\n              id: null,\n              foodId: recipe.id,\n              name: `${recipe.name} ${now.toFormat(\"LLL dd\")}`,\n              recipeWeight: recipeWeight,\n              cookedWeight: recipeWeight,\n              pfcc: {...recipe.pfcc},\n              cookedOn: now,\n              deleted: false,\n              ingredients: [...recipe.ingredients],\n            },\n            ingredientOptions: recipe.ingredients.map(_ => ([...this.defaultOptions])),\n          });\n        }),\n      );\n  }\n\n  @Receiver({type: AddDish.LOAD_DISH})\n  static loadDish(ctx: StateContext<AddDish.IAddDishState>, {payload}: EmitterAction<AddDish.LoadDishPayload>) {\n    return this.api.loadDish(payload)\n      .pipe(\n        tap(dish => ctx.patchState({\n          recipeId: dish.foodId,\n          dishId: dish.id,\n          initialization: dish,\n          ingredientOptions: dish.ingredients.map(_ => ([...this.defaultOptions])),\n        })),\n      );\n  }\n\n  @Receiver({type: AddDish.ADD_INGREDIENT})\n  static addIngredient(ctx: StateContext<AddDish.IAddDishState>, _: EmitterAction<AddDish.AddIngredientPayload>) {\n    const options = ctx.getState().ingredientOptions;\n\n    ctx.patchState({\n      ingredientOptions: [...options, [...this.defaultOptions]],\n    });\n  }\n\n  @Receiver({type: AddDish.DELETE_INGREDIENT})\n  static deleteIngredient(ctx: StateContext<AddDish.IAddDishState>, {payload}: EmitterAction<AddDish.DeleteIngredientPayload>) {\n    const newOptions = ctx.getState().ingredientOptions.filter(((_, idx) => idx !== payload));\n\n    ctx.patchState({\n      ingredientOptions: newOptions,\n    });\n  }\n\n  @Receiver({type: AddDish.SEARCH_INGREDIENT_OPTIONS})\n  static searchIngredientOptions(ctx: StateContext<AddDish.IAddDishState>, {payload}: EmitterAction<AddDish.SearchIngredientOptionsPayload>) {\n    const {filter, index, id} = payload;\n    const state = ctx.getState();\n    return this.api.loadFoodsList(0, AddDish.OPTIONS_PAGE_SIZE, filter)\n      .pipe(\n        tap(page => ctx.patchState({\n          ingredientOptions: [\n            ...state.ingredientOptions.slice(0, index),\n            page.data.filter(f => f.id !== id),\n            ...state.ingredientOptions.slice(index + 1, state.ingredientOptions.length),\n          ],\n        })),\n      );\n  }\n\n  @Receiver({type: AddDish.SAVE_DISH})\n  static saveDish(ctx: StateContext<AddDish.IAddDishState>, {payload}: EmitterAction<AddDish.SaveDishPayload>) {\n    const state = ctx.getState();\n\n    return (state.dishId == null ?\n            this.api.addDish(payload) :\n            this.api.updateDish(state.dishId, payload)).pipe(\n      map(dish => {\n        return new EmitterAction<Navigation.NavigateBackPayload>({additionalQueryParams: {dishId: dish.id}}, Navigation.NAVIGATE_BACK);\n      }),\n      map(ctx.dispatch),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AddFoodState",
            "id": "injectable-AddFoodState-42f2389941a4c14c77e8211899d35eab5df07ef9d73b3246f6e5bc17a699db6fa72bc0bf4c67983940fe1970aa08dc80fc4d33d2a13e43657139eb0c2f75600f",
            "file": "src/app/features/add-food/add-food.state.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "INGREDIENT_OPTIONS_PAGE_SIZE",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ingredients",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddFood.IAddFoodState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddFood.IAddFoodState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializationVector",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddFood.IAddFoodState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<IFood>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddFood.IAddFoodState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngxsOnInit",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNavigate",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: RouterNavigated}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadIngredientOptions",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddFood.ReloadIngredientOptionsPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddFood.ReloadIngredientOptionsPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFood",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddFood.SaveFoodPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddFood.IAddFoodState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddFood.SaveFoodPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveMeasurements",
                    "args": [
                        {
                            "name": "food",
                            "type": "IFood",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "measurements",
                            "type": "IMeasurement[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFood>",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "food",
                            "type": "IFood",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "measurements",
                            "type": "IMeasurement[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {NgxsOnInit, Selector, State, StateContext} from '@ngxs/store';\nimport {AddFood} from './add-food.state-models';\nimport {ApiService} from '../../service/api.service';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {RouterNavigated} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../../commons/routes';\nimport {FoodType, IFood, IMeasurement, isFoodType} from '../../commons/models/domain.models';\nimport {combineLatest, EMPTY, map, Observable, of, switchMap, tap} from 'rxjs';\nimport {Navigation} from '../../state/navigation.state-model';\n\n@State<AddFood.IAddFoodState>({\n  name: 'addFood',\n  defaults: {\n    formInitialization: null,\n    defaultIngredientOptions: [],\n    ingredientOptions: [],\n  },\n})\n@Injectable()\nexport class AddFoodState implements NgxsOnInit {\n  private static readonly INGREDIENT_OPTIONS_PAGE_SIZE = 10;\n  private static api: ApiService;\n\n  @Selector()\n  static initializationVector(state: AddFood.IAddFoodState): Partial<IFood> {\n    return state.formInitialization;\n  }\n\n  @Selector()\n  static ingredients(state: AddFood.IAddFoodState): IFood[][] {\n    return state.ingredientOptions.map(opt => opt.ingredients);\n  }\n\n\n  constructor(private api: ApiService) {\n    AddFoodState.api = api;\n  }\n\n  ngxsOnInit(ctx: StateContext<AddFood.IAddFoodState>): void {\n    this.api.loadFoodsList(0, AddFoodState.INGREDIENT_OPTIONS_PAGE_SIZE)\n      .pipe(\n        map(rsp => rsp.data),\n      )\n      .subscribe(opts => ctx.patchState({defaultIngredientOptions: opts}));\n  }\n\n  @Receiver({action: RouterNavigated})\n  static onNavigate(ctx: StateContext<AddFood.IAddFoodState>, action: RouterNavigated): Observable<void> {\n    ctx.patchState({\n      ingredientOptions: [],\n      formInitialization: null,\n    });\n    if (!action.routerState.url.match(`/${fromRoutes.addFood}.*`)) {\n      return EMPTY;\n    }\n\n    const {id, type, name} = action.routerState.root.queryParams;\n\n    if (id != null) {\n      return this.api.loadFood(Number.parseInt(id))\n        .pipe(\n          tap(food => ctx.patchState({\n            formInitialization: food,\n          })),\n          switchMap(food => {\n            const sources: Observable<IFood[]>[] = (food.ingredients ?? [])\n              .map(ingredient => this.api.loadFoodsList(0, 10)\n                .pipe(map(page => [ingredient, ...page.data])));\n            return combineLatest(sources);\n          }),\n          tap(ingredients => ctx.patchState({\n            ingredientOptions: ingredients.map(opts => ({\n              ingredients: opts,\n              ingredientSearch: null,\n            })),\n          })),\n          map(_ => null),\n        );\n    } else {\n      let foodType: FoodType = null;\n\n      if (isFoodType(type)) {\n        foodType = type;\n      } else if (type != null) {\n        console.error(`'${type}' can't be casted to FootType`);\n      }\n\n      ctx.patchState({\n        formInitialization: {\n          name: name,\n          type: foodType,\n        },\n      });\n    }\n\n    return EMPTY;\n  }\n\n  @Receiver({type: AddFood.RELOAD_INGREDIENT_OPTIONS_ACTION})\n  static reloadIngredientOptions(ctx: StateContext<AddFood.IAddFoodState>, {payload}: EmitterAction<AddFood.ReloadIngredientOptionsPayload>): void {\n    //TODO: Optimize\n    const {defaultIngredientOptions} = ctx.getState();\n    let options$: Observable<IFood[]>[] = [];\n\n    payload.forEach(optionsReq => {\n      if (optionsReq.searchString == null || optionsReq.searchString.trim().length == 0) {\n        options$.push(of([\n          optionsReq.selectedIngredient,\n          ...defaultIngredientOptions.filter(dio => dio.id !== optionsReq?.selectedIngredient?.id),\n        ].filter(opt => opt != null)));\n        return;\n      }\n\n      options$.push(\n        this.api.loadFoodsList(0, AddFoodState.INGREDIENT_OPTIONS_PAGE_SIZE, optionsReq.searchString.trim())\n          .pipe(map(rsp => [\n            optionsReq.selectedIngredient,\n            ...rsp.data.filter(rspOpt => rspOpt.id !== optionsReq.selectedIngredient?.id),\n          ].filter(opt => opt != null))),\n      );\n    });\n\n    combineLatest(options$).subscribe(options => ctx.patchState({\n      ingredientOptions: options.map((options, idx) => ({\n        ingredientSearch: ctx.getState().ingredientOptions[idx]?.ingredientSearch,\n        ingredients: options,\n      })),\n    }));\n  }\n\n  @Receiver({type: AddFood.SAVE_FOOD_ACTION})\n  static saveFood(ctx: StateContext<AddFood.IAddFoodState>, {payload}: EmitterAction<AddFood.SaveFoodPayload>): Observable<void> {\n    if (payload.id != null) {\n      return this.api.updateFood(payload).pipe(\n        switchMap(savedFood => this.saveMeasurements(savedFood, payload.measurements)),\n        map(food => new EmitterAction({additionalQueryParams: {selectedFoodId: food.id}} as Navigation.NavigateBackPayload, Navigation.NAVIGATE_BACK)),\n        switchMap(ctx.dispatch),\n      );\n    } else {\n      return this.api.addFood(payload).pipe(\n        switchMap(savedFood => this.saveMeasurements(savedFood, payload.measurements)),\n        map(food => new EmitterAction({additionalQueryParams: {selectedFoodId: food.id}} as Navigation.NavigateBackPayload, Navigation.NAVIGATE_BACK)),\n        switchMap(ctx.dispatch),\n      );\n    }\n  }\n\n  private static saveMeasurements(food: IFood, measurements: IMeasurement[]): Observable<IFood> {\n    return combineLatest(\n      measurements\n        .map(m => ({...m, foodId: food.id}))\n        .map(m => m.id != null ? this.api.updateMeasurement(m) : this.api.createMeasurement(m))\n    ).pipe(map(_ => (food)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AddMealState",
            "id": "injectable-AddMealState-38fbbe141d4197049252475f977ed932a1988c4c5aebcb35a086d70f60504dd5281841cf4d085cfe95001bbef1f6ebe5e901ac91c3a76e3478dcfae9dfe28633",
            "file": "src/app/features/add-meal/add-meal.state.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDish",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddMeal.DeleteDishPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddMeal.DeleteDishPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMealOptions",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<AddMeal.LoadMealOptionsPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined, cancelUncompleted: true}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<AddMeal.LoadMealOptionsPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMoreMealOptions",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moreDataAvailable",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddMeal.IAddMealState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddMeal.IAddMealState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nutrients",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddMeal.IAddMealState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddMeal.IAddMealState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNavigate",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: RouterNavigated}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<AddMeal.IAddMealState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "options",
                    "args": [
                        {
                            "name": "state",
                            "type": "AddMeal.IAddMealState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AddMeal.IMealOption[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AddMeal.IAddMealState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Selector, State, StateContext} from '@ngxs/store';\nimport {AddMeal} from './add-meal.state-models';\nimport {ApiService} from '../../service/api.service';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {RouterNavigated} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../../commons/routes';\nimport {Injectable} from '@angular/core';\nimport {DateTime} from 'luxon';\nimport {catchError, combineLatest, EMPTY, map, Observable, switchMap, tap} from 'rxjs';\nimport {loadAllPages, sumPfccs} from '../../commons/functions';\nimport {emptyPfcc, IPage, IPfcc} from '../../commons/models/common.models';\nimport IMealOption = AddMeal.IMealOption;\n\n\n@State<AddMeal.IAddMealState>({\n  name: 'addMeal',\n  defaults: {\n    filter: null,\n    date: null,\n    nutrients: emptyPfcc,\n    options: [],\n    optionsPage: 0,\n    optionsPageSize: 15,\n    optionsTotalPages: null,\n  },\n})\n@Injectable({providedIn: 'root'})\nexport class AddMealState {\n  private static api: ApiService;\n\n  @Selector()\n  static options(state: AddMeal.IAddMealState): AddMeal.IMealOption[] {\n    return state.options;\n  }\n\n  @Selector()\n  static moreDataAvailable(state: AddMeal.IAddMealState): boolean {\n    return state.optionsPage < (state.optionsTotalPages - 1);\n  }\n\n  @Selector()\n  static nutrients(state: AddMeal.IAddMealState): IPfcc {\n    return state.nutrients;\n  }\n\n  constructor(api: ApiService) {\n    AddMealState.api = api;\n  }\n\n  @Receiver({action: RouterNavigated})\n  static onNavigate(ctx: StateContext<AddMeal.IAddMealState>, action: RouterNavigated) {\n    if (!action.routerState.url.match(`/${fromRoutes.addMeal}.*`)) {\n      return EMPTY;\n    }\n\n    const dateStr = action.routerState.root.queryParams?.['date'];\n    const date = dateStr ? DateTime.fromISO(dateStr) : DateTime.now();\n    ctx.patchState({\n      filter: null,\n      date: date,\n    });\n\n\n    return loadAllPages((page, pageSize) => this.api.loadMeals(page, pageSize, date.startOf('day'), date.endOf('day')), 10)\n      .pipe(\n        map(meals => sumPfccs(emptyPfcc, ...meals.map(m => m.pfcc))),\n        tap(nutrients => ctx.patchState({nutrients})),\n      );\n  }\n\n  @Receiver({type: AddMeal.LOAD_MEAL_OPTIONS, cancelUncompleted: true})\n  static loadMealOptions(ctx: StateContext<AddMeal.IAddMealState>, {payload}: EmitterAction<AddMeal.LoadMealOptionsPayload>) {\n    const filter = payload.filter;\n    const page = payload.page;\n    const pageSize = payload.pageSize;\n\n    return AddMealState.api.getMealOptions(filter, page, pageSize)\n      .pipe(\n        tap((res) => {\n          ctx.patchState({\n            options: res.data,\n            optionsPage: res.page,\n            optionsPageSize: res.pageSize,\n            optionsTotalPages: res.totalPages,\n          });\n        }),\n        catchError(err => {\n          console.warn('Error while loading meal options: ', err);\n\n          //TODO: show error message\n\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: AddMeal.LOAD_MORE_MEAL_OPTIONS})\n  static loadMoreMealOptions(ctx: StateContext<AddMeal.IAddMealState>, _: EmitterAction) {\n    const state = ctx.getState();\n\n    let page = state.optionsPage + 1;\n    let pageSize = state.optionsPageSize;\n\n    if (page >= state.optionsTotalPages) {\n      console.error('Can\\'t load more meal options: all data is loaded');\n    }\n\n    return this.api.getMealOptions(state.filter, page, pageSize)\n      .pipe(\n        tap(rsp => {\n          ctx.patchState({\n            options: [\n              ...state.options,\n              ...rsp.data,\n            ],\n            optionsPage: page,\n            optionsTotalPages: rsp.totalPages,\n          });\n        }),\n        catchError(err => {\n          console.warn('Error while loading meal options: ', err);\n          //TODO: show error message\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: AddMeal.DELETE_DISH})\n  static deleteDish(ctx: StateContext<AddMeal.IAddMealState>, {payload}: EmitterAction<AddMeal.DeleteDishPayload>) {\n    return this.api.deleteDish(payload)\n      .pipe(\n        switchMap(_ => {\n          let loaders: Observable<IPage<IMealOption>>[] = [];\n\n          const state = ctx.getState();\n          for (let i = 0; i <= state.optionsPage; i++) {\n            loaders.push(this.api.getMealOptions(state.filter, i, state.optionsPageSize));\n          }\n\n          return combineLatest(loaders);\n        }),\n        tap(pages => {\n          ctx.patchState({\n            options: pages.map(p => p.data).reduce((data1, data2) => [...data1, ...data2], []),\n            optionsTotalPages: pages[pages.length - 1].totalPages,\n          });\n        }),\n        catchError(err => {\n          console.warn('Error while deleting dish: ', err);\n          //TODO: show error message\n          return EMPTY;\n        }),\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApiService",
            "id": "injectable-ApiService-914a98dae478f3168d3b2b80a40c69bd97b1c8cdcafd848b818b181d999c7af913df1b16fed2d1fa8ee3e99051dc25914484e19f9fb155b60b4db0ed0b6c3ef7",
            "file": "src/app/service/api.service.ts",
            "properties": [
                {
                    "name": "extractVoidResponse",
                    "defaultValue": "map((rsp: IApiResponse<void>) => {\n    this.extractResponseData(rsp);\n    return null;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 248,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addDish",
                    "args": [
                        {
                            "name": "dish",
                            "type": "IDishToCreate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDish>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dish",
                            "type": "IDishToCreate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addFood",
                    "args": [
                        {
                            "name": "food",
                            "type": "Omit<IFood | id>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFood>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "food",
                            "type": "Omit<IFood | id>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMeal",
                    "args": [
                        {
                            "name": "meal",
                            "type": "Omit<IMeal | id>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMeal>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "meal",
                            "type": "Omit<IMeal | id>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "configureProfile",
                    "args": [
                        {
                            "name": "aims",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "aims",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMeasurement",
                    "args": [
                        {
                            "name": "measurement",
                            "type": "IMeasurement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMeasurement>",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "measurement",
                            "type": "IMeasurement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDish",
                    "args": [
                        {
                            "name": "dishId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dishId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFood",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractResponseData",
                    "args": [
                        {
                            "name": "rsp",
                            "type": "IApiResponse<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "rsp",
                            "type": "IApiResponse<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMealOptions",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPage<IMealOption>>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProfile>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadDish",
                    "args": [
                        {
                            "name": "dishId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDish>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dishId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFood",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFood>",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFoodsList",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "type": "FoodType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPage<IFood>>",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "FoodType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMeals",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "from",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPage<IMeal>>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMeasurements",
                    "args": [
                        {
                            "name": "foodId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMeasurement[]>",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "foodId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAuth",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAuthTokensResponse>",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMeal",
                    "args": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAuthTokensResponse>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "language",
                            "type": "Language",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAuthTokensResponse>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "type": "Language",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDish",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dish",
                            "type": "IDishToCreate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDish>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dish",
                            "type": "IDishToCreate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFood",
                    "args": [
                        {
                            "name": "food",
                            "type": "Omit<IFood | ownedByUser>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFood>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "food",
                            "type": "Omit<IFood | ownedByUser>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMeasurement",
                    "args": [
                        {
                            "name": "measurement",
                            "type": "IMeasurement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMeasurement>",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "measurement",
                            "type": "IMeasurement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {combineLatest, combineLatestWith, map, Observable, of, switchMap, tap, throwError} from 'rxjs';\nimport {IAuthTokensResponse, Language} from '../commons/models/auth.models';\nimport {FoodType, IDish, IDishToCreate, IFood, IMeal, IMeasurement, IProfile} from '../commons/models/domain.models';\nimport {IApiResponse, IPage, IPfcc} from '../commons/models/common.models';\nimport {DateTime} from 'luxon';\nimport {AddMeal} from '../features/add-meal/add-meal.state-models';\nimport IMealOption = AddMeal.IMealOption;\n\n@Injectable({providedIn: 'root'})\nexport class ApiService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  signIn(email: string, password: string): Observable<IAuthTokensResponse> {\n    return this.http.post<IApiResponse<IAuthTokensResponse>>('/api/user/login',\n      {\n        email,\n        password,\n      }).pipe(map(this.extractResponseData));\n  }\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IApiResponse<IProfile>>('/api/user/profile')\n      .pipe(\n        map(this.extractResponseData),\n      );\n  }\n\n  signUp(email: string, name: string, password: string, language: Language): Observable<IAuthTokensResponse> {\n    return this.http.post<IApiResponse<IAuthTokensResponse>>('/api/user/register', {\n      email,\n      name,\n      password,\n      preferredLanguage: language,\n    }).pipe(map(this.extractResponseData));\n  }\n\n  configureProfile(aims: IPfcc): Observable<null> {\n    return this.http.post<IApiResponse<void>>('/api/user/profile', {\n      aims,\n    }).pipe(this.extractVoidResponse);\n  }\n\n  removeMeal(mealId: number): Observable<null> {\n    if (mealId == null) {\n      return throwError(() => new Error('mealId is required'));\n    }\n\n    return this.http.delete<IApiResponse<void>>(`/api/meal/${mealId}`)\n      .pipe(this.extractVoidResponse);\n  }\n\n  addMeal(meal: Omit<IMeal, 'id'>): Observable<IMeal> {\n    return this.http.post<IApiResponse<IMeal>>('/api/meal', {\n      ...meal,\n      eatenOn: meal.eatenOn.toISO({includeOffset: false}),\n    }).pipe(\n      map(this.extractResponseData),\n      tap(meal => {\n        meal.eatenOn = DateTime.fromISO(meal.eatenOn as unknown as string);\n      }),\n    );\n  }\n\n  loadMeals(page: number, pageSize: number, from: DateTime, to: DateTime): Observable<IPage<IMeal>> {\n    let params: any = {\n      page, pageSize,\n    };\n\n    if (from != null) {\n      params['from'] = from.toISO({includeOffset: false});\n    }\n\n    if (to != null) {\n      params['to'] = to.toISO({includeOffset: false});\n    }\n\n    return this.http.get<IApiResponse<IPage<IMeal>>>('/api/meal', {\n      params,\n    }).pipe(\n      map(this.extractResponseData),\n      tap(page => {\n        page.data.forEach(meal => meal.eatenOn = DateTime.fromISO(meal.eatenOn as unknown as string));\n      }),\n    );\n  }\n\n  addDish(dish: IDishToCreate): Observable<IDish> {\n    return this.http.post<IApiResponse<IDish>>('/api/dish', {\n      ...dish,\n      cookedOn: dish.cookedOn.toISO({includeOffset: false}),\n    })\n      .pipe(map(this.extractResponseData));\n  }\n\n  updateDish(id: number, dish: IDishToCreate): Observable<IDish> {\n    return this.http.put<IApiResponse<IDish>>(`/api/dish/${id}`, {\n      ...dish,\n      cookedOn: dish.cookedOn.toISO({includeOffset: false}),\n    }).pipe(map(this.extractResponseData));\n  }\n\n  deleteDish(dishId: number): Observable<null> {\n    if (dishId == null) {\n      throwError(() => new Error('Dish id is required'));\n    }\n\n    return this.http.delete<IApiResponse<void>>(`/api/dish/${dishId}`)\n      .pipe(this.extractVoidResponse);\n  }\n\n  addFood(food: Omit<IFood, \"id\">): Observable<IFood> {\n    return this.http.post<IApiResponse<IFood>>('/api/food', food)\n      .pipe(map(this.extractResponseData));\n  }\n\n  updateFood(food: Omit<IFood, 'ownedByUser'>): Observable<IFood> {\n    return this.http.post<IApiResponse<IFood>>('/api/food', food)\n      .pipe(map(this.extractResponseData));\n  }\n\n  deleteFood(id: number): Observable<void> {\n    return this.http.delete<IApiResponse<void>>(`/api/food/${id}`)\n      .pipe(this.extractVoidResponse);\n  }\n\n  loadDish(dishId: number): Observable<IDish> {\n    return this.http.get<IApiResponse<IDish>>(`/api/dish/${dishId}`)\n      .pipe(\n        map(this.extractResponseData),\n      );\n  }\n\n  loadFoodsList(page: number, pageSize: number, name?: string, type?: FoodType): Observable<IPage<IFood>> {\n    let params: any = {\n      page,\n      pageSize,\n    };\n\n    if (name != null && name.trim() !== '') {\n      params['name'] = name.trim();\n    }\n\n    if (type != null) {\n      params['type'] = type;\n    }\n\n    return this.http.get<IApiResponse<IPage<IFood>>>(`/api/food`,\n      {\n        params: params,\n      })\n      .pipe(\n        map(this.extractResponseData),\n        tap(page => page.data.forEach(f => f.measurements = (f.measurements ?? []))),\n        switchMap(page => {\n          return combineLatest(page.data.map(food => this.loadMeasurements(food.id))).pipe(\n            map(measurements => {\n              measurements.flatMap(m => m).forEach(m => {\n                const food = page.data.find(f => f.id === m.foodId);\n                if (food == null) {\n                  console.warn(`Can't find appropriate food (#${m.foodId}) for measurement #${m.id} - ${m.name}`);\n                  return;\n                }\n                food.measurements.push(m);\n              });\n\n              return page;\n            }),\n          );\n        }),\n      );\n\n  }\n\n  loadFood(id: number): Observable<IFood> {\n    return this.http.get<IApiResponse<IFood>>(`/api/food/${id}`)\n      .pipe(\n        map(this.extractResponseData),\n        combineLatestWith(this.loadMeasurements(id)),\n        map(([food, measurements]) => {\n          food.measurements = measurements;\n          return food;\n        }),\n      );\n  }\n\n  refreshAuth(refreshToken: string): Observable<IAuthTokensResponse> {\n    return this.http.post<IApiResponse<IAuthTokensResponse>>('/api/user/refresh-auth-token', {\n      refreshToken,\n    }).pipe(map(this.extractResponseData));\n  }\n\n  getMealOptions(filter: string, page: number, pageSize: number): Observable<IPage<IMealOption>> {\n    const params: any = {\n      page,\n      pageSize,\n    };\n\n    if (filter != null && filter.trim() !== '') {\n      params['filter'] = filter.trim();\n    }\n\n    return this.http.get<IApiResponse<IPage<IMealOption>>>('/api/meal/options', {\n      params,\n    }).pipe(\n      map(this.extractResponseData),\n      switchMap(data => {\n        const sources = data.data.filter(opt => opt.type === 'RECIPE' || 'INGREDIENT')\n          .map(opt => this.loadMeasurements(opt.foodId));\n\n        return combineLatest([of(data), combineLatest(sources)]);\n      }),\n      map(([options, allMeasurements]) => {\n        allMeasurements\n          .filter(measurements => measurements != null && measurements.length > 0)\n          .forEach(measurements => {\n            const food = options.data\n              .find(opt => opt.type === 'RECIPE' || 'INGREDIENT' && opt.foodId == measurements[0].foodId);\n\n            if (food != null) {\n              food.measurements = measurements;\n            }\n          });\n\n        return options;\n      }),\n    );\n  }\n\n  loadMeasurements(foodId: number): Observable<IMeasurement[]> {\n    return this.http.get<IApiResponse<IMeasurement[]>>(`/api/measurement`, {params: {foodId}})\n      .pipe(\n        map(this.extractResponseData),\n      );\n  }\n\n  private extractResponseData<T>(rsp: IApiResponse<T>): T {\n    if (rsp.success) {\n      return rsp.data;\n    } else {\n      throw new Error(rsp.error);\n    }\n  }\n\n  private extractVoidResponse = map((rsp: IApiResponse<void>) => {\n    this.extractResponseData(rsp);\n    return null;\n  });\n\n  updateMeasurement(measurement: IMeasurement): Observable<IMeasurement> {\n    return this.http.put<IApiResponse<IMeasurement>>(`/api/measurement/${measurement.id}`, measurement)\n      .pipe(\n        map(this.extractResponseData),\n      );\n  }\n\n  createMeasurement(measurement: IMeasurement): Observable<IMeasurement> {\n    return this.http.post<IApiResponse<IMeasurement>>(`/api/measurement`, measurement)\n      .pipe(\n        map(this.extractResponseData),\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthState",
            "id": "injectable-AuthState-20e0815c4fa0f7b52360c9c7dd9c934747386b119dfbe3c976e30ab385cfdb970833d057ec6703a0b4d0248b1abf3dafcbb1afca5862707428bc1c33dc2d781b",
            "file": "src/app/features/auth/auth.state.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "ProfileState.language"
                        }
                    ]
                },
                {
                    "name": "localStoreService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocalStoreService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "configureProfile",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Auth.ConfigureProfilePayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Auth.ConfigureProfilePayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNavigate",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Navigate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Navigate"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Navigate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleProfileConfigured",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "Auth.ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Auth.ProfileConfiguredSuccessfullyEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "Auth.ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleProfileLoadedEvent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ProfileLoadedEvent"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngxsOnInit",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileConfigured",
                    "args": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAuth",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined, cancelUncompleted: false}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "EmitterAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshInProgress",
                    "args": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Auth.IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Auth.SignInPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Auth.SignInPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Auth.SignUpPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Auth.IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Auth.SignUpPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Action, NgxsOnInit, Selector, State, StateContext, Store} from '@ngxs/store';\nimport {Auth} from './auth.state-models';\nimport {ApiService} from '../../service/api.service';\nimport {catchError, EMPTY, map, of, switchMap, tap} from 'rxjs';\nimport {Navigate} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../../commons/routes';\nimport {LocalStoreService} from '../../service/local-store.service';\nimport {UnknownBoolean} from '../../commons/models/common.models';\nimport {SelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {ProfileState} from '../../state/profile.state';\nimport {Language} from '../../commons/models/auth.models';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {ProfileLoadedEvent} from '../../commons/models/state.models';\nimport IAuthState = Auth.IAuthState;\n\n\n@State<Auth.IAuthState>({\n  name: 'auth',\n  defaults: {\n    profileConfigured: UnknownBoolean.UNKNOWN,\n    loggedIn: UnknownBoolean.UNKNOWN,\n    refreshToken: null,\n    afterAuthUrl: null,\n    refreshInProgress: false,\n  },\n})\n@Injectable()\nexport class AuthState implements NgxsOnInit {\n  private static api: ApiService;\n  private static localStoreService: LocalStoreService;\n  private static store: Store;\n\n  @SelectSnapshot(ProfileState.language)\n  language: Language;\n\n  constructor(private api: ApiService,\n              private localStoreService: LocalStoreService) {\n    AuthState.api = api;\n    AuthState.localStoreService = localStoreService;\n  }\n\n  @Selector()\n  static refreshToken(state: Auth.IAuthState): string | null {\n    return state.refreshToken;\n  }\n\n  @Selector()\n  static refreshInProgress(state: Auth.IAuthState): boolean {\n    return state.refreshInProgress;\n  }\n\n  @Selector()\n  static profileConfigured(state: Auth.IAuthState): UnknownBoolean {\n    return state.loggedIn.and(state.profileConfigured);\n  }\n\n  @Selector()\n  static isAuthenticated(state: Auth.IAuthState): UnknownBoolean {\n    return state.loggedIn;\n  }\n\n  ngxsOnInit(ctx: StateContext<Auth.IAuthState>): void {\n    const refreshToken = this.localStoreService.loadRefreshToken();\n    if (refreshToken != null) {\n      ctx.patchState({\n        refreshToken,\n      });\n    }\n\n    this.api.getProfile()\n      .pipe(\n        tap(profile => {\n          ctx.patchState({\n            loggedIn: UnknownBoolean.TRUE,\n            profileConfigured: UnknownBoolean.of(profile.profileConfigured),\n          });\n\n          if (!profile.profileConfigured) {\n            ctx.dispatch(new Navigate([fromRoutes.completeProfile]));\n          }\n        }),\n        map(profile => new ProfileLoadedEvent(profile)),\n        catchError(_ => {\n          ctx.patchState({\n            loggedIn: UnknownBoolean.FALSE,\n          });\n\n          return of(new Navigate([fromRoutes.signIn]));\n        }),\n      )\n      .subscribe(ctx.dispatch);\n  }\n\n  @Receiver({type: Auth.LOG_OUT})\n  static logOut(ctx: StateContext<Auth.IAuthState>, _: EmitterAction) {\n    this.localStoreService.dropRefreshToken();\n\n    ctx.patchState({\n      refreshToken: null,\n      loggedIn: UnknownBoolean.FALSE,\n      profileConfigured: UnknownBoolean.UNKNOWN,\n    });\n  }\n\n  @Receiver({type: Auth.SIGN_IN})\n  static signIn(ctx: StateContext<Auth.IAuthState>, {payload}: EmitterAction<Auth.SignInPayload>) {\n    return this.api.signIn(payload.email, payload.password)\n      .pipe(\n        switchMap(rsp => {\n          ctx.patchState({\n            refreshToken: rsp.refreshToken,\n            loggedIn: UnknownBoolean.TRUE,\n          });\n\n          this.localStoreService.saveRefreshToken(rsp.refreshToken);\n\n          return this.api.getProfile();\n        }),\n        switchMap(profile => {\n          ctx.patchState({\n            profileConfigured: UnknownBoolean.of(profile.profileConfigured),\n          });\n\n          let redirectUrl = ctx.getState().afterAuthUrl;\n          if (redirectUrl != null) {\n            ctx.patchState({\n              afterAuthUrl: null,\n            });\n          } else {\n            redirectUrl = fromRoutes.dashboard;\n          }\n\n          const navigationEvent = profile.profileConfigured ?\n                                  new Navigate([redirectUrl]) :\n                                  new Navigate([fromRoutes.completeProfile]);\n\n          return ctx.dispatch([\n            navigationEvent,\n            new ProfileLoadedEvent(profile),\n          ]);\n        }),\n        catchError(err => {\n          ctx.patchState({\n            refreshToken: null,\n            loggedIn: UnknownBoolean.FALSE,\n            profileConfigured: UnknownBoolean.FALSE,\n          });\n\n          //TODO: show error message\n\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: Auth.SIGN_UP})\n  static signUp(ctx: StateContext<Auth.IAuthState>, {payload}: EmitterAction<Auth.SignUpPayload>) {\n    return this.store.select(ProfileState.language)\n      .pipe(\n        switchMap(language => this.api.signUp(payload.email, payload.name, payload.password, language)),\n        map(rsp => {\n          ctx.patchState({\n            refreshToken: rsp.refreshToken,\n            loggedIn: UnknownBoolean.TRUE,\n            profileConfigured: UnknownBoolean.FALSE,\n          });\n\n          this.localStoreService.saveRefreshToken(rsp.refreshToken);\n\n          return new Navigate([`/${fromRoutes.completeProfile}`]);\n        }),\n        catchError(err => {\n          //TODO: show error message\n\n          console.warn(err.msg);\n\n          ctx.patchState({\n            refreshToken: null,\n            loggedIn: UnknownBoolean.FALSE,\n            profileConfigured: UnknownBoolean.FALSE,\n          });\n          return EMPTY;\n        }),\n        map(ctx.dispatch),\n      );\n  }\n\n  @Receiver({type: Auth.REFRESH_AUTH, cancelUncompleted: false})\n  static refreshAuth(ctx: StateContext<Auth.IAuthState>, _: EmitterAction) {\n    ctx.patchState({\n      refreshInProgress: true,\n    });\n\n    return this.api.refreshAuth(ctx.getState().refreshToken)\n      .pipe(\n        map(rsp => {\n          ctx.patchState({\n            refreshToken: rsp.refreshToken,\n            refreshInProgress: false,\n            loggedIn: UnknownBoolean.TRUE,\n          });\n\n          this.localStoreService.saveRefreshToken(rsp.refreshToken);\n        }),\n        catchError(err => {\n          //TODO: show error message\n\n          console.warn(err.msg);\n\n          ctx.patchState({\n            refreshToken: null,\n            refreshInProgress: false,\n            loggedIn: UnknownBoolean.FALSE,\n            profileConfigured: UnknownBoolean.FALSE,\n          });\n\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: Auth.CONFIGURE_PROFILE})\n  static configureProfile(ctx: StateContext<Auth.IAuthState>, {payload}: EmitterAction<Auth.ConfigureProfilePayload>) {\n    return this.api.configureProfile(payload.aims)\n      .pipe(\n        tap(_ => {\n          ctx.patchState({\n            profileConfigured: UnknownBoolean.TRUE,\n          });\n        }),\n        map(_ => new Auth.ProfileConfiguredSuccessfullyEvent(payload.aims)),\n        catchError(err => {\n          console.error(err);\n\n          //TODO: show error message\n\n          return EMPTY;\n        }),\n        map(ctx.dispatch),\n      );\n  }\n\n  @Action(Auth.ProfileConfiguredSuccessfullyEvent)\n  handleProfileConfigured(ctx: StateContext<Auth.IAuthState>, _: Auth.ProfileConfiguredSuccessfullyEvent) {\n    if (ctx.getState().loggedIn) {\n      ctx.patchState({\n        profileConfigured: UnknownBoolean.TRUE,\n      });\n\n      return ctx.dispatch(new Navigate(['/']));\n    }\n    return null;\n  }\n\n  @Action(ProfileLoadedEvent)\n  handleProfileLoadedEvent(ctx: StateContext<Auth.IAuthState>, action: ProfileLoadedEvent) {\n    ctx.patchState({\n      profileConfigured: action.profile.profileConfigured ? UnknownBoolean.TRUE : UnknownBoolean.FALSE,\n    });\n  }\n\n  @Action(Navigate)\n  handleNavigate(ctx: StateContext<IAuthState>, action: Navigate) {\n    if (action.path.length > 1 || (action.path[0] !== `/${fromRoutes.signIn}` && action.path[0] !== `/${fromRoutes.signUp}`)) {\n      return;\n    }\n\n    ctx.patchState({\n      afterAuthUrl: window.location.pathname,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStoreService",
                        "type": "LocalStoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStoreService",
                        "type": "LocalStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DashboardState",
            "id": "injectable-DashboardState-f5df0901d4c6362e73b16c4416b6a50f87d8d72a836b667b40acdf97ba6d096e72f0acefb096acb9bdc1353f65de61160145cdac82e170d2594530c5089137bc",
            "file": "src/app/features/dashboard/dashboard.state.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMeal",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Dashboard.AddMealPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Dashboard.AddMealPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dailyAims",
                    "args": [
                        {
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "date",
                    "args": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DateTime",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadWeekMeals",
                    "args": [
                        {
                            "name": "date",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngxsOnInit",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileLoaded",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: ProfileLoadedEvent}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMeal",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Dashboard.RemoveMealPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Dashboard.RemoveMealPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchDate",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Dashboard.SwitchDatePayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Dashboard.IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Dashboard.SwitchDatePayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todayMeals",
                    "args": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMeal[]",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todayNutrients",
                    "args": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todayMeals",
                            "type": "IMeal[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['undefined']"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todayMeals",
                            "type": "IMeal[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "weeklyAims",
                    "args": [
                        {
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "weeklyNutrients",
                    "args": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Dashboard.IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {NgxsOnInit, Selector, State, StateContext, Store} from '@ngxs/store';\nimport {Dashboard} from './dashboard.state-models';\nimport {ApiService} from '../../service/api.service';\nimport {DateTime} from 'luxon';\nimport {ProfileState} from '../../state/profile.state';\nimport {catchError, combineLatest, EMPTY, map, Observable, of, switchMap, tap} from 'rxjs';\nimport {emptyPfcc, IPage, IPfcc} from '../../commons/models/common.models';\nimport {IMeal} from '../../commons/models/domain.models';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {sumPfccs} from '../../commons/functions';\nimport {ProfileLoadedEvent} from '../../commons/models/state.models';\n\n@State<Dashboard.IDashboardState>({\n  name: 'dashboard',\n  defaults: {\n    aims: null,\n    weekMeals: null,\n    currentDate: null,\n  },\n})\n@Injectable({providedIn: 'root'})\nexport class DashboardState implements NgxsOnInit {\n  private static api: ApiService;\n\n  @Selector()\n  static date(state: Dashboard.IDashboardState): DateTime {\n    return state.currentDate;\n  }\n\n  @Selector()\n  static dailyAims({aims}: Dashboard.IDashboardState): IPfcc {\n    return aims;\n  }\n\n  @Selector()\n  static weeklyAims({aims}: Dashboard.IDashboardState): IPfcc {\n    const weekday = DateTime.now().weekday;\n    return {\n      protein: (aims.protein || 0) * weekday,\n      fat: (aims.fat || 0) * weekday,\n      carbohydrates: (aims.carbohydrates || 0) * weekday,\n      calories: (aims.calories || 0) * weekday,\n    };\n  }\n\n  @Selector([DashboardState.todayMeals])\n  static todayNutrients(state: Dashboard.IDashboardState, todayMeals: IMeal[]): IPfcc {\n    return sumPfccs(...todayMeals.map(m => m.pfcc));\n  }\n\n  @Selector()\n  static weeklyNutrients(state: Dashboard.IDashboardState): IPfcc {\n    if (state.weekMeals == null) {\n      return emptyPfcc;\n    }\n\n    return sumPfccs(\n      ...state.weekMeals.map(m => m.pfcc),\n    );\n  }\n\n  @Selector()\n  static todayMeals(state: Dashboard.IDashboardState): IMeal[] {\n    if (state.weekMeals == null) {\n      return [];\n    }\n    return state.weekMeals\n      .filter(m => m.eatenOn.hasSame(state.currentDate, 'day'));\n  }\n\n  constructor(api: ApiService, private store: Store) {\n    DashboardState.api = api;\n  }\n\n  ngxsOnInit(ctx: StateContext<Dashboard.IDashboardState>): void {\n    const now = DateTime.now();\n    ctx.patchState({\n      currentDate: now,\n      aims: this.store.selectSnapshot(ProfileState.aims),\n    });\n\n    DashboardState.loadWeekMeals(now, ctx);\n  }\n\n  @Receiver({type: Dashboard.REMOVE_MEAL})\n  static removeMeal(ctx: StateContext<Dashboard.IDashboardState>, {payload}: EmitterAction<Dashboard.RemoveMealPayload>) {\n    return this.api.removeMeal(payload.id)\n      .pipe(\n        tap(_ => ctx.patchState({weekMeals: ctx.getState().weekMeals.filter(m => m.id !== payload.id)})),\n        catchError(err => {\n          console.error(err);\n          //TODO: Show error message\n\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: Dashboard.ADD_MEAL})\n  static addMeal(ctx: StateContext<Dashboard.IDashboardState>, {payload}: EmitterAction<Dashboard.AddMealPayload>) {\n    return this.api.addMeal(payload)\n      .pipe(\n        tap(meal => {\n          ctx.patchState({\n            weekMeals: [...ctx.getState().weekMeals, meal],\n          });\n        }),\n        catchError(err => {\n          console.error(err);\n          //TODO: Show error message\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: Dashboard.SWITCH_DATE})\n  static switchDate(ctx: StateContext<Dashboard.IDashboardState>, {payload}: EmitterAction<Dashboard.SwitchDatePayload>) {\n    const newDate = payload.date.startOf('day');\n    const oldDate = ctx.getState().currentDate;\n\n    ctx.patchState({\n      currentDate: newDate,\n    });\n\n    if (oldDate.weekNumber === newDate.weekNumber) {\n      return EMPTY;\n    }\n\n    return this.loadWeekMeals(newDate, ctx);\n  }\n\n  @Receiver({action: ProfileLoadedEvent})\n  public static profileLoaded(ctx: StateContext<Dashboard.IDashboardState>, {profile}: ProfileLoadedEvent) {\n    ctx.patchState({\n      aims: profile.aims,\n    });\n  }\n\n  private static loadWeekMeals(date: DateTime, ctx: StateContext<Dashboard.IDashboardState>) {\n    const pageSize = 50;\n    const from = date.startOf('week');\n    const to = date.endOf('week');\n    this.api.loadMeals(0, pageSize, from, to)\n      .pipe(\n        switchMap(mealsPage => {\n          let loaders: Observable<IPage<IMeal>>[] = [];\n          loaders.push(of(mealsPage));\n\n          for (let i = 1; i < mealsPage.totalPages; i++) {\n            loaders.push(this.api.loadMeals(i, pageSize, from, to));\n          }\n\n          return combineLatest(loaders);\n        }),\n        map(pages => {\n          return pages.map(p => p.data).reduce((m1, m2) => ([...m1, ...m2]), []);\n        }),\n        catchError(err => {\n          console.error(err);\n\n          //TODO: Show error message\n\n          return EMPTY;\n        }),\n      ).subscribe(meals => ctx.patchState({weekMeals: meals}));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FoodsManagementState",
            "id": "injectable-FoodsManagementState-38175cf2f5a333144f5b56d6e70ce248e66360f3e7a8397118ce28e6f7c90f4e08088e50fde3b1b1a602499831208333525780c49d1b74115b6847c69f5b7cbe",
            "file": "src/app/features/foods-management/foods-management.state.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "loadProductsEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.LoadFoodsActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.loadProducts"
                        }
                    ],
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "loadRecipesEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.LoadFoodsActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.loadRecipes"
                        }
                    ],
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createFood",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.CreateFoodActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.CreateFoodActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFood",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.DeleteFoodActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.DeleteFoodActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editFood",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.EditFoodActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.EditFoodActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMoreProducts",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMoreRecipes",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProducts",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.LoadFoodsActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.LoadFoodsActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadRecipes",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.LoadFoodsActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IFoodsManagementState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<FoodsManagement.LoadFoodsActionPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moreProductsAvailable",
                    "args": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moreRecipesAvailable",
                    "args": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "products",
                    "args": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFood[]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recipes",
                    "args": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFood[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IFoodsManagementState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Selector, State, StateContext} from '@ngxs/store';\nimport {FoodsManagement, IFoodsManagementState} from './foods-management.state-models';\nimport {Injectable} from '@angular/core';\nimport {Emittable, Emitter, EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {ApiService} from '../../service/api.service';\nimport {catchError, EMPTY, Observable, of, switchMap, tap} from 'rxjs';\nimport {IFood} from '../../commons/models/domain.models';\nimport LoadFoodsActionPayload = FoodsManagement.LoadFoodsActionPayload;\n\n@State<IFoodsManagementState>({\n  name: 'foodsManagement',\n  defaults: {\n    products: null,\n    recipes: null,\n  },\n})\n@Injectable()\nexport class FoodsManagementState {\n  @Emitter(FoodsManagementState.loadProducts)\n  private static loadProductsEmitter: Emittable<FoodsManagement.LoadFoodsActionPayload>;\n  @Emitter(FoodsManagementState.loadRecipes)\n  private static loadRecipesEmitter: Emittable<FoodsManagement.LoadFoodsActionPayload>;\n\n  private static api: ApiService;\n\n  constructor(api: ApiService) {\n    FoodsManagementState.api = api;\n  }\n\n  @Selector()\n  static products(state: IFoodsManagementState): IFood[] {\n    return state.products.data;\n  }\n\n  @Selector()\n  static recipes(state: IFoodsManagementState): IFood[] {\n    return state.recipes.data;\n  }\n\n  @Selector()\n  static moreProductsAvailable(state: IFoodsManagementState): boolean {\n    return state.products.page < state.products.totalPages - 1;\n  }\n\n  @Selector()\n  static moreRecipesAvailable(state: IFoodsManagementState): boolean {\n    return state.recipes.page < state.recipes.totalPages - 1;\n  }\n\n  @Receiver({type: FoodsManagement.LOAD_MORE_PRODUCTS})\n  static loadMoreProducts(ctx: StateContext<IFoodsManagementState>): Observable<unknown> {\n    const productsState = ctx.getState().products;\n\n    if (productsState.page >= productsState.totalPages - 1) {\n      return of();// TODO: return error action to show ui error badge\n    }\n\n    return this.api.loadFoodsList(productsState.page + 1, productsState.pageSize, productsState.name, 'INGREDIENT')\n      .pipe(\n        tap(rsp => {\n          ctx.patchState({\n            products: {\n              data: [...productsState.data, ...rsp.data],\n              page: rsp.page,\n              pageSize: rsp.pageSize,\n              totalElements: rsp.totalElements,\n              totalPages: rsp.totalPages,\n              name: productsState.name,\n            },\n          });\n        }),\n      );\n  };\n\n  @Receiver({type: FoodsManagement.LOAD_PRODUCTS})\n  static loadProducts(ctx: StateContext<IFoodsManagementState>,\n                      {payload}: EmitterAction<FoodsManagement.LoadFoodsActionPayload>): Observable<unknown> {\n    return FoodsManagementState.api.loadFoodsList(payload.page, payload.pageSize, payload.name, 'INGREDIENT')\n      .pipe(\n        tap(rsp => {\n          ctx.patchState({\n            products: {\n              data: rsp.data,\n              page: rsp.page,\n              pageSize: rsp.pageSize,\n              totalElements: rsp.totalElements,\n              totalPages: rsp.totalPages,\n              name: payload.name,\n            },\n          });\n        }),\n        catchError(err => {\n          console.error('Loading products failed', err);\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: FoodsManagement.LOAD_MORE_RECIPES})\n  static loadMoreRecipes(ctx: StateContext<IFoodsManagementState>): Observable<unknown> {\n    const recipesState = ctx.getState().recipes;\n\n    if (recipesState.page >= recipesState.totalPages - 1) {\n      return of();// TODO: return error action to show ui error badge\n    }\n\n    return this.api.loadFoodsList(recipesState.page + 1, recipesState.pageSize, recipesState.name, 'RECIPE')\n      .pipe(\n        tap(rsp => {\n          ctx.patchState({\n            recipes: {\n              data: [...recipesState.data, ...rsp.data],\n              page: rsp.page,\n              pageSize: rsp.pageSize,\n              totalElements: rsp.totalElements,\n              totalPages: rsp.totalPages,\n              name: recipesState.name,\n            },\n          });\n        }),\n      );\n  }\n\n  @Receiver({type: FoodsManagement.LOAD_RECIPES})\n  static loadRecipes(ctx: StateContext<IFoodsManagementState>,\n                     {payload}: EmitterAction<FoodsManagement.LoadFoodsActionPayload>): Observable<unknown> {\n    return FoodsManagementState.api.loadFoodsList(payload.page, payload.pageSize, payload.name, 'RECIPE')\n      .pipe(\n        tap(rsp => {\n          ctx.patchState({\n            recipes: {\n              data: rsp.data,\n              page: rsp.page,\n              pageSize: rsp.pageSize,\n              totalElements: rsp.totalElements,\n              totalPages: rsp.totalPages,\n              name: payload.name,\n            },\n          });\n        }),\n        catchError(err => {\n          //TODO: Fire some error action to show error notification\n          console.error('Loading recipes failed', err);\n          return EMPTY;\n        }),\n      );\n  }\n\n  @Receiver({type: FoodsManagement.CREATE_FOOD})\n  static createFood(ctx: StateContext<IFoodsManagementState>, {payload}: EmitterAction<FoodsManagement.CreateFoodActionPayload>): Observable<unknown> {\n    return FoodsManagementState.api.addFood({\n      ...payload,\n      ownedByUser: true,\n    }).pipe(\n      tap(_ => {\n        const {pageSize, name} = payload.type === 'INGREDIENT' ? ctx.getState().products : ctx.getState().recipes;\n        const loadFoodsPayload: LoadFoodsActionPayload = {\n          page: 0,\n          pageSize,\n          name,\n        };\n\n        switch (payload.type) {\n          case 'INGREDIENT':\n            FoodsManagementState.loadProductsEmitter.emit(loadFoodsPayload);\n            break;\n          case 'RECIPE':\n            FoodsManagementState.loadRecipesEmitter.emit(loadFoodsPayload);\n            break;\n          default:\n            console.warn(`Unknown food type: ${payload.type}`);\n        }\n      }),\n      catchError(err => {\n        console.error('Creating food failed', err);\n        //TODO: return error action to show ui error badge\n        return EMPTY;\n      }),\n    );\n\n  }\n\n  @Receiver({type: FoodsManagement.EDIT_FOOD})\n  static editFood(ctx: StateContext<IFoodsManagementState>, {payload}: EmitterAction<FoodsManagement.EditFoodActionPayload>): Observable<unknown> {\n    return FoodsManagementState.api.updateFood({...payload}).pipe(\n      tap(food => {\n        ctx.patchState({\n          products: {\n            ...ctx.getState().products,\n            data: ctx.getState().products.data.map(f => f.id === payload.id ? food : f),\n          },\n          recipes: {\n            ...ctx.getState().recipes,\n            data: ctx.getState().recipes.data.map(f => f.id === payload.id ? food : f),\n          },\n        });\n      }),\n      catchError(err => {\n        //TODO: return error action to show ui error badge\n        console.error('Editing food failed', err);\n        return EMPTY;\n      }),\n    );\n  }\n\n  @Receiver({type: FoodsManagement.DELETE_FOOD})\n  static deleteFood(ctx: StateContext<IFoodsManagementState>, {payload}: EmitterAction<FoodsManagement.DeleteFoodActionPayload>): Observable<unknown> {\n    return FoodsManagementState.api.deleteFood(payload).pipe(\n      switchMap(_ => {\n        const s = ctx.getState();\n        const foodType = s.recipes.data.find(f => f.id === payload) ?\n                         'RECIPE' : 'INGREDIENT';\n        const pageSize = foodType === 'INGREDIENT' ?\n                         s.products.pageSize * s.products.page :\n                         s.recipes.pageSize * s.recipes.page;\n        const name = foodType === 'INGREDIENT' ? s.products.name : s.recipes.name;\n\n\n        return this.api.loadFoodsList(0, pageSize, name, foodType);\n      }),\n      tap(foods => {\n        const foodType = ctx.getState().recipes.data.find(f => f.id === payload) ?\n                         'RECIPE' : 'INGREDIENT';\n        switch (foodType) {\n          case 'INGREDIENT':\n            ctx.patchState({\n              products: {\n                ...ctx.getState().products,\n                data: foods.data,\n              },\n            });\n            break;\n          case 'RECIPE':\n            ctx.patchState({\n              recipes: {\n                ...ctx.getState().recipes,\n                data: foods.data,\n              },\n            });\n            break;\n        }\n      }),\n      catchError(err => {\n        //TODO: return error action to show ui error badge\n        console.error('Deleting food failed', err);\n        return EMPTY;\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStoreService",
            "id": "injectable-LocalStoreService-6372a6da9341b5af8b5c0b53b7ca38428bff17191d3f742af6dc26d35bec8819e3c41c3d5b15daa4b38fb47135cef25e3e8f3feea7bcca13f2ddb968fe7ea872",
            "file": "src/app/service/local-store.service.ts",
            "properties": [
                {
                    "name": "REFRESH_TOKEN_KEY",
                    "defaultValue": "'refresh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dropRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveRefreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class LocalStoreService {\n  private readonly REFRESH_TOKEN_KEY = 'refresh';\n\n  constructor() {\n  }\n\n  loadRefreshToken(): string | null {\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  saveRefreshToken(token: string) {\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, token);\n  }\n\n  dropRefreshToken() {\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "type": "injectable"
        },
        {
            "name": "NavigationState",
            "id": "injectable-NavigationState-b918a37491e7bed8549f177d8730b5e23271b880384a1b7fbbbb1ee294ebcefd7f4865931a398ed1f3bcf96b2133b1e0426791adae7080a54fb92df7f5ee2332",
            "file": "src/app/state/navigation.state.ts",
            "properties": [
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "extractNavigationHistoryEntry",
                    "args": [
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Navigation.INavigationEntry",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNavigation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: RouterNavigated}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RouterNavigated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateBack",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Navigation.NavigateBackPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Navigation.NavigateBackPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "putNewEntryIntoHistory",
                    "args": [
                        {
                            "name": "entry",
                            "type": "INavigationEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "INavigationEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "queryParamsEqual",
                    "args": [
                        {
                            "name": "entry1",
                            "type": "Navigation.INavigationEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entry2",
                            "type": "Navigation.INavigationEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry1",
                            "type": "Navigation.INavigationEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entry2",
                            "type": "Navigation.INavigationEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reduceHistorySize",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Navigation.INavigationState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {State, StateContext} from '@ngxs/store';\nimport {Navigation} from './navigation.state-model';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {RouterNavigated} from '@ngxs/router-plugin';\nimport {Injectable} from '@angular/core';\nimport {environment} from '../../environments/environment';\nimport {Router} from '@angular/router';\nimport * as fromRoutes from '../commons/routes';\nimport INavigationEntry = Navigation.INavigationEntry;\n\n@State<Navigation.INavigationState>({\n  name: 'navigation',\n  defaults: {\n    history: [],\n  },\n})\n@Injectable()\nexport class NavigationState {\n  private static router: Router;\n\n  constructor(router: Router) {\n    NavigationState.router = router;\n  }\n\n  @Receiver({action: RouterNavigated})\n  static handleNavigation(ctx: StateContext<Navigation.INavigationState>, action: RouterNavigated) {\n    const entry = this.extractNavigationHistoryEntry(action);\n\n    this.putNewEntryIntoHistory(entry, ctx);\n\n    this.reduceHistorySize(ctx);\n  }\n\n  @Receiver({type: Navigation.NAVIGATE_BACK})\n  static navigateBack(ctx: StateContext<Navigation.INavigationState>, {payload}: EmitterAction<Navigation.NavigateBackPayload>) {\n    if (ctx.getState().history.length <= 1) {\n      console.warn('No history to go back, returning to defaultPage');\n      return this.router.navigate([environment.navigation.defaultPage]);\n    }\n\n    ctx.patchState({\n      history: ctx.getState().history.slice(0, -1),\n    });\n    const state = ctx.getState();\n    let target = state.history[state.history.length - 1];\n\n    if (target == null) {\n      target = {\n        url: [fromRoutes.dashboard],\n        queryParams: {},\n      };\n    } else {\n      // Make copy of original target as state freezes objects\n      target = {...target};\n    }\n\n    if (payload.additionalQueryParams != null) {\n      target.queryParams = {\n        ...target.queryParams,\n        ...payload.additionalQueryParams,\n      };\n    }\n\n    return this.router.navigate(target.url, {queryParams: target.queryParams});\n  }\n\n  private static reduceHistorySize(ctx: StateContext<Navigation.INavigationState>) {\n    if (ctx.getState().history.length > environment.navigation.maxHistorySize) {\n      ctx.patchState({\n        history: ctx.getState().history.slice(1),\n      });\n    }\n  }\n\n  private static putNewEntryIntoHistory(entry: INavigationEntry, ctx: StateContext<Navigation.INavigationState>) {\n    if (ctx.getState().history.length == 0) {\n      ctx.patchState({\n        history: [entry],\n      });\n      return;\n    }\n\n    const last = ctx.getState().history[ctx.getState().history.length - 1];\n\n    if (last.url.length === entry.url.length &&\n      last.url.every((value, index) => value === entry.url[index]) &&\n      NavigationState.queryParamsEqual(last, entry)) {\n      console.log(\"Navigation to top url detected\");\n      return;\n    }\n\n    ctx.patchState({\n      history: [...ctx.getState().history, entry],\n    });\n  }\n\n  private static extractNavigationHistoryEntry(action: RouterNavigated) {\n    const entry: Navigation.INavigationEntry = {\n      url: action.routerState.root.firstChild.url.map(seg => seg.path),\n      queryParams: action.routerState.root.queryParams,\n    };\n    return entry;\n  }\n\n  private static queryParamsEqual(entry1: Navigation.INavigationEntry, entry2: Navigation.INavigationEntry): boolean {\n    if (entry1.queryParams == null && entry2.queryParams == null) {\n      return true;\n    }\n\n    if ((entry1.queryParams == null) != (entry2.queryParams == null)) {\n      return false;\n    }\n\n    for (let key in entry1.queryParams) {\n      if (entry1.queryParams[key] != entry2.queryParams[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileState",
            "id": "injectable-ProfileState-efd1f13d04ae2ea5404eae3528178c11eb0f95b2e113feb757aa6d71438169ba1f2bb206e5256993c600c536bebbb257d77405b9ed357084ad76d19a94848e37",
            "file": "src/app/state/profile.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "aims",
                    "args": [
                        {
                            "name": "state",
                            "type": "IProfileState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPfcc",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IProfileState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "language",
                    "args": [
                        {
                            "name": "state",
                            "type": "IProfileState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Language",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IProfileState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "languageChanged",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<Profile.LanguageChangedEventPayload>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<Profile.LanguageChangedEventPayload>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngxsOnInit",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileConfigured",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Auth.ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "Auth.ProfileConfiguredSuccessfullyEvent"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "Auth.ProfileConfiguredSuccessfullyEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileLoaded",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: ProfileLoadedEvent}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Profile.IProfileState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ProfileLoadedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {NgxsOnInit, Selector, State, StateContext} from '@ngxs/store';\nimport {Profile} from './profile.state-model';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {Language} from '../commons/models/auth.models';\nimport {IPfcc} from '../commons/models/common.models';\nimport {ProfileLoadedEvent} from '../commons/models/state.models';\nimport {Injectable} from '@angular/core';\nimport {Auth} from '../features/auth/auth.state-models';\nimport IProfileState = Profile.IProfileState;\n\n@State<Profile.IProfileState>({\n  name: 'profile',\n  defaults: {\n    name: null,\n    email: null,\n    preferredLanguage: null,\n    aims: null,\n    language: null,\n  },\n})\n@Injectable({providedIn: 'root'})\nexport class ProfileState implements NgxsOnInit {\n\n  @Selector()\n  static language(state: IProfileState): Language {\n    return state.language;\n  }\n\n  @Selector()\n  static aims(state: IProfileState): IPfcc {\n    return state.aims;\n  }\n\n  ngxsOnInit(ctx: StateContext<Profile.IProfileState>): void {\n    const lang = navigator.language.substring(0, 2);\n    switch (lang) {\n      case 'ua':\n      case 'ru':\n        ctx.patchState({\n          language: 'UA',\n        });\n        break;\n      case 'en':\n        ctx.patchState({\n          language: 'EN',\n        });\n        break;\n      default:\n        console.warn(`Can't infer supported language from ${navigator.language}. Defaulting to EN`);\n        ctx.patchState({\n          language: 'EN',\n        });\n    }\n  }\n\n  @Receiver({action: ProfileLoadedEvent})\n  public static profileLoaded(ctx: StateContext<Profile.IProfileState>, {profile}: ProfileLoadedEvent) {\n    ctx.patchState({\n      name: profile.name,\n      email: profile.email,\n      aims: profile.aims,\n      preferredLanguage: profile.preferredLanguage,\n      language: ctx.getState().language ?? profile.preferredLanguage,\n    });\n  }\n\n  @Receiver({type: Profile.LANGUAGE_CHANGED_EVENT})\n  static languageChanged(ctx: StateContext<Profile.IProfileState>, {payload}: EmitterAction<Profile.LanguageChangedEventPayload>) {\n    ctx.patchState({\n      language: payload,\n    });\n  }\n\n  @Receiver(Auth.ProfileConfiguredSuccessfullyEvent)\n  static profileConfigured(ctx: StateContext<Profile.IProfileState>, {aims}: Auth.ProfileConfiguredSuccessfullyEvent) {\n    ctx.patchState({\n      aims,\n    });\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UiState",
            "id": "injectable-UiState-5013fef010ab6fa6d006c2775acc0a58b4b79e0282129d1e43a4ba67a7d259dbc25faabea10d99348e5d5317899c1fab7d011b737f48aa1c44deed452ae7ddfc",
            "file": "src/app/state/ui/ui.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "onNavigate",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Ui.IUiStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "RouterDataResolved",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{action: RouterDataResolved}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Ui.IUiStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "RouterDataResolved",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showHeader",
                    "args": [
                        {
                            "name": "state",
                            "type": "Ui.IUiStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Ui.IUiStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sideMenuOpened",
                    "args": [
                        {
                            "name": "state",
                            "type": "Ui.IUiStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "Ui.IUiStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSideMenu",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Ui.IUiStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "EmitterAction<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Receiver",
                            "stringifiedArguments": "{type: undefined}"
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<Ui.IUiStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "EmitterAction<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Selector, State, StateContext} from \"@ngxs/store\";\nimport {Ui} from \"./ui.state-model\";\nimport {Injectable} from '@angular/core';\nimport {EmitterAction, Receiver} from '@ngxs-labs/emitter';\nimport {RouterDataResolved} from '@ngxs/router-plugin';\n\nexport const UI_STATE_NAME = 'UI';\n\n@State<Ui.IUiStateModel>({\n  name: UI_STATE_NAME,\n  defaults: {\n    sideMenuOpened: false,\n    showHeader: true\n  },\n})\n@Injectable()\nexport class UiState {\n  @Selector()\n  static sideMenuOpened(state: Ui.IUiStateModel): boolean {\n    return state.sideMenuOpened;\n  }\n\n  @Selector()\n  static showHeader(state: Ui.IUiStateModel): boolean {\n    return state.showHeader;\n  }\n\n  @Receiver({type: Ui.TOGGLE_SIDE_MENU})\n  static toggleSideMenu(ctx: StateContext<Ui.IUiStateModel>, {payload}: EmitterAction<boolean>): void {\n    ctx.patchState({\n      sideMenuOpened: payload ?? !ctx.getState().sideMenuOpened,\n    });\n  }\n\n  @Receiver({action: RouterDataResolved})\n  static onNavigate(ctx: StateContext<Ui.IUiStateModel>, action: RouterDataResolved) {\n    ctx.patchState({\n      showHeader: !action.routerState.root.firstChild.data?.['hideHeader'] ?? false\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-1231a302f17c6c821ab5dd7bb2d374b4ba6e2d39b22d9efb483e5e013a14b2caee7ce0fc18159708ecb4ccfb7b14fd76e704d1cb1dd73afe1e6d78e0406f937b",
            "file": "src/app/service/auth.interceptor.ts",
            "properties": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshAuthEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AuthState.refreshAuth"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshInProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "AuthState.refreshInProgress"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "AuthState.refreshToken"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldRefreshAuth",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {catchError, filter, Observable, Subject, switchMap, take, throwError} from 'rxjs';\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {AuthState} from '../features/auth/auth.state';\nimport {environment} from '../../environments/environment';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {SelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {Select} from '@ngxs/store';\n\n@Injectable({providedIn: 'root'})\nexport class AuthInterceptor implements HttpInterceptor, OnDestroy {\n\n  @Emitter(AuthState.refreshAuth)\n  private refreshAuthEmitter: Emittable;\n  @SelectSnapshot(AuthState.refreshToken)\n  private refreshToken: Observable<string | null>;\n  @Select(AuthState.refreshInProgress)\n  private refreshInProgress$: Observable<boolean>;\n\n  private destroy$ = new Subject<void>();\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.url.startsWith(`${environment.apiUrl}/api`)) {\n      req = req.clone({withCredentials: true});\n    }\n\n    return next.handle(req)\n      .pipe(\n        catchError(err => {\n          if (this.shouldRefreshAuth(err)) {\n            return this.refreshInProgress$.pipe(\n              take(1),\n              switchMap(isRefreshing => {\n                if (!isRefreshing) {\n                  this.refreshAuthEmitter.emit();\n                } else {\n                }\n                return this.refreshInProgress$.pipe(\n                  filter(isRefreshing => !isRefreshing),\n                  take(1),\n                );\n              }),\n              switchMap(_ => {\n                return next.handle(req);\n              }),\n            );\n          }\n\n          return throwError(() => err);\n        }),\n      );\n  }\n\n  private shouldRefreshAuth(err: Error): boolean {\n    return err instanceof HttpErrorResponse &&\n      err.status === 403 &&\n      !err.url.startsWith(`${environment.apiUrl}/api/user/refresh-auth-token`) &&\n      this.refreshToken != null;\n  }\n}\n",
            "type": "interceptor"
        },
        {
            "name": "BaseUrlInterceptor",
            "id": "injectable-BaseUrlInterceptor-10455e2d922ae06a430aa9a198a2e890c665ad1c711ff5d6e3620dd9e6d9c860986a9ea72e2bc4277bbcbb4912d745f2b4973870722cb4831f9b844ae5ec6013",
            "file": "src/app/service/base-url.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {environment} from \"../../environments/environment\";\n\n@Injectable()\nexport class BaseUrlInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // @ts-ignore\n    if (request.url.startsWith('/api') && environment['apiUrl'] != null) {\n      // @ts-ignore\n      return next.handle(request.clone({url: `${environment['apiUrl']}${request.url}`}));\n    } else {\n      return next.handle(request);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "PfccMissingTranslationHandler",
            "id": "class-PfccMissingTranslationHandler-f3256d3e5c09382725643efe723c2de727eb088d1e9f78e3fc1e9acd4b605a76b857a4892a2599f4e3f3fd81a5cd65eacd8d34e246f576bfde935ea557274d23",
            "file": "src/app/commons/pfcc-missing-translation-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\nexport class PfccMissingTranslationHandler implements MissingTranslationHandler {\n  private readonly skipPrefixes = [\n    'measurements.'\n  ];\n\n  handle(params: MissingTranslationHandlerParams) {\n    const skipPrefix = this.skipPrefixes.find(prefix => params.key.startsWith(prefix));\n    if (skipPrefix != null) {\n      return params.key.substring(skipPrefix.length);\n    }\n\n    return null;\n  }\n}\n",
            "properties": [
                {
                    "name": "skipPrefixes",
                    "defaultValue": "[\n    'measurements.'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handle",
                    "args": [
                        {
                            "name": "params",
                            "type": "MissingTranslationHandlerParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "MissingTranslationHandlerParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "MissingTranslationHandler"
            ]
        },
        {
            "name": "ProfileConfiguredSuccessfullyEvent",
            "id": "class-ProfileConfiguredSuccessfullyEvent-a9f85dbb17d58c0d7ad0261219e6abf54402cbc4c0ccfc37d2a755459d7093f7041f5c39eb44ca51cf829f1e3bf497c82b1942a205703051b6609d26aa2809fd",
            "file": "src/app/features/auth/auth.state-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IPfcc, UnknownBoolean} from '../../commons/models/common.models';\n\n\nexport namespace Auth {\n  export interface IAuthState {\n    loggedIn: UnknownBoolean,\n    profileConfigured: UnknownBoolean,\n    refreshToken: string | null,\n    afterAuthUrl?: string,\n    refreshInProgress: boolean,\n  }\n\n  export const SIGN_IN = '[AUTH] Sign in';\n  export const LOG_OUT = '[AUTH] Log out';\n  export const SIGN_UP = '[AUTH] Sign up';\n  export const REFRESH_AUTH = '[AUTH] Refresh auth action';\n  export const CONFIGURE_PROFILE = '[AUTH] Configure profile';\n\n  export type SignInPayload = {\n    email: string,\n    password: string\n  };\n\n  export type SignUpPayload = {\n    email: string;\n    name: string;\n    password: string;\n  };\n\n  export type ConfigureProfilePayload = {\n    aims: IPfcc;\n  };\n\n  export class ProfileConfiguredSuccessfullyEvent {\n    static readonly type = '[Auth] Profile configured successfully';\n\n    constructor(readonly aims: IPfcc) {\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "aims",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "aims",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Auth] Profile configured successfully'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileLoadedEvent",
            "id": "class-ProfileLoadedEvent-14edc8e1f33600f5d2b18b8e7c2e80f536b4bac728e9b0c11bb3fab6b5828f029a3f113ffcb09c93e05b60dfff16c72dd97a472395c2160d5ec90e491d50086d",
            "file": "src/app/commons/models/state.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {IProfile} from './domain.models';\n\nexport class ProfileLoadedEvent {\n  static readonly type = '[Profile] Profile loaded';\n\n  constructor(public readonly profile: IProfile) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "profile",
                        "type": "IProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "profile",
                        "type": "IProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Profile] Profile loaded'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UnknownBoolean",
            "id": "class-UnknownBoolean-89befc4437dc85009507afa622a3e9819f6bc24051ef711516f545b9d3baeb1c2039570cbe2f50dee04844fb8f194efba7fc44d3076dab01635b37f772a11407",
            "file": "src/app/commons/models/common.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IApiError {\n  message: string;\n}\n\nexport type IApiResponse<T> = ({\n  data: T | null;\n  success: boolean;\n  error: string | null;\n});\n\nexport interface IPage<T> {\n  data: T[];\n  page: number;\n  pageSize: number;\n  totalElements: number;\n  totalPages: number;\n}\n\nexport interface IPfcc {\n  protein: number | null;\n  fat: number | null;\n  carbohydrates: number | null;\n  calories: number | null;\n}\n\nexport const emptyPfcc: IPfcc = {\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n};\n\nexport class UnknownBoolean {\n  static readonly TRUE = new UnknownBoolean('TRUE');\n  static readonly FALSE = new UnknownBoolean('FALSE');\n  static readonly UNKNOWN = new UnknownBoolean('UNKNOWN');\n\n  private constructor(public readonly value: string) {\n  }\n\n  public and(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE || other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public or(other: UnknownBoolean): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN || other == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.FALSE && other == UnknownBoolean.FALSE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public not(): UnknownBoolean {\n    if (this == UnknownBoolean.UNKNOWN) {\n      return UnknownBoolean.UNKNOWN;\n    } else if (this == UnknownBoolean.TRUE) {\n      return UnknownBoolean.FALSE;\n    } else {\n      return UnknownBoolean.TRUE;\n    }\n  }\n\n  public get isTrue(): boolean {\n    return this === UnknownBoolean.TRUE;\n  }\n\n  public get isFalse(): boolean {\n    return this === UnknownBoolean.FALSE;\n  }\n\n  static of(value: boolean) {\n    return value ? UnknownBoolean.TRUE : UnknownBoolean.FALSE;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "modifierKind": [
                    121
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "FALSE",
                    "defaultValue": "new UnknownBoolean('FALSE')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "TRUE",
                    "defaultValue": "new UnknownBoolean('TRUE')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "UNKNOWN",
                    "defaultValue": "new UnknownBoolean('UNKNOWN')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "and",
                    "args": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "not",
                    "args": [],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "of",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "or",
                    "args": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnknownBoolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "UnknownBoolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "isTrue": {
                    "name": "isTrue",
                    "getSignature": {
                        "name": "isTrue",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 71
                    }
                },
                "isFalse": {
                    "name": "isFalse",
                    "getSignature": {
                        "name": "isFalse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 75
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "GaugeCircleDirective",
            "id": "directive-GaugeCircleDirective-0e731275746ee02dd5817974c1e396d1c736ef96b1257e23cd23f9e62e5f22a518e42d1f6babb38ae28650b2e871faa6e868d0532403c27af22cb6bca6f419ad",
            "file": "src/app/components/gauge/gauge-circle.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {AfterViewInit, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {IGaugeCircleConf} from './gauge-component.interfaces';\n\n@Directive({\n  selector: '[pfcGaugeCircle]',\n  standalone: true,\n})\nexport class GaugeCircleDirective implements OnDestroy, OnInit, AfterViewInit {\n\n  private static readonly STROKE_DASHARRAY = 'stroke-dasharray';\n  private static readonly TRANSFORM = 'transform';\n  private static readonly DEFAULT_COLOR = '#ee1d1d';\n  private static readonly OBSERVING_ATTRIBUTES = ['r', 'cx', 'cy'];\n\n  color: string = GaugeCircleDirective.DEFAULT_COLOR;\n  value!: number;\n  blink: boolean = false;\n  radius!: number;\n  cx!: number;\n  cy!: number;\n\n  private radiusChangedObserver: MutationObserver;\n  private maxValue: number = 100;\n\n  constructor(private el: ElementRef<SVGCircleElement>,\n              private cdr: ChangeDetectorRef) {\n    this.radiusChangedObserver = new MutationObserver((mutations: MutationRecord[]) => {\n      const interestAttrPresent = mutations.some(m => m.type == 'attributes' &&\n        m.attributeName != null &&\n        GaugeCircleDirective.OBSERVING_ATTRIBUTES.includes(m.attributeName));\n\n      if (interestAttrPresent) {\n        this.scanCircleProperties();\n      }\n    });\n    this.radiusChangedObserver.observe(this.el.nativeElement, {\n      attributes: true,\n      attributeFilter: GaugeCircleDirective.OBSERVING_ATTRIBUTES,\n    });\n  }\n\n  @Input() set pfcGaugeCircle(conf: IGaugeCircleConf) {\n    this.value = Math.max(0, conf.value);\n    this.maxValue = conf.maxValue;\n\n    this.color = conf.color;\n\n    this.blink = !!conf.blink;\n    this.recalculate();\n  }\n\n  ngAfterViewInit() {\n    this.scanCircleProperties();\n  }\n\n  ngOnDestroy(): void {\n    this.radiusChangedObserver.disconnect();\n  }\n\n  ngOnInit(): void {\n    this.scanCircleProperties();\n  }\n\n  private recalculate(): void {\n    if (this.radius == null || this.value == null) {\n      return;\n    }\n\n    const circumference = this.radius * 2 * Math.PI;\n    const arc = circumference * this.value / this.maxValue;\n\n    this.el.nativeElement.setAttribute(GaugeCircleDirective.STROKE_DASHARRAY, `${arc} ${circumference - arc}`);\n    this.el.nativeElement.setAttribute(GaugeCircleDirective.TRANSFORM, `rotate(-90, ${this.cx}, ${this.cy})`);\n  }\n\n  private scanCircleProperties() {\n    const newRadius = this.el.nativeElement.r.baseVal.value;\n    const newCx = this.el.nativeElement.cx.baseVal.value;\n    const newCy = this.el.nativeElement.cy.baseVal.value;\n\n    if (newRadius === this.radius && newCx === this.cx && newCy === this.cy) {\n      return;\n    }\n\n    this.radius = newRadius;\n    this.cx = newCx;\n    this.cy = newCy;\n\n    this.recalculate();\n    this.cdr.detectChanges();\n  }\n\n}\n",
            "selector": "[pfcGaugeCircle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "pfcGaugeCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IGaugeCircleConf",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "blink",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "color",
                    "defaultValue": "GaugeCircleDirective.DEFAULT_COLOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "cx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "DEFAULT_COLOR",
                    "defaultValue": "'#ee1d1d'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "maxValue",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "OBSERVING_ATTRIBUTES",
                    "defaultValue": "['r', 'cx', 'cy']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "radiusChangedObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MutationObserver",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "STROKE_DASHARRAY",
                    "defaultValue": "'stroke-dasharray'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "TRANSFORM",
                    "defaultValue": "'transform'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "recalculate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scanCircleProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<SVGCircleElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<SVGCircleElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "pfcGaugeCircle": {
                    "name": "pfcGaugeCircle",
                    "setSignature": {
                        "name": "pfcGaugeCircle",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "conf",
                                "type": "IGaugeCircleConf",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "conf",
                                "type": "IGaugeCircleConf",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AddDishComponent",
            "id": "component-AddDishComponent-456549424702cbe301beea3a134587c40dfdfb0af88f60233113245aa972485f02b2551f17c68e8851d8e5b05a1d3b22415d05b64b2c22eb88618847a5a68155",
            "file": "src/app/features/add-dish/add-dish.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-add-dish",
            "styleUrls": [
                "./add-dish.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-dish.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addIngredient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<AddDish.AddIngredientPayload>",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddDishState.addIngredient"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "compareIngredientsFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "defaultMeasurement",
                    "defaultValue": "{\n    foodId: null,\n    id: null,\n    toGramMultiplier: 1,\n    name: 'g',\n    defaultValue: 100,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeasurement",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "deleteIngredient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<AddDish.DeleteIngredientPayload>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddDishState.deleteIngredient"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddDishFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "measurements",
                    "defaultValue": "[\n    this.defaultMeasurement,\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeasurement[]",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "nextIngredientIdx",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[][]",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "AddDishState.options"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "saveDish",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<AddDish.SaveDishPayload>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddDishState.saveDish"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchIngredientOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<AddDish.SearchIngredientOptionsPayload>",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddDishState.searchIngredientOptions"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "trackFoodByIdFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<IFood>",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "trackIngredientByIndexFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<AddDish.IAddDishStateIngredient>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleAddIngredientClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDeleteClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ingredientIndexById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, OnDestroy, OnInit, TrackByFunction} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {AddDishState} from './add-dish.state';\nimport {AddDish} from './add-dish.state-models';\nimport {hasActionsExecuting} from '@ngxs-labs/actions-executing';\nimport {DialogPageHeadingComponent} from '../../components/dialog-page-heading/dialog-page-heading.component';\nimport {FormArray, FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {debounceTime, distinctUntilChanged, filter, Subject, take, takeUntil} from 'rxjs';\nimport {IFood, IMeasurement} from '../../commons/models/domain.models';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {Store} from '@ngxs/store';\nimport {DateTime} from 'luxon';\n\ntype IngredientFormGroup = FormGroup<{\n  ingredientSearch: FormControl<string>;\n  ingredient: FormControl<IFood>;\n  weight: FormControl<number>;\n  measurement: FormControl<IMeasurement>;\n  id: FormControl<number>;\n}>;\ntype AddDishFormGroup = FormGroup<{\n  id: FormControl<number>;\n  foodId: FormControl<number>;\n  dishName: FormControl<string>;\n  ingredients: FormArray<IngredientFormGroup>;\n  weight: FormControl<number>;\n}>;\n\n@Component({\n  selector: 'pfc-add-dish',\n  standalone: true,\n  imports: [CommonModule, DialogPageHeadingComponent, ReactiveFormsModule, MatFormFieldModule, MatInputModule, TranslateModule, MatSelectModule, NgxMatSelectSearchModule, MatButtonModule, MatIconModule],\n  templateUrl: './add-dish.component.html',\n  styleUrls: ['./add-dish.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddDishComponent implements OnInit, OnDestroy {\n  protected readonly defaultMeasurement: IMeasurement = {\n    foodId: null,\n    id: null,\n    toGramMultiplier: 1,\n    name: 'g',\n    defaultValue: 100,\n  };\n\n  protected readonly measurements: IMeasurement[] = [\n    this.defaultMeasurement,\n  ];\n\n  @Emitter(AddDishState.addIngredient)\n  private addIngredient: Emittable<AddDish.AddIngredientPayload>;\n  @Emitter(AddDishState.deleteIngredient)\n  private deleteIngredient: Emittable<AddDish.DeleteIngredientPayload>;\n  @Emitter(AddDishState.searchIngredientOptions)\n  private searchIngredientOptions: Emittable<AddDish.SearchIngredientOptionsPayload>;\n  @Emitter(AddDishState.saveDish)\n  private saveDish: Emittable<AddDish.SaveDishPayload>;\n\n  @ViewSelectSnapshot(AddDishState.options)\n  protected options: IFood[][];\n  @ViewSelectSnapshot(hasActionsExecuting([{type: AddDish.LOAD_RECIPE}, {type: AddDish.LOAD_DISH}]))\n  protected isLoading: boolean;\n\n  private destroyed$ = new Subject<void>();\n\n  protected form: AddDishFormGroup;\n  private nextIngredientIdx = 0;\n\n  protected trackIngredientByIndexFn: TrackByFunction<AddDish.IAddDishStateIngredient> = (_, i) => `${i.index}`;\n  protected compareIngredientsFn = (ing1: AddDish.IAddDishStateIngredient, ing2: AddDish.IAddDishStateIngredient) => ing1?.index === ing2?.index;\n  protected trackFoodByIdFn: TrackByFunction<IFood> = (_, item) => item?.id;\n\n  constructor(private fb: FormBuilder, private store: Store) {\n    this.form = fb.group({\n      id: [null as number],\n      foodId: [null as number],\n      dishName: [null as string, Validators.required],\n      weight: [0, Validators.required],\n      ingredients: fb.array<IngredientFormGroup>([]),\n    });\n  }\n\n  ngOnInit(): void {\n    this.store.select(AddDishState.initialization)\n      .pipe(\n        filter(value => value != null),\n        take(1),\n      )\n      .subscribe(init => {\n        this.form.patchValue({\n          id: init.id,\n          foodId: init.foodId,\n          dishName: init.name,\n          weight: init.cookedWeight,\n        });\n        init.ingredients.forEach((ing, idx) => {\n          this.addIngredient.emit();\n          this.handleAddIngredientClicked();\n          this.form.controls.ingredients.at(idx).patchValue({\n            ingredient: {...ing},\n            weight: ing.ingredientWeight,\n          });\n        });\n      });\n  }\n\n  protected get formIngredients(): FormArray<IngredientFormGroup> {\n    return this.form.controls.ingredients;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(null);\n    this.destroyed$.complete();\n  }\n\n  handleSubmit() {\n    if (this.form.invalid) {\n      console.warn('Invalid form submitted');\n      return;\n    }\n    const form = this.form.value;\n    this.saveDish.emit({\n      name: form.dishName,\n      foodId: form.foodId,\n      ingredients: form.ingredients.map(i => ({\n        id: i.ingredient.id,\n        ingredientWeight: i.weight,\n      })),\n      cookedWeight: form.weight,\n      cookedOn: DateTime.now(),\n    });\n  }\n\n  handleDeleteClicked(id: number) {\n    const idx = this.ingredientIndexById(id);\n    this.deleteIngredient.emit(idx);\n    this.formIngredients.removeAt(idx);\n  }\n\n  handleAddIngredientClicked() {\n    const ingredientFg: IngredientFormGroup = this.fb.group({\n      ingredientSearch: [null as string],\n      ingredient: [null as IFood, Validators.required],\n      weight: [this.defaultMeasurement.defaultValue, [Validators.required, Validators.min(1)]],\n      measurement: [this.defaultMeasurement, [Validators.required]],\n      id: [this.nextIngredientIdx++],\n    });\n\n    ingredientFg.controls.measurement.valueChanges.subscribe(measurement => {\n      ingredientFg.patchValue({\n        weight: measurement.defaultValue,\n      });\n    });\n\n    ingredientFg.valueChanges.pipe(\n      takeUntil(this.destroyed$),\n      debounceTime(300),\n      distinctUntilChanged((previous, current) => previous.ingredientSearch === current.ingredientSearch),\n    ).subscribe(ing => this.searchIngredientOptions.emit({\n      filter: ing.ingredientSearch,\n      index: this.ingredientIndexById(ing.id),\n      id: ing.ingredient.id,\n    }));\n\n    this.addIngredient.emit();\n    this.formIngredients.push(ingredientFg);\n  }\n\n  private ingredientIndexById(id: number) {\n    return this.formIngredients.value\n      .map((ing, idx) => ([ing.id, idx]))\n      .filter(v => v[0] === id)\n      .map(i => i[1])\n      [0];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n}\n\n.body {\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n\n  > * {\n    padding-left: 15px;\n    padding-right: 15px;\n  }\n}\n\n.ingredient {\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  padding-top: 5px;\n\n  &:nth-child(even) {\n    background-color: #EFEFEF;\n  }\n\n  &__delete-btn {\n    flex-grow: 0;\n    flex-shrink: 0;\n    margin-bottom: 24px;\n  }\n\n  &__select {\n    flex-grow: 1;\n  }\n\n  &__select-group {\n    display: flex;\n    flex-direction: row;\n    justify-content: stretch;\n    align-items: center;\n  }\n\n  &__weight {\n    display: flex;\n    flex-direction: row;\n    gap: 5px;\n\n    &-input {\n      flex-basis: 35%;\n\n    }\n\n    &-measurement {\n      flex-basis: 65%;\n    }\n  }\n}\n\n.buttons {\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  margin-top: 10px;\n  gap: 10px;\n}\n",
                    "styleUrl": "./add-dish.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formIngredients": {
                    "name": "formIngredients",
                    "getSignature": {
                        "name": "formIngredients",
                        "type": "",
                        "returnType": "FormArray<IngredientFormGroup>",
                        "line": 115
                    }
                }
            },
            "templateData": "<pfc-dialog-page-heading [title]=\"'add-dish.title'\"></pfc-dialog-page-heading>\n\n<form [formGroup]=\"form\"\n      (ngSubmit)=\"handleSubmit()\"\n      *ngIf=\"!isLoading\">\n  <div class=\"body\">\n    <mat-form-field>\n      <mat-label>{{ 'add-dish.dish-name-label' | translate }}</mat-label>\n      <input matInput\n             formControlName=\"dishName\"\n             type=\"text\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>{{'add-dish.cooked-weight-label' | translate}}</mat-label>\n      <input matInput\n             formControlName=\"weight\"\n             type=\"number\">\n    </mat-form-field>\n\n    <ng-container formArrayName=\"ingredients\">\n      <div class=\"ingredient\"\n           [formGroupName]=\"idx\"\n           *ngFor=\"let ing of formIngredients.value; let idx = index; trackBy: trackIngredientByIndexFn\">\n        <div class=\"ingredient__select-group\">\n          <mat-form-field class=\"ingredient__select\">\n            <mat-select formControlName=\"ingredient\"\n                        [compareWith]=\"compareIngredientsFn\">\n              <!--              <mat-label>{{ 'add-dish.ingredient-select-label' | translate }}</mat-label>-->\n              <mat-option>\n                <ngx-mat-select-search formControlName=\"ingredientSearch\"\n                                       [placeholderLabel]=\"'add-dish.ingredient-search-placeholder' | translate\"/>\n              </mat-option>\n              <!-- Currently selected option -->\n              <mat-option [value]=\"ing.ingredient\"\n                          [disabled]=\"true\">\n                {{ ing.ingredient?.name }}\n              </mat-option>\n              <mat-option *ngFor=\"let opt of options[idx]; trackBy:trackFoodByIdFn\"\n                          [value]=\"opt\"\n                          [disabled]=\"false\">\n                {{ opt?.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <button class=\"ingredient__delete-btn\"\n                  type=\"button\"\n                  mat-icon-button\n                  color=\"warn\"\n                  (click)=\"handleDeleteClicked(ing.id)\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </div>\n        <div class=\"ingredient__weight\">\n          <mat-form-field class=\"ingredient__weight-input\">\n            <input matInput\n                   formControlName=\"weight\"\n                   type=\"number\">\n          </mat-form-field>\n          <mat-form-field class=\"ingredient__weight-measurement\">\n            <mat-select formControlName=\"measurement\">\n              <mat-option [value]=\"defaultMeasurement\">\n                {{'measurements.' + defaultMeasurement.name | translate}}\n              </mat-option>\n              <mat-option *ngFor=\"let measurement of formIngredients.at(idx).value.ingredient.measurements\"\n                          [value]=\"measurement\">\n                {{ 'measurements.' + measurement.name | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"buttons\">\n      <button mat-raised-button\n              type=\"button\"\n              (click)=\"handleAddIngredientClicked()\">\n        {{ 'add-dish.add-ingredient-btn' | translate }}\n      </button>\n      <button mat-raised-button\n              color=\"primary\"\n              [disabled]=\"form.invalid\"\n              type=\"submit\">\n        {{ 'add-dish.save-btn' | translate }}\n      </button>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "AddFoodComponent",
            "id": "component-AddFoodComponent-c7c3a2ed43cc16592881ab7a24ec5c5befc3ca01424b242aefe535e015b368553c9c7885a0e2b7f3fe134f9ac50e6920b34004ba6a19731a5968eeeeece063a8",
            "file": "src/app/features/add-food/add-food.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-add-food",
            "styleUrls": [
                "./add-food.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-food.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$destroy",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ceilPfcc",
                    "defaultValue": "ceilPfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "compareIngredientsFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "CREATE_TITLE",
                    "defaultValue": "'add-food.title-create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "defaultMeasurement",
                    "defaultValue": "{\n    id: null,\n    name: 'g',\n    foodId: null,\n    defaultValue: 100,\n    toGramMultiplier: 1,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeasurement",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "EDIT_TITLE",
                    "defaultValue": "'add-food.title-edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<AddFoodForm>",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ingredientsOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[][]",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "AddFoodState.ingredients"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "JSON",
                    "defaultValue": "JSON",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 304,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "multiplyPfcc",
                    "defaultValue": "multiplyPfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "nextIngredientIndex",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "nextMeasurementIndex",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "reloadIngredientOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<AddFood.ReloadIngredientOptionsPayload>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddFoodState.reloadIngredientOptions"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "saveFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<AddFood.SaveFoodPayload>",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddFoodState.saveFood"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "AddFoodComponent.CREATE_TITLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "trackByIndexFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "trackFoodByIdFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<IFood>",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "usedIngredientsIds$",
                    "defaultValue": "new BehaviorSubject<number[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleAddIngredientClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "handleAddMeasurementClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "handleNutrientInputClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNutrientInputFocus",
                    "args": [
                        {
                            "name": "formElementName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "formElementName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRecipeSwitcherChanged",
                    "args": [
                        {
                            "name": "data",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemoveIngredientClick",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "initializeFromData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "recalculateUsedIngredients",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "IFood[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "IFood[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, TrackByFunction} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DialogPageHeadingComponent} from '../../components/dialog-page-heading/dialog-page-heading.component';\nimport {ceilPfcc, multiplyPfcc, sumPfccs, withDefaults} from '../../commons/functions';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatOptionModule} from '@angular/material/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSlideToggleChange, MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\nimport {IFood, IIngredient, IMeasurement} from '../../commons/models/domain.models';\nimport {Store} from '@ngxs/store';\nimport {AddFoodState} from './add-food.state';\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {BehaviorSubject, debounceTime, filter, map, skipWhile, Subject, take, takeUntil} from 'rxjs';\nimport {emptyPfcc, IPfcc} from '../../commons/models/common.models';\nimport {Emitter} from '@ngxs-labs/emitter';\nimport {AddFood} from './add-food.state-models';\nimport {TranslateModule} from '@ngx-translate/core';\n\ntype AddFoodIngredientForm = FormGroup<{\n  ingredientSearch: FormControl<string>;\n  ingredient: FormControl<IFood>;\n  measurement: FormControl<IMeasurement>;\n  weight: FormControl<number>;\n  index: FormControl<number>;\n}>;\n\ntype AddFoodMeasurementForm = FormGroup<{\n  id: FormControl<number>;\n  name: FormControl<string>;\n  multiplier: FormControl<number>;\n  defaultValue: FormControl<number>;\n  index: FormControl<number>;\n}>;\n\ntype AddFoodForm = {\n  id: FormControl<number>;\n  name: FormControl<string>;\n  description: FormControl<string>;\n  isRecipe: FormControl<boolean>;\n  hidden: FormControl<boolean>;\n  pfcc: FormGroup<{ [p in keyof IPfcc]: FormControl<IPfcc[p]> }>;\n  ingredients: FormArray<AddFoodIngredientForm>;\n  measurements: FormArray<AddFoodMeasurementForm>;\n};\n\n@Component({\n  selector: 'pfc-add-food',\n  standalone: true,\n  imports: [\n    CommonModule, DialogPageHeadingComponent, FormsModule, MatButtonModule, MatFormFieldModule, MatIconModule, MatInputModule, MatOptionModule, MatSelectModule, MatSlideToggleModule, NgxMatSelectSearchModule, ReactiveFormsModule, TranslateModule,\n  ],\n  templateUrl: './add-food.component.html',\n  styleUrls: ['./add-food.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddFoodComponent implements OnInit, OnDestroy {\n  private static readonly CREATE_TITLE = 'add-food.title-create';\n  private static readonly EDIT_TITLE = 'add-food.title-edit';\n\n  protected readonly ceilPfcc = ceilPfcc;\n  protected readonly multiplyPfcc = multiplyPfcc;\n  protected readonly defaultMeasurement: IMeasurement = {\n    id: null,\n    name: 'g',\n    foodId: null,\n    defaultValue: 100,\n    toGramMultiplier: 1,\n  };\n\n  @ViewSelectSnapshot(AddFoodState.ingredients)\n  protected ingredientsOptions: IFood[][];\n\n  @Emitter(AddFoodState.reloadIngredientOptions)\n  private reloadIngredientOptions: EventEmitter<AddFood.ReloadIngredientOptionsPayload>;\n  @Emitter(AddFoodState.saveFood)\n  protected saveFood: EventEmitter<AddFood.SaveFoodPayload>;\n\n  protected title = AddFoodComponent.CREATE_TITLE;\n  protected form: FormGroup<AddFoodForm>;\n  protected usedIngredientsIds$ = new BehaviorSubject<number[]>([]);\n  private nextIngredientIndex = 1;\n  private nextMeasurementIndex = 1;\n\n  private $destroy = new Subject<void>();\n\n  protected trackByIndexFn: TrackByFunction<{\n    index: number\n  }> = (_, i) => `${i.index}`;\n  protected compareIngredientsFn = (ing1: any, ing2: any) => ing1?.id === ing2?.id;\n  protected trackFoodByIdFn: TrackByFunction<IFood> = (_, item) => item?.id;\n\n  constructor(private fb: FormBuilder, private store: Store) {\n  }\n\n  protected get isRecipe(): boolean {\n    return this.form.value.isRecipe;\n  }\n\n  protected get ceiledPfcc(): IPfcc {\n    return ceilPfcc(withDefaults(this.form.value.pfcc, emptyPfcc));\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n\n    this.form.controls.ingredients.valueChanges\n      .pipe(takeUntil(this.$destroy))\n      .subscribe(ingredients => {\n        this.recalculateUsedIngredients(ingredients.map(i => i.ingredient));\n      });\n\n    this.form.valueChanges.pipe(\n      filter(form => form.isRecipe),\n      map(form => form.ingredients.filter(i => i?.ingredient != null)),\n    ).subscribe(ingredients => {\n      this.form.patchValue({\n        pfcc: sumPfccs(...ingredients.map(i => multiplyPfcc(i.ingredient.pfcc, i.weight / 100))),\n      }, {emitEvent: false});\n    });\n\n    this.form.controls.ingredients.valueChanges.pipe(\n      takeUntil(this.$destroy),\n      debounceTime(100),\n      map(ingredients => ingredients.map(i => ({\n        searchString: i.ingredientSearch,\n        selectedIngredient: i.ingredient,\n      })) as AddFood.ReloadIngredientOptionsPayload),\n    ).subscribe(this.reloadIngredientOptions.emit);\n\n    this.initializeFromData();\n\n    this.form.valueChanges.subscribe(v => console.log(v));\n  }\n\n  ngOnDestroy() {\n    this.$destroy.next(null);\n    this.$destroy.complete();\n    this.usedIngredientsIds$.complete();\n  }\n\n  protected handleRemoveIngredientClick(idx: number) {\n    this.form.controls.ingredients.removeAt(idx);\n  }\n\n  protected handleAddMeasurementClick() {\n    const measurementFormGroup = this.fb.group({\n      id: this.fb.control(null as number),\n      name: this.fb.control('', Validators.required),\n      multiplier: this.fb.control(100, Validators.required),\n      defaultValue: this.fb.control(1, Validators.required),\n      index: this.fb.control(this.nextMeasurementIndex++),\n    });\n\n    this.form.controls.measurements.push(measurementFormGroup);\n  }\n\n  protected handleAddIngredientClick() {\n    const ingredientFormGroup = this.fb.group({\n      ingredient: this.fb.control(null as IFood),\n      ingredientSearch: this.fb.control(''),\n      measurement: this.fb.control(this.defaultMeasurement),\n      weight: this.fb.control(100),\n      index: this.fb.control(this.nextIngredientIndex++),\n    });\n\n    ingredientFormGroup.controls.measurement.valueChanges\n      .subscribe(m => ingredientFormGroup.patchValue({\n        weight: m.defaultValue,\n      }));\n    ingredientFormGroup.controls.ingredient.valueChanges\n      .subscribe(_ => ingredientFormGroup.controls.measurement.setValue(this.defaultMeasurement));\n\n    this.form.controls.ingredients.push(ingredientFormGroup);\n  }\n\n  protected handleNutrientInputFocus(formElementName: keyof IPfcc) {\n    if (this.form.controls.pfcc.controls[formElementName].pristine && this.form.controls.pfcc.controls[formElementName].value === 0) {\n      this.form.controls.pfcc.controls[formElementName].setValue(null);\n    }\n  }\n\n  protected handleNutrientInputClick(event: MouseEvent) {\n    if (event.target instanceof HTMLInputElement) {\n      event.target.select();\n    }\n  }\n\n  protected handleRecipeSwitcherChanged(data: MatSlideToggleChange) {\n    if (data.checked) {\n      this.form.controls.pfcc.setValue(emptyPfcc);\n    } else {\n      this.form.controls.ingredients.clear();\n    }\n  }\n\n  protected handleSubmit() {\n    const f = this.form.value;\n    const foodToSave: IFood = {\n      id: f.id,\n      name: f.name,\n      description: f.description,\n      type: f.isRecipe ? 'RECIPE' : 'INGREDIENT',\n      hidden: f.hidden,\n      ownedByUser: true,\n      pfcc: withDefaults(f.pfcc, emptyPfcc),\n      ingredients: !f.isRecipe ? null : f.ingredients.map<IIngredient>(i => ({\n        ...i.ingredient,\n        ingredientWeight: i.weight * i.measurement.toGramMultiplier,\n      })),\n      measurements: f.measurements.map<IMeasurement>(m => ({\n        id: m.id,\n        foodId: f.id,\n        name: m.name,\n        toGramMultiplier: m.multiplier,\n        defaultValue: m.defaultValue,\n      })),\n    };\n\n    this.saveFood.emit(foodToSave);\n  }\n\n  private initializeFromData() {\n    this.store.select(AddFoodState.initializationVector)\n      .pipe(\n        skipWhile(food => food == null),\n        takeUntil(this.$destroy),\n        take(1),\n      )\n      .subscribe(food => {\n        if (food.id == null) {\n          this.form.patchValue({\n            name: food.name,\n            isRecipe: food?.type === 'RECIPE' ?? false,\n          });\n        } else {\n          this.title = AddFoodComponent.EDIT_TITLE;\n          this.form.controls.ingredients.clear();\n\n          food.ingredients?.forEach(_ => this.handleAddIngredientClick());\n          food.measurements?.forEach(_ => this.handleAddMeasurementClick());\n\n          const ingredients = (food.ingredients ?? []).map((i => ({\n            ingredient: i,\n            ingredientSearch: null,\n            weight: i.ingredientWeight,\n            index: this.nextIngredientIndex++,\n          })));\n          const measurements = (food.measurements ?? []).map(m => ({\n            id: m.id,\n            name: m.name,\n            multiplier: m.toGramMultiplier,\n            defaultValue: m.defaultValue,\n            index: this.nextMeasurementIndex++,\n          }));\n\n          this.form.patchValue({\n            id: food.id,\n            name: food.name,\n            description: food.description,\n            isRecipe: food.type === 'RECIPE',\n            hidden: food.hidden,\n            ingredients,\n            measurements,\n          });\n        }\n      });\n  }\n\n  private createForm() {\n    this.form = this.fb.group<AddFoodForm>({\n      id: this.fb.control(null as number),\n      isRecipe: this.fb.control(false),\n      name: this.fb.control(null as string, Validators.required),\n      description: this.fb.control(null as string),\n      hidden: this.fb.control(false),\n      pfcc: this.fb.group({\n        protein: [0, [Validators.required, Validators.min(0)]],\n        fat: [0, [Validators.required, Validators.min(0)]],\n        carbohydrates: [0, [Validators.required, Validators.min(0)]],\n        calories: [0, [Validators.required, Validators.min(0)]],\n      }),\n      ingredients: new FormArray<AddFoodIngredientForm>([]),\n      measurements: new FormArray<AddFoodMeasurementForm>([]),\n    });\n  }\n\n  private recalculateUsedIngredients(ingredients: IFood[]) {\n    this.usedIngredientsIds$.next(ingredients.map(i => i?.id).filter(id => id != null));\n  }\n\n  protected readonly JSON = JSON;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 5px;\n  //overflow: hidden;\n}\n\n.main-form {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n.name {\n  width: 100%;\n}\n\n.description {\n  width: 100%;\n}\n\n.recipe-switcher {\n  width: 100%;\n  margin-bottom: 15px;\n}\n\n.hidden-switcher {\n  width: 100%;\n  margin-bottom: 15px;\n}\n\n.pfcc-container {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 10px;\n\n}\n\n.ingredients {\n  display: flex;\n  flex-direction: column;\n\n  > * {\n    width: 100%;\n  }\n}\n\n.ingredient {\n  display: flex;\n  width: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n\n  &-edit_row {\n    display: flex;\n    flex-direction: row;\n    gap: 5px;\n    flex-wrap: wrap;\n    align-items: baseline;\n  }\n\n  &-pfcc_row {\n    display: flex;\n    flex-direction: row;\n    gap: 5px;\n    flex-wrap: wrap;\n    align-items: baseline;\n\n    span {\n      font-size: 0.85rem;\n      margin-bottom: 6px;\n    }\n  }\n\n  &-select {\n    flex-basis: calc(100% - 53px);\n  }\n\n  &-weight-group {\n    display: flex;\n    flex-direction: row;\n    gap: 5px;\n    width: calc(100% - 53px);\n  }\n\n  &-measurement {\n    flex-basis: 70%;\n  }\n\n  &-weight {\n    flex-basis: 30%;\n  }\n}\n\n\n.remove-ingredient-btn {\n  flex: 0 0 48px;\n  width: 48px;\n}\n\n.add-ingredient-btn {\n  margin-bottom: 10px;\n}\n\n.add-measurement-btn {\n  margin-bottom: 10px;\n}\n\n.actions {\n  width: 100%;\n  box-sizing: border-box;\n\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n\n.pfcc-values {\n  display: grid;\n  grid-template-columns: auto 1fr auto 1fr;\n  gap: 5px;\n  margin-bottom: 10px;\n\n  &__label, &__value {\n    margin: 0;\n  }\n\n  &__label {\n    place-self: center end;\n  }\n\n  &__value {\n    place-self: center start;\n  }\n}\n\n.measurements {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.measurement {\n  --gap: 5px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: var(--gap);\n}\n\n.measurement-name {\n  flex-basis: 100%;\n}\n\n.measurement-multiplier {\n  flex-basis: calc(50% - var(--gap) / 2);\n}\n\n.measurement-default {\n  flex-basis: calc(50% - var(--gap) / 2);\n}\n",
                    "styleUrl": "./add-food.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 103,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isRecipe": {
                    "name": "isRecipe",
                    "getSignature": {
                        "name": "isRecipe",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 108
                    }
                },
                "ceiledPfcc": {
                    "name": "ceiledPfcc",
                    "getSignature": {
                        "name": "ceiledPfcc",
                        "type": "",
                        "returnType": "IPfcc",
                        "line": 112
                    }
                }
            },
            "templateData": "<pfc-dialog-page-heading [title]=\"title\"></pfc-dialog-page-heading>\n\n<form [formGroup]=\"form\"\n      (ngSubmit)=\"handleSubmit()\"\n      class=\"main-form\">\n\n  <input hidden\n         formControlName=\"id\">\n\n  <mat-form-field class=\"name\">\n    <mat-label>{{ 'add-food.name-input-label' | translate }}</mat-label>\n    <input type=\"text\"\n           matInput\n           [placeholder]=\"'add-food.name-input-placeholder' | translate\"\n           formControlName=\"name\">\n  </mat-form-field>\n\n  <mat-form-field class=\"description\">\n    <mat-label>{{ 'add-food.description-input-label' | translate }}</mat-label>\n    <textarea type=\"text\"\n              matInput\n              rows=\"5\"\n              [placeholder]=\"'add-food.description-input-placeholder' | translate\"\n              formControlName=\"description\"></textarea>\n  </mat-form-field>\n\n  <mat-slide-toggle #recipeSwitcher\n                    (change)=\"handleRecipeSwitcherChanged($event)\"\n                    class=\"recipe-switcher\"\n                    formControlName=\"isRecipe\">\n    {{ 'add-food.recipe-switcher-label' | translate }}\n  </mat-slide-toggle>\n\n  <mat-slide-toggle class=\"hidden-switcher\"\n                    formControlName=\"hidden\">\n    {{ 'add-food.hidden-switcher-label' | translate }}\n  </mat-slide-toggle>\n\n  <div class=\"pfcc-container\"\n       formGroupName=\"pfcc\"\n       *ngIf=\"!isRecipe\">\n    <mat-form-field>\n      <mat-label>{{ 'add-food.protein-input-label' | translate }}</mat-label>\n      <input matInput\n             type=\"number\"\n             formControlName=\"protein\"\n             (click)=\"handleNutrientInputClick($event)\"\n             (focus)=\"handleNutrientInputFocus('protein')\"\n             [readonly]=\"recipeSwitcher.checked\"\n             [placeholder]=\"'add-food.protein-input-placeholder' | translate\">\n\n      <span matSuffix>{{ 'common.gram-sign' | translate }} &nbsp;</span>\n      <mat-hint>{{ 'add-food.pfcc-inputs-hint' | translate }}</mat-hint>\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>{{ 'add-food.fat-input-label' | translate }}</mat-label>\n\n      <input matInput\n             type=\"number\"\n             formControlName=\"fat\"\n             (click)=\"handleNutrientInputClick($event)\"\n             (focus)=\"handleNutrientInputFocus('fat')\"\n             [readonly]=\"recipeSwitcher.checked\"\n             [placeholder]=\"'add-food.fat-input-placeholder' | translate\">\n\n      <span matSuffix>{{ 'common.gram-sign' | translate }} &nbsp;</span>\n      <mat-hint>{{ 'add-food.pfcc-inputs-hint' | translate }}</mat-hint>\n    </mat-form-field>\n\n\n    <mat-form-field>\n      <mat-label>{{ 'add-food.carbohydrates-input-label' | translate }}</mat-label>\n      <input matInput\n             type=\"number\"\n             formControlName=\"carbohydrates\"\n             (click)=\"handleNutrientInputClick($event)\"\n             (focus)=\"handleNutrientInputFocus('carbohydrates')\"\n             [readonly]=\"recipeSwitcher.checked\"\n             [placeholder]=\"'add-food.carbohydrates-input-placeholder' | translate\">\n\n      <span matSuffix>{{ 'common.gram-sign' | translate }} &nbsp;</span>\n      <mat-hint>{{ 'add-food.pfcc-inputs-hint' | translate }}</mat-hint>\n    </mat-form-field>\n\n\n    <mat-form-field>\n      <mat-label>{{ 'add-food.calories-input-label' | translate }}</mat-label>\n      <input matInput\n             type=\"number\"\n             formControlName=\"calories\"\n             (click)=\"handleNutrientInputClick($event)\"\n             (focus)=\"handleNutrientInputFocus('calories')\"\n             [readonly]=\"recipeSwitcher.checked\"\n             [placeholder]=\"'add-food.calories-input-placeholder' | translate\">\n\n      <span matSuffix>{{ 'common.calories-sign' | translate }} &nbsp;</span>\n      <mat-hint>{{ 'add-food.pfcc-inputs-hint' | translate }}</mat-hint>\n    </mat-form-field>\n  </div>\n\n  <ng-container *ngIf=\"isRecipe\">\n    <div class=\"pfcc-values pfcc-values\">\n      <p class=\"pfcc-values__label\">{{ 'common.protein' | translate }} :</p>\n      <p class=\"pfcc-values__value\">{{ ceiledPfcc.protein }}</p>\n\n      <p class=\"pfcc-values__label\">{{ 'common.fat' | translate }} :</p>\n      <p class=\"pfcc-values__value\">{{ ceiledPfcc.fat }}</p>\n\n      <p class=\"pfcc-values__label\">{{ 'common.carbohydrates' | translate }} :</p>\n      <p class=\"pfcc-values__value\">{{ ceiledPfcc.carbohydrates }}</p>\n\n      <p class=\"pfcc-values__label\">{{ 'common.calories' | translate }} :</p>\n      <p class=\"pfcc-values__value\">{{ ceiledPfcc.calories }}</p>\n    </div>\n\n    <h2>{{ 'add-food.ingredients-header' | translate }}</h2>\n\n    <div class=\"ingredients\"\n         formArrayName=\"ingredients\">\n      <div class=\"ingredient\"\n           *ngFor=\"let fi of form.value.ingredients; index as idx; trackBy: trackByIndexFn\">\n        <div class=\"ingredient-pfcc_row\">\n            <span *ngIf=\"fi != null && fi.ingredient != null\">\n              {{ 'common.pfcc-sign' | translate }} :\n              {{ 'common.pfcc-values' | translate:ceilPfcc(multiplyPfcc(fi.ingredient.pfcc, fi.weight / 100), 0) }}\n            </span>\n        </div>\n        <div class=\"ingredient-edit_row\"\n             [formGroupName]=\"idx\">\n          <mat-form-field class=\"ingredient-select\">\n            <mat-label>{{ 'add-food.ingredient-select-label' | translate }}</mat-label>\n            <mat-select [placeholder]=\"'add-food.ingredient-select-placeholder' | translate\"\n                        [compareWith]=\"compareIngredientsFn\"\n                        formControlName=\"ingredient\">\n              <mat-option>\n                <ngx-mat-select-search formControlName=\"ingredientSearch\"\n                                       [placeholderLabel]=\"'add-food.ingredient-search-placeholder' | translate\"/>\n              </mat-option>\n              <mat-option *ngFor=\"let ingredient of ingredientsOptions[idx];\n                            trackBy:trackFoodByIdFn \"\n                          [value]=\"ingredient\"\n                          [disabled]=\"(usedIngredientsIds$ | async)!.includes(ingredient?.id)\">\n                {{ ingredient?.name }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <button mat-icon-button\n                  class=\"remove-ingredient-btn\"\n                  color=\"warn\"\n                  type=\"button\"\n                  (click)=\"handleRemoveIngredientClick(idx)\">\n            <mat-icon>delete</mat-icon>\n          </button>\n\n          <div class=\"ingredient-weight-group\">\n\n            <mat-form-field class=\"ingredient-weight\">\n              <mat-label>{{ 'add-food.ingredient-weight-label' | translate }}</mat-label>\n              <input matInput\n                     formControlName=\"weight\"\n                     type=\"number\">\n            </mat-form-field>\n\n            <mat-form-field class=\"ingredient-measurement\">\n              <mat-label>{{ 'add-food.ingredient-measurement-label' | translate }}</mat-label>\n              <mat-select [placeholder]=\"'placeholder'\"\n                          formControlName=\"measurement\">\n                <mat-option [value]=\"defaultMeasurement\">\n                  {{ 'measurements.' + defaultMeasurement.name | translate }}\n                </mat-option>\n                <mat-option *ngFor=\"let m of form.value.ingredients[idx].ingredient?.measurements ?? []\"\n                            [value]=\"m\">\n                  {{ 'measurements.' + m.name | translate }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n\n      <button mat-stroked-button\n              class=\"add-ingredient-btn\"\n              color=\"primary\"\n              type=\"button\"\n              (click)=\"handleAddIngredientClick()\">\n        {{ 'add-food.add-ingredient-btn' | translate }}\n      </button>\n    </div>\n  </ng-container>\n\n  <h2>{{ 'add-food.additional-measurements-header' | translate }}</h2>\n\n  <div class=\"measurements\"\n       formArrayName=\"measurements\">\n    <div class=\"measurement\"\n         *ngFor=\"let m of form.value.measurements; index as idx; trackBy: trackByIndexFn \"\n         [formGroupName]=\"idx\">\n\n      <input hidden\n             formControlName=\"id\">\n\n      <mat-form-field class=\"measurement-name\">\n        <mat-label>{{ 'add-food.measurement-name-label' | translate }}</mat-label>\n        <input matInput\n               formControlName=\"name\"\n               type=\"text\">\n      </mat-form-field>\n      <mat-form-field class=\"measurement-multiplier\">\n        <mat-label>{{ 'add-food.measurement-multiplier-label' | translate }}</mat-label>\n        <input matInput\n               formControlName=\"multiplier\"\n               type=\"number\">\n      </mat-form-field>\n      <mat-form-field class=\"measurement-default\">\n        <mat-label>{{ 'add-food.measurement-default-label' | translate }}</mat-label>\n        <input matInput\n               formControlName=\"defaultValue\"\n               type=\"number\">\n      </mat-form-field>\n    </div>\n\n    <button mat-stroked-button\n            class=\"add-measurement-btn\"\n            color=\"primary\"\n            type=\"button\"\n            (click)=\"handleAddMeasurementClick()\">\n      {{ 'add-food.add-measurement-btn' | translate }}\n    </button>\n  </div>\n\n  <div class=\"actions\">\n    <button type=\"submit\"\n            mat-raised-button\n            color=\"accent\"\n            [disabled]=\"form.invalid\">\n      {{ 'add-food.submit-btn-caption' | translate }}\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "AddMealComponent",
            "id": "component-AddMealComponent-fb7c15e1f9b08fe4f7a748862a211004c70c71a80396e6b6c8ded6f9fea1b1a53e9951c2d35351ee3fb2cf0ccb26f656db1315722a40c5310ebf361ec2480893",
            "file": "src/app/features/add-meal/add-meal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-add-meal",
            "styleUrls": [
                "./add-meal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-meal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addedPfcc$",
                    "defaultValue": "new ReplaySubject<IPfcc>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "aims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "ProfileState.aims"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ceilPfcc",
                    "defaultValue": "ceilPfcc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "defaultMeasurement",
                    "defaultValue": "{\n    foodId: null,\n    id: null,\n    toGramMultiplier: 1,\n    name: 'g',\n    defaultValue: 100,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeasurement",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "deleteDish",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<AddMeal.DeleteDishPayload>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddMealState.deleteDish"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "endIndicator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'endIndicator', {static: true, read: undefined}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "endIntersectionObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IntersectionObserver",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterFC",
                    "defaultValue": "new FormControl<string>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isAccordionScrolledToEnd$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "loadMealOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<AddMeal.LoadMealOptionsPayload>",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddMealState.loadMealOptions"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "loadMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<void>",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AddMealState.loadMoreMealOptions"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "measurementFC",
                    "defaultValue": "new FormControl<IMeasurement>(this.defaultMeasurement)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "measurements",
                    "defaultValue": "[\n    this.defaultMeasurement,\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeasurement[]",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "moreDataAvailable$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "AddMealState.moreDataAvailable"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nutrients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "AddMealState.nutrients"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMealOption[]",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "AddMealState.options"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "optionTrackBy",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<AddMeal.IMealOption>",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "PAGE_SIZE",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "selectedOption$",
                    "defaultValue": "new ReplaySubject<AddMeal.IMealOption>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "weightFC",
                    "defaultValue": "new FormControl<number>(100)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCookADishClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDeleteOptionClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleEditOptionClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOptionOpened",
                    "args": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "AddMeal.IMealOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleWeightInputFocus",
                    "args": [
                        {
                            "name": "$event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEndIntersected",
                    "args": [
                        {
                            "name": "entry",
                            "type": "IntersectionObserverEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "IntersectionObserverEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  TrackByFunction,\n  ViewChild,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {hasActionsExecuting} from '@ngxs-labs/actions-executing';\nimport {AddMeal} from './add-meal.state-models';\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {AddMealState} from './add-meal.state';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {\n  BehaviorSubject,\n  combineLatestWith,\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  Observable,\n  ReplaySubject,\n} from 'rxjs';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {MatIconModule} from '@angular/material/icon';\nimport {NutritionGaugeComponent} from '../../components/nutrition-gauge/nutrition-gauge.component';\nimport {ProfileState} from '../../state/profile.state';\nimport {emptyPfcc, IPfcc} from '../../commons/models/common.models';\nimport {ceilPfcc, multiplyPfcc} from '../../commons/functions';\nimport {MatSelectModule} from '@angular/material/select';\nimport {IMeasurement} from '../../commons/models/domain.models';\nimport {Select, Store} from '@ngxs/store';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport * as fromRoutes from '../../commons/routes';\nimport {Navigate} from '@ngxs/router-plugin';\nimport {DialogPageHeadingComponent} from '../../components/dialog-page-heading/dialog-page-heading.component';\nimport IMealOption = AddMeal.IMealOption;\n\n@Component({\n  selector: 'pfc-add-meal',\n  standalone: true,\n  imports: [CommonModule, MatFormFieldModule, MatInputModule, MatButtonModule, MatExpansionModule, TranslateModule, ReactiveFormsModule, MatIconModule, NutritionGaugeComponent, MatSelectModule, MatProgressSpinnerModule, MatProgressBarModule, DialogPageHeadingComponent],\n  templateUrl: './add-meal.component.html',\n  styleUrls: ['./add-meal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddMealComponent implements OnInit, OnDestroy {\n  private static readonly PAGE_SIZE = 16;\n  protected readonly ceilPfcc = ceilPfcc;\n\n  protected readonly defaultMeasurement: IMeasurement = {\n    foodId: null,\n    id: null,\n    toGramMultiplier: 1,\n    name: 'g',\n    defaultValue: 100,\n  };\n  protected measurements: IMeasurement[] = [\n    this.defaultMeasurement,\n  ];\n\n  @Select(hasActionsExecuting([{type: AddMeal.LOAD_MEAL_OPTIONS}, {type: AddMeal.LOAD_MORE_MEAL_OPTIONS}]))\n  protected loading$: Observable<boolean>;\n  @Select(AddMealState.moreDataAvailable)\n  protected moreDataAvailable$: Observable<boolean>;\n\n  @ViewSelectSnapshot(AddMealState.options)\n  protected options: IMealOption[];\n  @ViewSelectSnapshot(AddMealState.nutrients)\n  protected nutrients: IPfcc;\n\n  @ViewSelectSnapshot(ProfileState.aims)\n  protected aims: IPfcc;\n\n  @Emitter(AddMealState.loadMealOptions)\n  protected loadMealOptions: Emittable<AddMeal.LoadMealOptionsPayload>;\n  @Emitter(AddMealState.loadMoreMealOptions)\n  protected loadMore: Emittable<void>;\n  @Emitter(AddMealState.deleteDish)\n  protected deleteDish: Emittable<AddMeal.DeleteDishPayload>;\n\n  protected filterFC = new FormControl<string>(null);\n  protected weightFC = new FormControl<number>(100);\n  protected measurementFC = new FormControl<IMeasurement>(this.defaultMeasurement);\n\n  protected optionTrackBy: TrackByFunction<AddMeal.IMealOption> = (_, opt) => `${opt.type}-${opt.foodId ?? '_'}-${opt.dishId ?? '_'}`;\n\n  protected selectedOption$ = new ReplaySubject<AddMeal.IMealOption>();\n  protected addedPfcc$ = new ReplaySubject<IPfcc>();\n\n  @ViewChild('endIndicator', {static: true, read: ElementRef<HTMLDivElement>})\n  private endIndicator: ElementRef<HTMLDivElement>;\n  private endIntersectionObserver: IntersectionObserver;\n  private isAccordionScrolledToEnd$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private store: Store) {\n    this.endIntersectionObserver = new IntersectionObserver((entries) => this.onEndIntersected(entries[0]), {\n      threshold: 0.5,\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadMealOptions.emit({\n      filter: null,\n      page: 0,\n      pageSize: AddMealComponent.PAGE_SIZE,\n    });\n\n    this.filterFC.valueChanges\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged())\n      .subscribe(filter => {\n        this.loadMealOptions.emit({filter, page: 0, pageSize: AddMealComponent.PAGE_SIZE});\n      });\n\n    this.measurementFC.valueChanges.subscribe(m => {\n      this.weightFC.patchValue(m.defaultValue);\n    });\n\n    this.selectedOption$.pipe(\n      combineLatestWith(this.weightFC.valueChanges, this.measurementFC.valueChanges),\n      map(([opt, weight, measurement]) => {\n        if (opt?.pfcc == null || weight == null || measurement == null) {\n          return emptyPfcc;\n        }\n        return multiplyPfcc(opt.pfcc, weight * measurement.toGramMultiplier / 100);\n      }),\n    ).subscribe(next => this.addedPfcc$.next(next));\n\n    this.endIntersectionObserver.observe(this.endIndicator.nativeElement);\n\n    this.isAccordionScrolledToEnd$.pipe(\n      combineLatestWith(this.loading$.pipe(debounceTime(50)), this.moreDataAvailable$),\n    ).subscribe(([scrolledTillEnd, loading, moreDataAvailable]) => {\n      if (scrolledTillEnd && !loading && moreDataAvailable) {\n        this.loadMore.emit();\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.endIntersectionObserver.unobserve(this.endIndicator.nativeElement);\n  }\n\n  handleOptionOpened(option: AddMeal.IMealOption) {\n    this.selectedOption$.next(option);\n    this.weightFC.patchValue(100);\n    this.measurementFC.patchValue(this.measurements[0]);\n    this.measurements = [\n      this.defaultMeasurement,\n      ...(option.measurements ?? [])\n    ]\n  }\n\n  handleDeleteOptionClick(option: AddMeal.IMealOption) {\n    this.deleteDish.emit(option.dishId);\n  }\n\n  handleEditOptionClick(option: AddMeal.IMealOption) {\n    this.store.dispatch(new Navigate([fromRoutes.addDish], {dishId: option.dishId}));\n  }\n\n  handleCookADishClick(option: AddMeal.IMealOption) {\n    this.store.dispatch(new Navigate([fromRoutes.addDish], {recipeId: option.foodId}));\n  }\n\n  private onEndIntersected(entry: IntersectionObserverEntry) {\n    this.isAccordionScrolledToEnd$.next(entry.isIntersecting);\n  }\n\n  handleWeightInputFocus($event: FocusEvent) {\n    ($event.target as HTMLInputElement).select();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n  max-height: 100dvh;\n}\n\nh1 {\n  text-align: center;\n  font-size: 2rem;\n  margin: .5rem 0;\n}\n\n\n.dishes-header {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.dishes-header_title {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n}\n\n.dishes-header_title-primary {\n  margin: 0;\n}\n\n.dishes-header_title-secondary {\n  margin: 0;\n  font-size: .8rem;\n  color: #707070;\n\n  strong {\n    font-weight: 900;\n    color: red;\n  }\n}\n\n.nutrients {\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  gap: 5px;\n}\n\n.weight-input-group {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  gap: 10px;\n}\n\n.weight-field {\n  flex-basis: 40%;\n}\n\n.measurement-select {\n  flex-basis: 60%;\n}\n\n.cook-a-dish-btn {\n  width: 100%;\n}\n\n.search-field {\n  flex-grow: 0;\n}\n.options-list{\n  flex-grow: 1;\n  overflow: auto;\n}\n\n.loading-bar {\n  width: 100%;\n}\n",
                    "styleUrl": "./add-meal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<pfc-dialog-page-heading [title]=\"'add-meal.title'\"></pfc-dialog-page-heading>\n\n<mat-form-field class=\"search-field\">\n  <input [formControl]=\"filterFC\"\n         [placeholder]=\"'add-meal.search-placeholder' | translate\"\n         matInput\n         type=\"text\">\n</mat-form-field>\n\n<mat-accordion [multi]=\"false\"\n               [displayMode]=\"'flat'\"\n               class=\"options-list\">\n  <mat-expansion-panel *ngFor=\"let option of options; trackBy: optionTrackBy\"\n                       [hideToggle]=\"false\"\n                       (opened)=\"handleOptionOpened(option)\">\n    <mat-expansion-panel-header>\n      <div class=\"dishes-header\">\n        <div class=\"dishes-header_title\">\n          <p class=\"dishes-header_title-primary\">{{ option.name }}</p>\n          <p [innerHTML]=\"'common.pfcc-values' | translate:(ceilPfcc(option.pfcc))\"\n             class=\"dishes-header_title-secondary\"></p>\n        </div>\n\n        <div *ngIf=\"option.type === 'DISH'\"\n             class=\"flex-spacer\"></div>\n\n        <button (click)=\"handleEditOptionClick(option); $event.stopPropagation();\"\n                *ngIf=\"option.type === 'DISH'\"\n                color=\"accent\"\n                mat-icon-button>\n          <mat-icon>pencil</mat-icon>\n        </button>\n\n        <button (click)=\"handleDeleteOptionClick(option); $event.stopPropagation();\"\n                *ngIf=\"option.type === 'DISH'\"\n                color=\"accent\"\n                mat-icon-button>\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n    </mat-expansion-panel-header>\n\n    <ng-template matExpansionPanelContent>\n      <div class=\"nutrients\">\n        <pfc-nutrition-gauge\n          [aim]=\"aims.protein\"\n          [value]=\"nutrients.protein\"\n          [title]=\"'common.protein' | translate\"\n          [addingValue]=\"ceilPfcc(addedPfcc$ | async).protein\"/>\n        <pfc-nutrition-gauge\n          [aim]=\"aims.fat\"\n          [value]=\"nutrients.fat\"\n          [title]=\"'common.fat' | translate\"\n          [addingValue]=\"ceilPfcc(addedPfcc$ | async).fat\"/>\n        <pfc-nutrition-gauge\n          [aim]=\"aims.carbohydrates\"\n          [value]=\"nutrients.carbohydrates\"\n          [title]=\"'common.carbohydrates' | translate\"\n          [addingValue]=\"ceilPfcc(addedPfcc$| async).carbohydrates\"/>\n        <pfc-nutrition-gauge\n          [aim]=\"aims.calories\"\n          [value]=\"nutrients.calories\"\n          [title]=\"'common.calories' | translate\"\n          [addingValue]=\"ceilPfcc(addedPfcc$ | async).calories\"/>\n      </div>\n\n      <div class=\"weight-input-group\">\n        <mat-form-field class=\"weight-field\">\n          <input type=\"number\"\n                 matInput\n                 [formControl]=\"weightFC\"\n                 [placeholder]=\"'add-meal.weight-input-placeholder' | translate\"\n                 (focus)=\"handleWeightInputFocus($event)\">\n        </mat-form-field>\n        <mat-form-field class=\"measurement-select\">\n          <mat-select [formControl]=\"measurementFC\">\n            <mat-option *ngFor=\"let m of measurements\"\n                        [value]=\"m\">{{ 'measurements.' + m.name  | translate }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <button mat-raised-button\n              class=\"cook-a-dish-btn\"\n              color=\"primary\"\n              *ngIf=\"option.type === 'RECIPE'\"\n              (click)=\"handleCookADishClick(option)\">\n        {{ 'add-meal.cook-a-dish-btn' | translate }}\n      </button>\n    </ng-template>\n  </mat-expansion-panel>\n\n  <div class=\"loading-bar\">\n    <mat-progress-bar *ngIf=\"loading$ | async\"\n                      mode=\"indeterminate\">\n    </mat-progress-bar>\n  </div>\n\n  <div #endIndicator></div>\n</mat-accordion>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1a2d01fd1ab61706c0e289d214252f1aa95b5a8a370f2afc86f828a4162d195b6acf50e222a5c802b1a903467cc9aee3bcb302333f4a0e60b90b955a0cd2117b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuOpened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "UiState.sideMenuOpened"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "UiState.showHeader"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "toggleMenuEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "UiState.toggleSideMenu"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleMenuClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Store} from '@ngxs/store';\nimport {filter} from 'rxjs';\nimport {UiState} from \"./state/ui/ui.state\";\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {ProfileState} from './state/profile.state';\nimport {Profile} from './state/profile.state-model';\n\n\n@Component({\n  selector: 'pfc-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  @ViewSelectSnapshot(UiState.sideMenuOpened)\n  protected menuOpened: boolean;\n  @ViewSelectSnapshot(UiState.showHeader)\n  protected showHeader: boolean;\n\n  @Emitter(UiState.toggleSideMenu)\n  protected toggleMenuEmt: Emittable<boolean>;\n\n  constructor(private translateService: TranslateService, private store: Store) {\n    store.select(ProfileState.language)\n      .pipe(\n        filter(lang => lang != null),\n      )\n      .subscribe(lang => translateService.use(lang));\n\n    translateService.setDefaultLang(Profile.DEFAULT_LANGUAGE);\n  }\n\n  handleMenuClosed() {\n    this.toggleMenuEmt.emit(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  height: 100%;\n}\n\n.container {\n  height: 100%;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.menu-container {\n  min-width: 220px;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-drawer-container autosize\n                      hasBackdrop=\"true\"\n                      class=\"container\">\n  <mat-drawer [opened]=\"menuOpened ?? false\"\n              (closedStart)=\"handleMenuClosed()\"\n              mode=\"over\"\n              class=\"menu-container\">\n    <pfc-menu></pfc-menu>\n  </mat-drawer>\n  <mat-drawer-content class=\"content\">\n    <pfc-heading *ngIf=\"showHeader\"></pfc-heading>\n    <router-outlet></router-outlet>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "ConfigureProfileComponent",
            "id": "component-ConfigureProfileComponent-d1715342bdc45dcb6d959b5c7aa1f558b9d2fd55856ec1cf11dd0edb070e7b02dae17b84900d9e9589557892f7d90e1c297e8e8afc78eaa92aebcaecb403fba5",
            "file": "src/app/features/auth/configure-profile/configure-profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-configure-profile",
            "styleUrls": [
                "./configure-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./configure-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configureProfileEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<Auth.ConfigureProfilePayload>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AuthState.configureProfile"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    protein: [100, Validators.min(0)],\n    fat: [40, Validators.min(0)],\n    carbohydrates: [150, Validators.min(0)],\n    calories: [2000, Validators.min(0)],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {AuthState} from '../auth.state';\nimport {Auth} from '../auth.state-models';\n\n@Component({\n  selector: 'pfc-configure-profile',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, MatFormFieldModule, MatButtonModule, MatInputModule, MatSlideToggleModule, TranslateModule],\n  templateUrl: './configure-profile.component.html',\n  styleUrls: ['./configure-profile.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfigureProfileComponent {\n  @Emitter(AuthState.configureProfile)\n  private configureProfileEmt: Emittable<Auth.ConfigureProfilePayload>;\n\n  protected form = this.fb.group({\n    protein: [100, Validators.min(0)],\n    fat: [40, Validators.min(0)],\n    carbohydrates: [150, Validators.min(0)],\n    calories: [2000, Validators.min(0)],\n  });\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  protected submit() {\n    this.configureProfileEmt.emit({\n      aims: {\n        protein: this.form.value.protein || null,\n        fat: this.form.value.fat || null,\n        carbohydrates: this.form.value.carbohydrates || null,\n        calories: this.form.value.calories || null,\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 15%;\n  height: 100%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  width: 100%;\n}\n\na[mat-button] {\n  width: 100%;\n}\n",
                    "styleUrl": "./configure-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>{{'common.protein' | translate}}</mat-label>\n    <input formControlName=\"protein\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>{{'common.fat' | translate}}</mat-label>\n    <input formControlName=\"fat\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>{{'common.carbohydrates' | translate}}</mat-label>\n    <input formControlName=\"carbohydrates\" matInput type=\"number\"/>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>{{'common.calories' | translate}}</mat-label>\n    <input formControlName=\"calories\" matInput type=\"number\"/>\n  </mat-form-field>\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button\n          type=\"submit\">{{'complete-profile.submit-btn' | translate}}</button>\n</form>\n"
        },
        {
            "name": "DashboardPageComponent",
            "id": "component-DashboardPageComponent-7f0e24b7868e8607235e036390ab188d690cda0ecdf4aea66e5b0135b2f7abb139b852557ea28bad79f947bf0db2add2cc176a4385ab9544ef2ebcd19a62df8a",
            "file": "src/app/features/dashboard/dashboard-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-dashboard-page",
            "styleUrls": [
                "./dashboard-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "DashboardState.date"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dailyAims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "DashboardState.dailyAims"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dailyNutrients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "DashboardState.todayNutrients"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "eatenMeals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeal[]",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "DashboardState.todayMeals"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fromFunctions",
                    "defaultValue": "fromFunctions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "fromRoutes",
                    "defaultValue": "fromRoutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "mealTrackBy",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "profile$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IProfile>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "removeMealEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<Dashboard.RemoveMealPayload>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "DashboardState.removeMeal"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "weeklyAims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "DashboardState.weeklyAims"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "weeklyNutrients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "DashboardState.weeklyNutrients"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "removeMeal",
                    "args": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mealId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {NutritionGaugeComponent} from '../../components/nutrition-gauge/nutrition-gauge.component';\nimport {IMeal, IProfile} from '../../commons/models/domain.models';\nimport {Observable} from 'rxjs';\nimport {AsyncPipe, CommonModule} from '@angular/common';\nimport {IPfcc} from '../../commons/models/common.models';\nimport {DateTime} from 'luxon';\nimport {TranslateModule} from '@ngx-translate/core';\nimport * as fromFunctions from '../../commons/functions';\nimport * as fromRoutes from '../../commons/routes';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatListModule} from '@angular/material/list';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatLineModule} from \"@angular/material/core\";\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {DashboardState} from './dashboard.state';\nimport {RouterLink} from '@angular/router';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {Dashboard} from './dashboard.state-models';\n\n@Component({\n  selector: 'pfc-dashboard-page',\n  templateUrl: './dashboard-page.component.html',\n  styleUrls: ['./dashboard-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [CommonModule, NutritionGaugeComponent, AsyncPipe, MatButtonModule, MatListModule, TranslateModule, MatIconModule, MatDialogModule, MatLineModule, RouterLink],\n})\nexport class DashboardPageComponent {\n\n  protected readonly fromFunctions = fromFunctions;\n  protected readonly fromRoutes = fromRoutes;\n\n  profile$: Observable<IProfile>;\n\n  @ViewSelectSnapshot(DashboardState.todayNutrients)\n  protected dailyNutrients: IPfcc;\n  @ViewSelectSnapshot(DashboardState.weeklyNutrients)\n  protected weeklyNutrients: IPfcc;\n  @ViewSelectSnapshot(DashboardState.dailyAims)\n  protected dailyAims: IPfcc;\n  @ViewSelectSnapshot(DashboardState.weeklyAims)\n  protected weeklyAims: IPfcc;\n  @ViewSelectSnapshot(DashboardState.todayMeals)\n  protected eatenMeals: IMeal[];\n  @ViewSelectSnapshot(DashboardState.date)\n  protected currentDate: DateTime;\n  @Emitter(DashboardState.removeMeal)\n  private removeMealEmt: Emittable<Dashboard.RemoveMealPayload>;\n\n  mealTrackBy = (idx: number, item: IMeal) => item.id;\n\n  removeMeal(mealId: number) {\n    this.removeMealEmt.emit({id: mealId});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  row-gap: 3vw;\n  height: 100%;\n  padding: 3vw 0;\n}\n\n.nutrients {\n  display: flex;\n  flex-direction: column;\n  row-gap: 3vw;\n  padding: 0 3vw;\n\n  &__header {\n    font-size: 1.2rem;\n    margin: 0 0 .2rem;\n  }\n\n  &__gauges {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n\n    > * {\n      width: 22%;\n    }\n  }\n}\n\n.add-meal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0 3vw;\n\n  > * {\n    width: 100%;\n  }\n}\n\n.meals {\n  &__header {\n    font-size: 1.2rem;\n    margin: 0 0 .2rem;\n    padding: 0 3vw;\n  }\n\n  &__line {\n    width: 100%;\n    box-sizing: border-box;\n    padding: 0 3vw;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    &_even {\n      background-color: rgba(0, 0, 0, .1);\n    }\n  }\n\n  &__description {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  &__title {\n    font-size: .8rem;\n  }\n\n  &__weight {\n    font-size: .65rem;\n    color: rgba(0, 0, 0, .54);\n  }\n}\n",
                    "styleUrl": "./dashboard-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"nutrients\">\n  <div class=\"nutrients__period-block\">\n    <h1 class=\"nutrients__header\">{{ 'dashboard.weekly-nutrients' | translate }}</h1>\n    <div class=\"nutrients__gauges\">\n      <pfc-nutrition-gauge [aim]=\"weeklyAims?.protein || null\"\n                           [title]=\"'common.protein' | translate\"\n                           [value]=\"weeklyNutrients?.protein || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"weeklyAims?.fat || null\"\n                           [title]=\"'common.fat' | translate\"\n                           [value]=\"weeklyNutrients?.fat || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"weeklyAims?.carbohydrates || null\"\n                           [title]=\"'common.carbohydrates' | translate\"\n                           [value]=\"weeklyNutrients?.carbohydrates || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"weeklyAims?.calories || null\"\n                           [title]=\"'common.calories' | translate\"\n                           [value]=\"weeklyNutrients?.calories || 0\"></pfc-nutrition-gauge>\n    </div>\n  </div>\n\n  <div class=\"nutrients__period-block\">\n    <h1 class=\"nutrients__header\">{{ 'dashboard.daily-nutrients' | translate }}</h1>\n    <div class=\"nutrients__gauges\">\n      <pfc-nutrition-gauge [aim]=\"dailyAims?.protein || null\"\n                           [title]=\"'common.protein' | translate\"\n                           [value]=\"dailyNutrients?.protein || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"dailyAims?.fat || null\"\n                           [title]=\"'common.fat' | translate\"\n                           [value]=\"dailyNutrients?.fat || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"dailyAims?.carbohydrates || null\"\n                           [title]=\"'common.carbohydrates' | translate\"\n                           [value]=\"dailyNutrients?.carbohydrates || 0\"></pfc-nutrition-gauge>\n      <pfc-nutrition-gauge [aim]=\"dailyAims?.calories || null\"\n                           [title]=\"'common.calories' | translate\"\n                           [value]=\"dailyNutrients?.calories || 0\"></pfc-nutrition-gauge>\n    </div>\n  </div>\n</div>\n\n<div class=\"meals\">\n  <h1 class=\"meals__header\">{{ 'dashboard.meals-list.title' | translate }}</h1>\n  <div *ngFor=\"let meal of eatenMeals; let i=index; trackBy: mealTrackBy\"\n       [ngClass]=\"i % 2 === 1 ? 'meals__line_even' : ''\"\n       class=\"meals__line\">\n    <!-- TODO: Implement loading more meals -->\n    <div class=\"meals__description\">\n      <span class=\"meals__title\">{{ meal.name }} - {{ meal.weight }}{{ 'common.gram-sign' | translate }}</span>\n      <span class=\"meals__weight\">\n          {{ 'common.pfcc-values' | translate:fromFunctions.ceilPfcc(meal.pfcc) }}\n        </span>\n    </div>\n    <div class=\"flex-spacer\"></div>\n    <button (click)=\"removeMeal(meal.id!)\"\n            mat-icon-button>\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n</div>\n\n\n<div class=\"flex-spacer\"></div>\n\n<div class=\"add-meal\">\n  <a [routerLink]=\"['/', fromRoutes.addMeal]\"\n     [queryParams]=\"{date: currentDate.toISO({ includeOffset: false })}\"\n     color=\"accent\"\n     mat-raised-button>\n    {{ 'dashboard.add-meal-btn' | translate }}\n  </a>\n</div>\n"
        },
        {
            "name": "DialogPageHeadingComponent",
            "id": "component-DialogPageHeadingComponent-34d5edb4866101fc1c172ae010c85f838a6d29cff28a0d52886e6c90d43f87f1a6099fc05f9fa90a007de0ac241f85f173028129e1ab2a1affab206ccb3e7120",
            "file": "src/app/components/dialog-page-heading/dialog-page-heading.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-dialog-page-heading",
            "styleUrls": [
                "./dialog-page-heading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-page-heading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "goBack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<NavigateBackPayload>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "NavigationState.navigateBack"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleNavigateBackClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {NavigationState} from '../../state/navigation.state';\nimport {Navigation} from '../../state/navigation.state-model';\nimport NavigateBackPayload = Navigation.NavigateBackPayload;\n\n@Component({\n  selector: 'pfc-dialog-page-heading',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, TranslateModule],\n  templateUrl: './dialog-page-heading.component.html',\n  styleUrls: ['./dialog-page-heading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DialogPageHeadingComponent {\n  @Input()\n  title: string;\n  @Emitter(NavigationState.navigateBack)\n  protected goBack: Emittable<NavigateBackPayload>\n\n  constructor() {\n  }\n\n  handleNavigateBackClicked() {\n    this.goBack.emit({});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\n  flex-grow: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  padding: 0 14px;\n  box-sizing: border-box;\n  align-items: center;\n\n  h1 {\n    text-align: end;\n    flex-grow: 1;\n  }\n}\n",
                    "styleUrl": "./dialog-page-heading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "templateData": "<div class=\"heading\">\n  <a mat-icon-button\n     (click)=\"handleNavigateBackClicked(); $event.stopPropagation();\">\n    <mat-icon>arrow_back_ios</mat-icon>\n  </a>\n  <h1>{{ title | translate }}</h1>\n</div>\n"
        },
        {
            "name": "FoodsManagementPageComponent",
            "id": "component-FoodsManagementPageComponent-488904a6f08a6f5f2692ff36ae447f13ab3582a594438b3e19fdda312d5c819f6bde25b3d36e3f50bba1fe7f364dbb40f07ed130f9dd797181e50b0bf0a88da3",
            "file": "src/app/features/foods-management/foods-management-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-foods-management-page",
            "styleUrls": [
                "./foods-management-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./foods-management-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$destroyed",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.CreateFoodActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.createFood"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.DeleteFoodActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.deleteFood"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "editFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.EditFoodActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.editFood"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "MatListItem, {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "JSON",
                    "defaultValue": "JSON",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "loadMoreProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.loadMoreProducts"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadMoreRecipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.loadMoreRecipes"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.LoadFoodsActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.loadProducts"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadRecipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<FoodsManagement.LoadFoodsActionPayload>",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "FoodsManagementState.loadRecipes"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "moreProductsAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "FoodsManagementState.moreProductsAvailable"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "moreRecipesAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "FoodsManagementState.moreRecipesAvailable"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "FoodsManagementState.products"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "productsLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "recipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFood[]",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "FoodsManagementState.recipes"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "recipesLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "trackFoodById",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<IFood>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'INGREDIENT'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodType",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addFoodClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDeleteClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleEditClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLoadMoreClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleTabSwitched",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  TrackByFunction,\n  ViewChildren,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatTabChangeEvent, MatTabsModule} from \"@angular/material/tabs\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatListItem, MatListModule} from \"@angular/material/list\";\nimport {FoodType, IFood} from \"../../commons/models/domain.models\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {debounceTime, distinctUntilChanged, map, Subject, takeUntil} from \"rxjs\";\nimport {FormControl, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {FoodsManagementState} from './foods-management.state';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {FoodsManagement} from './foods-management.state-models';\nimport {hasActionsExecuting} from '@ngxs-labs/actions-executing';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {Store} from '@ngxs/store';\nimport {Navigate} from '@ngxs/router-plugin';\nimport * as fromRoutes from '../../commons/routes';\n\n@Component({\n  selector: 'pfc-foods-management-page',\n  standalone: true,\n  imports: [CommonModule, MatTabsModule, TranslateModule, MatButtonModule, MatListModule, MatFormFieldModule, MatInputModule, MatIconModule, ReactiveFormsModule, MatDialogModule, MatProgressBarModule],\n  templateUrl: './foods-management-page.component.html',\n  styleUrls: ['./foods-management-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FoodsManagementPageComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewSelectSnapshot(FoodsManagementState.products)\n  protected products: IFood[];\n  @ViewSelectSnapshot(FoodsManagementState.recipes)\n  protected recipes: IFood[];\n  @ViewSelectSnapshot(FoodsManagementState.moreProductsAvailable)\n  protected moreProductsAvailable: boolean;\n  @ViewSelectSnapshot(FoodsManagementState.moreRecipesAvailable)\n  protected moreRecipesAvailable: boolean;\n  @ViewSelectSnapshot(hasActionsExecuting([{type: FoodsManagement.LOAD_PRODUCTS}, {type: FoodsManagement.LOAD_MORE_PRODUCTS}]))\n  protected productsLoading: boolean;\n  @ViewSelectSnapshot(hasActionsExecuting([{type: FoodsManagement.LOAD_RECIPES}, {type: FoodsManagement.LOAD_MORE_RECIPES}]))\n  protected recipesLoading: boolean;\n\n  @Emitter(FoodsManagementState.loadProducts)\n  private loadProducts: Emittable<FoodsManagement.LoadFoodsActionPayload>;\n  @Emitter(FoodsManagementState.loadRecipes)\n  private loadRecipes: Emittable<FoodsManagement.LoadFoodsActionPayload>;\n  @Emitter(FoodsManagementState.loadMoreProducts)\n  private loadMoreProducts: Emittable;\n  @Emitter(FoodsManagementState.loadMoreRecipes)\n  private loadMoreRecipes: Emittable;\n  @Emitter(FoodsManagementState.createFood)\n  private createFood: Emittable<FoodsManagement.CreateFoodActionPayload>;\n  @Emitter(FoodsManagementState.editFood)\n  private editFood: Emittable<FoodsManagement.EditFoodActionPayload>;\n  @Emitter(FoodsManagementState.deleteFood)\n  private deleteFood: Emittable<FoodsManagement.DeleteFoodActionPayload>;\n\n  protected type: FoodType = 'INGREDIENT';\n\n  @ViewChildren(MatListItem, {read: ElementRef})\n  protected items!: QueryList<ElementRef>;\n  protected searchControl = new FormControl<string | null>(null);\n\n  protected trackFoodById: TrackByFunction<IFood> = (_, item) => {\n    return item.id;\n  };\n\n  private $destroyed = new Subject<void>();\n\n  constructor(private store: Store) {\n  }\n\n  ngOnInit(): void {\n    this.loadProducts.emit({name: null, page: 0, pageSize: 10});\n    this.loadRecipes.emit({name: null, page: 0, pageSize: 10});\n    this.searchControl.valueChanges\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged(),\n        takeUntil(this.$destroyed),\n        map(search => ({\n          page: 0,\n          pageSize: 10,\n          name: search,\n        } as FoodsManagement.LoadFoodsActionPayload)))\n      .subscribe((payload: FoodsManagement.LoadFoodsActionPayload) => {\n        switch (this.type) {\n          case 'INGREDIENT':\n            this.loadProducts.emit(payload);\n            break;\n          case 'RECIPE':\n            this.loadRecipes.emit(payload);\n            break;\n          default:\n            console.warn(`Unknown food type: ${this.type}`);\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.$destroyed.next();\n    this.$destroyed.complete();\n  }\n\n  ngAfterViewInit(): void {\n    //TODO: Add observer on last element\n  }\n\n  addFoodClick() {\n    this.store.dispatch(new Navigate([fromRoutes.addFood], {\n      type: this.type,\n      name: this.searchControl.value || undefined,\n    }));\n  }\n\n  handleEditClick(id: number) {\n    this.store.dispatch(new Navigate([fromRoutes.addFood], {\n      id: id,\n    }));\n  }\n\n  handleDeleteClick(id: number) {\n    this.deleteFood.emit(id);\n  }\n\n  handleTabSwitched(event: MatTabChangeEvent) {\n    switch (event.index) {\n      case 0:\n        this.type = 'INGREDIENT';\n        break;\n      case 1:\n        this.type = 'RECIPE';\n        break;\n      default:\n        console.warn(`Unknown tab id: ${event.index}`);\n    }\n  }\n\n  handleLoadMoreClicked() {\n    switch (this.type) {\n      case 'INGREDIENT':\n        this.loadMoreProducts.emit();\n        break;\n      case 'RECIPE':\n        this.loadMoreRecipes.emit();\n        break;\n      default:\n        console.warn(`Unknown food type: ${this.type}`);\n    }\n  }\n\n  protected readonly JSON = JSON;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  box-sizing: border-box;\n  padding: 0;\n\n  &__add-btn {\n    margin: 10px 5px;\n  }\n\n  &__food-actions {\n    display: flex !important;\n    flex-direction: row;\n    align-items: center;\n    height: 100%;\n  }\n\n  &__edit-food-btn {\n    align-self: center !important;\n  }\n}\n\n.data-loading-bar-container {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n}\n",
                    "styleUrl": "./foods-management-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<mat-tab-group dynamicHeight=\"true\"\n               (selectedTabChange)=\"handleTabSwitched($event)\">\n  <mat-tab label=\"{{'foods-management.ingredients-tab-label' | translate}}\">\n    <ng-container\n      *ngTemplateOutlet=\"foodListTemplate; context: {\n      data: products,\n      moreDataAvailable: moreProductsAvailable,\n      loading: productsLoading}\">\n    </ng-container>\n  </mat-tab>\n  <mat-tab label=\"{{'foods-management.recipes-tab-label' | translate}}\">\n    <ng-container\n      *ngTemplateOutlet=\"foodListTemplate; context: {\n       data: recipes,\n       moreDataAvailable: moreRecipesAvailable,\n       loading: recipesLoading}\">\n    </ng-container>\n  </mat-tab>\n</mat-tab-group>\n\n<ng-template #foodListTemplate\n             let-data=\"data\"\n             let-loading=\"loading\"\n             let-moreDataAvailable=\"moreDataAvailable\">\n  <div class=\"content\">\n    <button mat-stroked-button\n            (click)=\"addFoodClick()\"\n            class=\"content__add-btn\"\n            color=\"primary\">\n      {{\n      type === 'INGREDIENT'\n        ? ('foods-management.add-ingredient-caption' | translate)\n        : ('foods-management.add-recipe-caption' | translate)\n      }}\n    </button>\n    <mat-form-field>\n      <input [formControl]=\"searchControl\"\n             [value]=\"searchControl.value\"\n             matInput\n             [placeholder]=\"'foods-management.search-placeholder' | translate\"\n             type=\"text\">\n      <mat-icon matSuffix>search</mat-icon>\n    </mat-form-field>\n\n    <mat-list>\n      <mat-list-item *ngFor=\"let food of data; trackBy: trackFoodById\">\n        <span matListItemTitle>{{food.name}}</span>\n        <span matListItemLine>{{'common.pfcc-values' | translate:food.pfcc }}</span>\n        <div class=\"content__food-actions\"\n             matListItemMeta>\n          <button mat-icon-button\n                  color=\"primary\"\n                  (click)=\"handleEditClick(food.id)\">\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button mat-icon-button\n                  *ngIf=\"food.ownedByUser\"\n                  (click)=\"handleDeleteClick(food.id)\"\n                  color=\"warn\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </div>\n      </mat-list-item>\n    </mat-list>\n\n    <div *ngIf=\"loading\"\n         class=\"data-loading-bar-container\">\n      <mat-progress-bar mode=\"indeterminate\">\n      </mat-progress-bar>\n    </div>\n\n    <button mat-stroked-button\n            (click)=\"addFoodClick()\"\n            *ngIf=\"data?.length > 10 || false\"\n            class=\"content__add-btn\"\n            color=\"primary\">\n      {{'foods-management.add-ingredient-caption' | translate}}\n    </button>\n    <button mat-stroked-button\n            (click)=\"handleLoadMoreClicked()\"\n            [disabled]=\"!moreDataAvailable || loading\"\n            class=\"content__add-btn\"\n            color=\"primary\">\n      {{'foods-management.load-more-btn-caption' | translate}}\n    </button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "GaugeComponent",
            "id": "component-GaugeComponent-a95921818be76f77da153eaa371d258bae0fb3017eb2971603a51e2ec142c2d7ec7e707c02c6f85b47c0b29ec11f1e39258b61bc74eb39fccd53a0f942c45d1e",
            "file": "src/app/components/gauge/gauge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-gauge",
            "styleUrls": [
                "./gauge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gauge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "animationDuration",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitleFontSize",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "titleFontSize",
                    "defaultValue": "35",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "IGaugeTrackConf[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_tracks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGaugeInternalTrackConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "circleTrackByFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "cumulativeRadius",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "height",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "subtitleX",
                    "defaultValue": "52",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subtitleY",
                    "defaultValue": "70",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "titleX",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "titleY",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "trackTrackByFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "viewBox",
                    "defaultValue": "'0 0 100 100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "width",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {GaugeCircleDirective} from './gauge-circle.directive';\nimport {IGaugeCircleConf, IGaugeTrackConf} from './gauge-component.interfaces';\nimport {CommonModule} from '@angular/common';\n\ninterface IGaugeInternalTrackConfig extends IGaugeTrackConf {\n  radius: number;\n}\n\n@Component({\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'pfc-gauge',\n  templateUrl: './gauge.component.html',\n  styleUrls: ['./gauge.component.scss'],\n  imports: [\n    CommonModule, GaugeCircleDirective,\n  ],\n})\nexport class GaugeComponent implements OnChanges {\n  @Input() animationDuration = 3;\n  @Input() title!: string;\n  @Input() subtitle?: string;\n\n  @Input() titleFontSize = 35;\n  @Input() subtitleFontSize = 20;\n\n  titleX = 50;\n  titleY = 50;\n  subtitleX = 52;\n  subtitleY = 70;\n  width = 100;\n  height = 100;\n  viewBox = '0 0 100 100';\n\n  _tracks: IGaugeInternalTrackConfig[] = [];\n\n  private cumulativeRadius = 40;\n\n  constructor() {\n  }\n\n  @Input()\n  set values(values: IGaugeTrackConf[]) {\n    this.cumulativeRadius = 40;\n    this._tracks = values.map((track, idx) => {\n      this.cumulativeRadius += track.strokeWidth;\n      return {\n        ...track,\n        trackId: track.trackId != null ? track.trackId : idx,\n        radius: this.cumulativeRadius - (track.strokeWidth / 2),\n        circles: track.circles.map((circle, idx) => {\n          return {\n            ...circle,\n            circleId: circle.circleId != null ? circle.circleId : idx,\n          };\n        }),\n      };\n    });\n    for (const track of this._tracks) {\n      track.circles.sort((c1, c2) => c2.value - c1.value);\n    }\n  }\n\n  trackTrackByFn = (idx: number, track: IGaugeTrackConf) => {\n    return track.trackId != null ? track.trackId : idx;\n  };\n\n  circleTrackByFn = (idx: number, circle: IGaugeCircleConf) => {\n    return circle.circleId ? circle.circleId : idx;\n  };\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.width = this.height = this.cumulativeRadius * 2;\n    this.titleX = this.cumulativeRadius;\n    this.titleY = this.subtitle != null ? this.cumulativeRadius : this.cumulativeRadius + (this.titleFontSize * 0.39);\n    this.subtitleX = this.cumulativeRadius;\n    this.subtitleY = this.cumulativeRadius + this.subtitleFontSize;\n    this.viewBox = `0 0 ${this.width} ${this.height}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".gauge {\n  width: 100%;\n  height: 100%;\n}\n\n.foreground-circle {\n  transition: stroke-dasharray 2s linear;\n\n  &__animated {\n    animation-name: foreground-circle-kf;\n    animation-duration: 1.4s;\n    animation-iteration-count: infinite;\n    animation-timing-function: ease-in;\n\n    @keyframes foreground-circle-kf {\n      from {\n        stroke-opacity: 100%;\n      }\n      50% {\n        stroke-opacity: 50%;\n      }\n      to {\n        stroke-opacity: 100%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./gauge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "values": {
                    "name": "values",
                    "setSignature": {
                        "name": "values",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "values",
                                "type": "IGaugeTrackConf[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "values",
                                "type": "IGaugeTrackConf[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<svg [attr.viewBox]=\"viewBox\" class=\"gauge\">\n  <ng-container *ngFor=\"let track of _tracks; let i = index; trackBy: trackTrackByFn\">\n    <circle [attr.cx]=\"width / 2\"\n            [attr.cy]=\"height / 2\"\n            [attr.r]=\"track.radius\"\n            [attr.stroke-width]=\"track.strokeWidth\"\n            [attr.stroke]=\"track.bgStrokeColor\"\n\n            fill=\"transparent\">\n    </circle>\n\n    <circle *ngFor=\"let circle of track.circles; trackBy: circleTrackByFn\"\n            [attr.cx]=\"width / 2\"\n            [attr.cy]=\"height / 2\"\n            [attr.r]=\"track.radius\"\n            [attr.stroke-width]=\"track.strokeWidth\"\n            [attr.stroke]=\"circle.color\"\n            [class.foreground-circle__animated]=\"circle.blink\"\n            [pfcGaugeCircle]=\"circle\"\n            class=\"foreground-circle\"\n            fill=\"transparent\"\n            stroke-linecap=\"round\">\n    </circle>\n  </ng-container>\n\n  <text [attr.font-size]=\"titleFontSize\"\n        [attr.x]=\"titleX\"\n        [attr.y]=\"titleY\"\n        class=\"title\"\n        font-weight=\"bold\"\n        text-anchor=\"middle\">\n    {{title}}\n  </text>\n  <text *ngIf=\"subtitle != null\"\n        [attr.font-size]=\"subtitleFontSize\"\n        [attr.x]=\"subtitleX\"\n        [attr.y]=\"subtitleY\"\n        class=\"subtitle\"\n        text-anchor=\"middle\">\n    {{subtitle}}\n  </text>\n</svg>\n"
        },
        {
            "name": "HeadingComponent",
            "id": "component-HeadingComponent-6e2d5afafd00ec9c055197ec6cc8f161fd3422aeb9ba385ea5816b701713510c8dfc92d0fbc341d3a5344efac93de6bbfc02f20847abfd5c67108a2cfb5cb8f2",
            "file": "src/app/components/heading/heading.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-heading",
            "styleUrls": [
                "./heading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./heading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableLanguages",
                    "defaultValue": "['UA', 'EN']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Language[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UnknownBoolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewSelectSnapshot",
                            "stringifiedArguments": "AuthState.isAuthenticated"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "langSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'langSelector'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "languageChangedEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "ProfileState.languageChanged"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "toggleMenuEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<boolean | void>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "UiState.toggleSideMenu"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleLangChanged",
                    "args": [
                        {
                            "name": "selection",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMenuClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewInit, ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatSelect, MatSelectChange, MatSelectModule} from \"@angular/material/select\";\nimport {Store} from \"@ngxs/store\";\nimport {Language} from \"../../commons/models/auth.models\";\nimport {AuthState} from \"../../features/auth/auth.state\";\nimport {take} from \"rxjs\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ViewSelectSnapshot} from '@ngxs-labs/select-snapshot';\nimport {UnknownBoolean} from '../../commons/models/common.models';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {UiState} from '../../state/ui/ui.state';\nimport {ProfileState} from '../../state/profile.state';\n\n\n@Component({\n  selector: 'pfc-heading',\n  standalone: true,\n  imports: [CommonModule, MatFormFieldModule, MatIconModule, MatSelectModule, MatButtonModule],\n  templateUrl: './heading.component.html',\n  styleUrls: ['./heading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeadingComponent implements AfterViewInit {\n  //TODO: Auto-infer\n  protected availableLanguages: Language[] = ['UA', 'EN'];\n  @ViewSelectSnapshot(AuthState.isAuthenticated)\n  protected isAuthenticated: UnknownBoolean;\n  @Emitter(UiState.toggleSideMenu)\n  protected toggleMenuEmt: Emittable<boolean | void>;\n  @Emitter(ProfileState.languageChanged)\n  private languageChangedEmt: Emittable<Language>;\n\n  @ViewChild(\"langSelector\")\n  private langSelector!: MatSelect;\n\n  constructor(private store: Store) {\n  }\n\n  ngAfterViewInit(): void {\n    this.store.select(ProfileState.language)\n      .pipe(take(1))\n      .subscribe(value => {\n        this.langSelector.writeValue(value);\n      });\n  }\n\n  handleLangChanged(selection: MatSelectChange) {\n    this.languageChangedEmt.emit(selection.value);\n  }\n\n  handleMenuClicked() {\n    this.toggleMenuEmt.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 10px;\n  box-shadow: 0 4px 5px -2px #8a8a8a;\n  display: flex;\n  flex-direction: row;\n}\n\n.lang-select {\n  width: 90px;\n}\n",
                    "styleUrl": "./heading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<button *ngIf=\"isAuthenticated?.isTrue ?? false\"\n        (click)=\"handleMenuClicked()\"\n        mat-icon-button\n        color=\"primary\">\n  <mat-icon>menu</mat-icon>\n</button>\n<div class=\"flex-spacer\"></div>\n<mat-form-field appearance=\"outline\" class=\"lang-select mat-form-field-no-bottom\">\n  <mat-label>\n    <mat-icon fontIcon=\"public\"></mat-icon>\n  </mat-label>\n  <mat-select (selectionChange)=\"handleLangChanged($event)\" #langSelector>\n    <mat-option *ngFor=\"let lang of availableLanguages\" [value]=\"lang\">{{lang}}</mat-option>\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-284ec80a087b33455f13a89e93597489f22f6f879c2e8cbb980f8c88ed604d7dcb9aea0ca00b1dad8d150e2bc5fb7dac3ce056a30388c28dbcb9f64843aec07e",
            "file": "src/app/components/menu/menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleRouteClick",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {Navigate} from \"@ngxs/router-plugin\";\nimport {Store} from \"@ngxs/store\";\nimport {Ui} from '../../state/ui/ui.state-model';\nimport {EmitterAction, EmitterService} from '@ngxs-labs/emitter';\n\n\n@Component({\n  selector: 'pfc-menu',\n  standalone: true,\n  imports: [CommonModule, MatListModule, MatIconModule, TranslateModule, MatButtonModule],\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuComponent {\n\n  constructor(private store: Store) {\n  }\n\n  handleRouteClick(url: string) {\n    this.store.dispatch([new Navigate([url]), new EmitterAction(false, Ui.TOGGLE_SIDE_MENU)]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n.pages {\n  padding: 0;\n}\n\n.menu-title {\n  margin: 5px 15px;\n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 class=\"menu-title\">{{'side-menu.title' | translate}}</h1>\n\n<mat-action-list class=\"pages\">\n  <mat-list-item (click)=\"handleRouteClick('/dashboard')\">\n    <span matListItemTitle>{{'side-menu.dashboard' | translate}}</span>\n  </mat-list-item>\n\n  <mat-list-item (click)=\"handleRouteClick('/foods')\">\n    <span matListItemTitle>{{'side-menu.foods-management' | translate}}</span>\n  </mat-list-item>\n\n</mat-action-list>\n"
        },
        {
            "name": "NutritionGaugeComponent",
            "id": "component-NutritionGaugeComponent-d1fa6f74ac73f5e3381651b6afe1016432fa71cfe5cd4fcd7a069ea025eabac5c6d143706951683141abbb04977817dd15b5a85b0f062774fbaa8dab6bf98e49",
            "file": "src/app/components/nutrition-gauge/nutrition-gauge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-nutrition-gauge",
            "styleUrls": [
                "./nutrition-gauge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nutrition-gauge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addingValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "aim",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "'#bf3060'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mainColor",
                    "defaultValue": "'#ff4081'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "15",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fromFunctions",
                    "defaultValue": "fromFunctions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        122,
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {GaugeComponent} from '../gauge/gauge.component';\nimport {IGaugeTrackConf} from '../gauge/gauge-component.interfaces';\nimport * as fromFunctions from \"../../commons/functions\";\n\n@Component({\n  selector: 'pfc-nutrition-gauge',\n  standalone: true,\n  imports: [CommonModule, GaugeComponent],\n  templateUrl: './nutrition-gauge.component.html',\n  styleUrls: ['./nutrition-gauge.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NutritionGaugeComponent {\n  @Input() value = 0;\n  @Input() aim: number | null = 100;\n  @Input() addingValue = 0;\n  @Input() title!: string;\n\n  @Input() strokeWidth = 15;\n  @Input() mainColor = '#ff4081';\n  @Input() bgColor = '#bf3060';\n\n  constructor() {\n  }\n\n  get titleShorten(): string {\n    return this.title.charAt(0).toUpperCase();\n  }\n\n  get gaugeConfig(): IGaugeTrackConf[] {\n    const result = [\n      {\n        strokeWidth: this.strokeWidth,\n        bgStrokeColor: this.bgColor,\n        circles: [\n          {\n            value: this.value,\n            maxValue: this.aim || (this.value + (this.addingValue > 0 ? this.addingValue : 0)),\n            color: this.mainColor,\n            blink: false,\n          },\n        ],\n      },\n    ];\n\n    if (this.addingValue) {\n      result[0].circles.push({\n        value: this.value + this.addingValue,\n        maxValue: this.aim|| (this.value + (this.addingValue > 0 ? this.addingValue : 0)),\n        color: this.mainColor,\n        blink: true\n      });\n    }\n    return result;\n  }\n\n  protected readonly fromFunctions = fromFunctions;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .values, .title {\n    font-size: .8rem;\n  }\n}\n",
                    "styleUrl": "./nutrition-gauge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "accessors": {
                "titleShorten": {
                    "name": "titleShorten",
                    "getSignature": {
                        "name": "titleShorten",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                },
                "gaugeConfig": {
                    "name": "gaugeConfig",
                    "getSignature": {
                        "name": "gaugeConfig",
                        "type": "[]",
                        "returnType": "IGaugeTrackConf[]",
                        "line": 32
                    }
                }
            },
            "templateData": "<pfc-gauge *ngIf=\"aim != null; else gaugeWithoutSubtitle\"\n           [subtitle]=\"'' + aim\"\n           [title]=\"titleShorten\"\n           [values]=\"gaugeConfig\"\n></pfc-gauge>\n\n<ng-template #gaugeWithoutSubtitle>\n  <pfc-gauge [title]=\"titleShorten\"\n             [values]=\"gaugeConfig\"\n  ></pfc-gauge>\n</ng-template>\n\n<span *ngIf=\"aim != null\" class=\"values\">{{fromFunctions.ceil(value + (addingValue || 0))}}/{{fromFunctions.ceil(aim)}}</span>\n<span *ngIf=\"aim == null\" class=\"values\">{{fromFunctions.ceil(value + (addingValue || 0))}}</span>\n<span class=\"title\">{{title}}</span>\n"
        },
        {
            "name": "SignInPageComponent",
            "id": "component-SignInPageComponent-d9d795b7040da9b89c5088a8b9c3725678dd8700b912d81956b7cceb7f2de4d0e9a8360a79601a955c90a2a51e0b2d6488aad7e3de6513117f6d91f0e3525dce",
            "file": "src/app/features/auth/sign-in-page/sign-in-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-sign-in-page",
            "styleUrls": [
                "./sign-in-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required]],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "signInEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<Auth.SignInPayload>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AuthState.signIn"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {Auth} from '../auth.state-models';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {RouterLink} from '@angular/router';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {AuthState} from '../auth.state';\n\n@Component({\n  selector: 'pfc-sign-in-page',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    TranslateModule,\n    RouterLink,\n  ],\n  templateUrl: './sign-in-page.component.html',\n  styleUrls: ['./sign-in-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignInPageComponent {\n  @Emitter(AuthState.signIn)\n  private signInEmt: Emittable<Auth.SignInPayload>;\n\n  protected form = this.fb.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required]],\n  });\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  onSubmit() {\n    const email = this.form.value.email as string;\n    const password = this.form.value.password as string;\n    this.signInEmt.emit({email, password});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 5%;\n  height: 100%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  width: 100%;\n}\n\na[mat-button] {\n  width: 100%;\n}\n",
                    "styleUrl": "./sign-in-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n\n  <mat-form-field>\n    <mat-label>{{'sign-in.email.label' | translate}}</mat-label>\n    <input formControlName=\"email\" matInput type=\"email\"/>\n\n    <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n               [innerHTML]=\"'sign-in.email.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.controls.email.hasError('email')\">\n      {{'sign-in.email.email' | translate}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-in.password.label' | translate}}</mat-label>\n    <input formControlName=\"password\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.password.hasError('required')\"\n               [innerHTML]=\"'sign-in.password.required' | translate\">\n    </mat-error>\n  </mat-form-field>\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button type=\"submit\">\n    {{'sign-in.sign-in-btn' | translate}}\n  </button>\n  <a routerLink=\"/signup\" mat-button>\n    {{'sign-in.sign-up-link' | translate}}\n  </a>\n</form>\n"
        },
        {
            "name": "SignUpPageComponent",
            "id": "component-SignUpPageComponent-b67c1cdf84bd0953d0d4b5691764ebd15f8b1be8181d17cff59b2a23e54590fb6d7f00bf1600f321a323c39cb287fed79aa07d7a4a19c74d16cdb56ed491b342",
            "file": "src/app/features/auth/sign-up-page/sign-up-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-sign-up-page",
            "styleUrls": [
                "./sign-up-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: ['', [Validators.email, Validators.required]],\n    name: ['', Validators.required],\n    password: ['', [Validators.required, Validators.minLength(this.minPasswordLength)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(this.minPasswordLength)]],\n  }, {\n    validators: fromPfccValidators.fieldsMatches('password', 'confirmPassword'),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "minPasswordLength",
                    "defaultValue": "6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        122,
                        144
                    ]
                },
                {
                    "name": "signUpEmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Emittable<Auth.SignUpPayload>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Emitter",
                            "stringifiedArguments": "AuthState.signUp"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormBuilder, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport * as fromPfccValidators from '../../../commons/pfcc-validators';\nimport {Auth} from '../auth.state-models';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {RouterLink} from '@angular/router';\nimport {Emittable, Emitter} from '@ngxs-labs/emitter';\nimport {AuthState} from '../auth.state';\n\n\n@Component({\n  selector: 'pfc-sign-up-page',\n  templateUrl: './sign-up-page.component.html',\n  styleUrls: ['./sign-up-page.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    TranslateModule,\n    RouterLink,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignUpPageComponent {\n\n  @Emitter(AuthState.signUp)\n  private signUpEmt: Emittable<Auth.SignUpPayload>;\n\n  protected readonly minPasswordLength = 6;\n  protected form = this.fb.group({\n    email: ['', [Validators.email, Validators.required]],\n    name: ['', Validators.required],\n    password: ['', [Validators.required, Validators.minLength(this.minPasswordLength)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(this.minPasswordLength)]],\n  }, {\n    validators: fromPfccValidators.fieldsMatches('password', 'confirmPassword'),\n  });\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  signUp() {\n    const password = this.form.value.password as string;\n    const email = this.form.value.email as string;\n    const name = this.form.value.name as string;\n    this.signUpEmt.emit({email, name, password});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 5%;\n  height: 100%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nbutton {\n  width: 100%;\n}\n\na[mat-button] {\n  width: 100%;\n}\n",
                    "styleUrl": "./sign-up-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form (ngSubmit)=\"signUp()\" [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>{{'sign-up.email.label' | translate}}</mat-label>\n    <input formControlName=\"email\" matInput type=\"email\"/>\n\n    <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n               [innerHTML]=\"'sign-up.email.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.controls.email.hasError('email')\">\n      {{'sign-up.email.email' | translate}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.name.label' | translate}}</mat-label>\n    <input formControlName=\"name\" matInput type=\"text\"/>\n\n    <mat-error *ngIf=\"form.controls.email.hasError('required')\"\n               [innerHTML]=\"'sign-up.name.required' | translate\">\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.password.label' | translate}}</mat-label>\n    <input formControlName=\"password\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.password.hasError('required')\"\n               [innerHTML]=\"'sign-up.password.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('fieldsMatches')\">\n      {{'sign-up.password.matches' | translate}}\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('minlength')\">\n      {{'sign-up.password.min-length' | translate:({value: minPasswordLength})}}\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>{{'sign-up.confirm-password.label' | translate}}</mat-label>\n    <input formControlName=\"confirmPassword\" matInput type=\"password\"/>\n\n    <mat-error *ngIf=\"form.controls.confirmPassword.hasError('required')\"\n               [innerHTML]=\"'sign-up.confirm-password.required' | translate\">\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('fieldsMatches')\">\n      {{'sign-up.confirm-password.matches' | translate}}\n    </mat-error>\n    <mat-error *ngIf=\"form.hasError('minlength')\">\n      {{'sign-up.confirm-password.min-length' | translate:({value: minPasswordLength})}}\n    </mat-error>\n  </mat-form-field>\n\n\n  <button [disabled]=\"!form.valid\" color=\"primary\" mat-raised-button\n          type=\"submit\">{{'sign-up.sign-up-btn' | translate}}</button>\n  <a routerLink=\"/signin\" mat-button>{{'sign-up.sign-in-link' | translate}}</a>\n</form>\n"
        },
        {
            "name": "TestPageComponent",
            "id": "component-TestPageComponent-f3607711a01bafcdc8b0cbbbc4f2b44137281ff475625d0faeb9f08ab1f9d1324cd15d9323039e89ceece1766d9d106ab7096051cebd70743ebc2ceac62dc952",
            "file": "src/app/features/test-page/test-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pfc-test-page",
            "styleUrls": [
                "./test-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "fireEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSelectModule} from '@angular/material/select';\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\nimport {MatButtonModule} from '@angular/material/button';\nimport {combineLatest, of, Subject} from 'rxjs';\nimport {RouterLink} from '@angular/router';\n\n@Component({\n  selector: 'pfc-test-page',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, MatSelectModule, NgxMatSelectSearchModule, MatButtonModule, RouterLink],\n  templateUrl: './test-page.component.html',\n  styleUrls: ['./test-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestPageComponent {\n  fireEvents() {\n    const s1 = of('s1-1');\n    const s2 = new Subject();\n    setTimeout(() => {\n      s2.next('s2-1');\n      s2.complete();\n    }, 500)\n\n    combineLatest([s1, s2])\n      .subscribe(res => console.log(res));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button mat-raised-button color=\"primary\" (click)=\"fireEvents()\">FIRE</button>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ac2d5891edde3f28e7919e580c523b2a2a7a718cc7fc4d84b48c7fde8c6365b16fd45a37ee229d6c634225ac5cd23f44b69fd7079ea8f6ef0adfb330d56310c6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {routes} from './app-routes';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgxsReduxDevtoolsPluginModule} from '@ngxs/devtools-plugin';\nimport {environment} from '../environments/environment';\nimport {NgxsRouterPluginModule} from '@ngxs/router-plugin';\nimport {NgxsLoggerPluginModule} from '@ngxs/logger-plugin';\nimport {NgxsModule} from '@ngxs/store';\nimport {AuthState} from './features/auth/auth.state';\nimport {HTTP_INTERCEPTORS, HttpClient, HttpClientModule} from '@angular/common/http';\nimport {MissingTranslationHandler, TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {HeadingComponent} from \"./components/heading/heading.component\";\nimport {NgxsFormPluginModule} from \"@ngxs/form-plugin\";\nimport {UiState} from \"./state/ui/ui.state\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MenuComponent} from \"./components/menu/menu.component\";\nimport {BaseUrlInterceptor} from \"./service/base-url.interceptor\";\nimport {AuthInterceptor} from \"./service/auth.interceptor\";\nimport {FoodsManagementState} from './features/foods-management/foods-management.state';\nimport {NgxsEmitPluginModule} from '@ngxs-labs/emitter';\nimport {NgxsActionsExecutingModule} from '@ngxs-labs/actions-executing';\nimport {NgxsSelectSnapshotModule} from '@ngxs-labs/select-snapshot';\nimport {DashboardState} from './features/dashboard/dashboard.state';\nimport {AddMealState} from './features/add-meal/add-meal.state';\nimport {ProfileState} from './state/profile.state';\nimport {AddDishState} from './features/add-dish/add-dish.state';\nimport {provideRouter, RouterOutlet} from '@angular/router';\nimport {NavigationState} from './state/navigation.state';\nimport {AddFoodState} from './features/add-food/add-food.state';\nimport {PfccMissingTranslationHandler} from './commons/pfcc-missing-translation-handler';\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/');\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    NgxsModule.forRoot([AuthState, UiState, FoodsManagementState, DashboardState, AddMealState, ProfileState, AddDishState, NavigationState, AddFoodState],\n      {developmentMode: environment.ngxs.developmentMode}),\n    NgxsRouterPluginModule.forRoot(),\n    NgxsLoggerPluginModule.forRoot({\n      disabled: !environment.ngxs.logging,\n    }),\n    NgxsFormPluginModule.forRoot(),\n    NgxsEmitPluginModule.forRoot(),\n    NgxsActionsExecutingModule.forRoot(),\n    NgxsSelectSnapshotModule.forRoot(),\n    TranslateModule.forRoot({\n      defaultLanguage: 'UA',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient],\n      },\n      missingTranslationHandler: {\n        provide: MissingTranslationHandler,\n        useClass: PfccMissingTranslationHandler\n      }\n    }),\n\n    NgxsReduxDevtoolsPluginModule.forRoot({\n      disabled: !environment.ngxs.developmentMode,\n    }),\n    HeadingComponent,\n    MatSidenavModule,\n    MenuComponent,\n    RouterOutlet,\n  ],\n  providers: [\n    provideRouter(routes),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: BaseUrlInterceptor,\n      multi: true,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "BaseUrlInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HeadingComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "RouterOutlet"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_INGREDIENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddDish] Add Ingredient'"
            },
            {
                "name": "ADD_MEAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[DASHBOARD] Add meal'"
            },
            {
                "name": "addDish",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'add-dish'"
            },
            {
                "name": "addFood",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'add-food'"
            },
            {
                "name": "addMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'add-meal'"
            },
            {
                "name": "completeProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'complete-profile'"
            },
            {
                "name": "CONFIGURE_PROFILE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AUTH] Configure profile'"
            },
            {
                "name": "CREATE_FOOD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Create Food'"
            },
            {
                "name": "dashboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dashboard'"
            },
            {
                "name": "DEFAULT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'EN'"
            },
            {
                "name": "DELETE_DISH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddMeal] Delete dish'"
            },
            {
                "name": "DELETE_FOOD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Delete Food'"
            },
            {
                "name": "DELETE_INGREDIENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddDish] Delete Ingredient'"
            },
            {
                "name": "EDIT_FOOD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Edit Food'"
            },
            {
                "name": "emptyPfcc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/models/common.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPfcc",
                "defaultValue": "{\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'https://pfcalc.org.ua',\n  ngxs: {\n    logging: false,\n    developmentMode: false,\n  },\n  navigation: {\n    maxHistorySize: 20,\n    defaultPage: 'dashboard',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'https://pfcalc.org.ua',\n  ngxs: {\n    logging: false,\n    developmentMode: true,\n  },\n  navigation: {\n    maxHistorySize: 999,\n    defaultPage: 'dashboard',\n  },\n  // apiUrl: 'http://localhost:8080'\n}"
            },
            {
                "name": "fieldsMatches",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/pfcc-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(origin: string, ...toCompare: string[]) => {\n  return control => {\n    if (toCompare == null || toCompare.length == 0) {\n      console.warn('Fields to compare is not configured');\n      return null;\n    }\n\n    const originalValue = control.get(origin)?.value;\n    if (originalValue == null) {\n      return null;\n    }\n\n    for (const field of toCompare) {\n      const comparingControl = control.get(field);\n\n      if (comparingControl == null) {\n        throw new Error(`Can't find ${field} in provided form`);\n      }\n\n      const comparingValue = comparingControl.value || null;\n\n      if (comparingValue !== originalValue) {\n        return {\n          fieldsMatches: `Value of ${field} (${comparingValue}) doesn't match ${origin} (${originalValue})`,\n        };\n      }\n    }\n\n    return null;\n  };\n}"
            },
            {
                "name": "foodsManagement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'foods'"
            },
            {
                "name": "isAuthenticatedGuardFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/guards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(): Observable<boolean> => {\n  const store = inject(Store);\n  return store.select(AuthState.isAuthenticated)\n    .pipe(\n      filter(isAuthenticated => isAuthenticated !== UnknownBoolean.UNKNOWN),\n      map(value => value === UnknownBoolean.TRUE),\n      tap(isAuthenticated => {\n        if (!isAuthenticated) {\n          store.dispatch(new Navigate([`/${fromRoutes.signIn}`]));\n        }\n      }),\n    );\n}"
            },
            {
                "name": "isNotAuthenticatedGuardFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/guards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(): Observable<boolean> => {\n  const store = inject(Store);\n  return store.select(AuthState.isAuthenticated)\n    .pipe(\n      filter(isAuthenticated => isAuthenticated !== UnknownBoolean.UNKNOWN),\n      map(value => value === UnknownBoolean.FALSE),\n      tap(isNotAuthenticated => {\n        if (!isNotAuthenticated) {\n          store.dispatch(new Navigate([`/${fromRoutes.dashboard}`]));\n        }\n      }),\n    );\n}"
            },
            {
                "name": "isTestEnvironment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/guards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanMatchFn",
                "defaultValue": "(): boolean => {\n    return !environment.production\n}"
            },
            {
                "name": "LANGUAGE_CHANGED_EVENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Profile] Language changed'"
            },
            {
                "name": "LOAD_DISH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddDish] Load Dish'"
            },
            {
                "name": "LOAD_MEAL_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddMeal] Load meal options'"
            },
            {
                "name": "LOAD_MORE_MEAL_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddMeal] Load more meal options'"
            },
            {
                "name": "LOAD_MORE_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Load More Products'"
            },
            {
                "name": "LOAD_MORE_RECIPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Load More Recipes'"
            },
            {
                "name": "LOAD_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Load Products'"
            },
            {
                "name": "LOAD_RECIPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddDish] Load Recipe'"
            },
            {
                "name": "LOAD_RECIPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[FoodsManagement] Load Recipes'"
            },
            {
                "name": "LOG_OUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AUTH] Log out'"
            },
            {
                "name": "mapToVoid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/functions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "OperatorFunction< | >",
                "defaultValue": "() => map(_ => null)"
            },
            {
                "name": "NAVIGATE_BACK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/navigation.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"[Navigation] Navigate back\""
            },
            {
                "name": "OPTIONS_PAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "pfccFormGroupIsNotEmpty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/pfcc-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "control => {\n  if (!(control instanceof FormGroup)\n  ) {\n    throw new Error('This validator can be applied only to FormGroup');\n  }\n\n  const proteinControl = control.get('protein');\n  const fatControl = control.get('fat');\n  const carbohydratesControl = control.get('carbohydrates');\n  const caloriesControl = control.get('calories');\n\n  if (proteinControl == null || fatControl == null || carbohydratesControl == null || caloriesControl == null) {\n    throw new Error('This validator can be applied only to FormGroup containing \"protein\", \"fat\", \"carbohydrates\" and \"calories\" FormControl-s');\n  }\n\n  const protein = proteinControl.value;\n  const fat = fatControl.value;\n  const carbohydrates = carbohydratesControl.value;\n  const calories = caloriesControl.value;\n\n  if (protein != null && typeof protein !== 'number') {\n    throw Error('Protein control value is not a number');\n  }\n  if (fat != null && typeof fat !== 'number') {\n    throw Error('Fat control value is not a number');\n  }\n  if (carbohydrates != null && typeof carbohydrates !== 'number') {\n    throw Error('Carbohydrates control value is not a number');\n  }\n  if (calories != null && typeof calories !== 'number') {\n    throw Error('Calories control value is not a number');\n  }\n\n  if (protein + fat + carbohydrates + calories === 0) {\n    return {\n      pfccIsZero: 'PFCC all zeroes',\n    };\n  }\n\n  return null;\n}"
            },
            {
                "name": "profileConfiguredGuardFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/guards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(): Observable<boolean> => {\n  const store = inject(Store);\n  return store.select(AuthState.profileConfigured)\n    .pipe(\n      filter(value => value !== UnknownBoolean.UNKNOWN),\n      map(value => value === UnknownBoolean.TRUE),\n      tap(isProfileConfigured => {\n        if (!isProfileConfigured) {\n          store.dispatch(new Navigate([`/${fromRoutes.completeProfile}`]));\n        }\n      }),\n    );\n\n}"
            },
            {
                "name": "REFRESH_AUTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AUTH] Refresh auth action'"
            },
            {
                "name": "RELOAD_INGREDIENT_OPTIONS_ACTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-food/add-food.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddFood] Reload ingredients options'"
            },
            {
                "name": "REMOVE_MEAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[DASHBOARD] Remove meal'"
            },
            {
                "name": "SAVE_DISH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddDish] Save Dish'"
            },
            {
                "name": "SAVE_FOOD_ACTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-food/add-food.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddFood] Save food'"
            },
            {
                "name": "SEARCH_INGREDIENT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AddDish] Search Ingredient Options'"
            },
            {
                "name": "SIGN_IN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AUTH] Sign in'"
            },
            {
                "name": "SIGN_UP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[AUTH] Sign up'"
            },
            {
                "name": "signIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'signin'"
            },
            {
                "name": "signUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/commons/routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'signup'"
            },
            {
                "name": "SWITCH_DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[DASHBOARD] Switch date'"
            },
            {
                "name": "TOGGLE_SIDE_MENU",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/ui/ui.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[UI] Toggle side menu'"
            },
            {
                "name": "UI_STATE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/ui/ui.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'UI'"
            }
        ],
        "functions": [
            {
                "name": "ceil",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afterDotSigns",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "2"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afterDotSigns",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ceilPfcc",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afterDotSigns",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "2"
                    },
                    {
                        "name": "caloriesAfterDotSign",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "returnType": "IPfcc",
                "jsdoctags": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afterDotSigns",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caloriesAfterDotSign",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isDefined",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFoodType",
                "file": "src/app/commons/models/domain.models.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "FoodType",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loadAllPages",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "loadFunc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T[]>",
                "jsdoctags": [
                    {
                        "name": "loadFunc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "multiplyPfcc",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "multiplier",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IPfcc",
                "jsdoctags": [
                    {
                        "name": "pfcc",
                        "type": "IPfcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "multiplier",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sumPfccs",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "pfccs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "pfccs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withDefaults",
                "file": "src/app/commons/functions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaults",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaults",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AddDishFormGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FormGroup<literal type>",
                "file": "src/app/features/add-dish/add-dish.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "AddFoodForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-food/add-food.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AddFoodIngredientForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FormGroup<literal type>",
                "file": "src/app/features/add-food/add-food.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "AddFoodMeasurementForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FormGroup<literal type>",
                "file": "src/app/features/add-food/add-food.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "AddIngredientPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "void",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 114
            },
            {
                "name": "AddMealPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<IMeal | id>",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "ConfigureProfilePayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CreateFoodActionPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<IFood | \"id\" | \"ownedByUser\">",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "DeleteDishPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 146
            },
            {
                "name": "DeleteFoodActionPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 146
            },
            {
                "name": "DeleteIngredientPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 146
            },
            {
                "name": "EditFoodActionPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<IFood | ownedByUser>",
                "file": "src/app/features/foods-management/foods-management.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FoodType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"INGREDIENT\" | \"RECIPE\"",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IAddDishState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IAddDishStateIngredient",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IAddFoodState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-food/add-food.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IAddMealState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IApiResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/commons/models/common.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "IDashboardState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IFood",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IIngredient",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "IMealOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IMeasurement",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/commons/models/domain.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IngredientFormGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FormGroup<literal type>",
                "file": "src/app/features/add-dish/add-dish.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "IProfileState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/profile.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"EN\" | \"UA\"",
                "file": "src/app/commons/models/auth.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "LanguageChangedEventPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Language",
                "file": "src/app/state/profile.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "LoadDishPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 146
            },
            {
                "name": "LoadMealOptionsPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LoadRecipePayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 146
            },
            {
                "name": "MealOptionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"DISH\" | FoodType",
                "file": "src/app/features/add-meal/add-meal.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "NavigateBackPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/navigation.state-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ReloadIngredientOptionsPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "src/app/features/add-food/add-food.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "RemoveMealPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SaveDishPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IDishToCreate",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "SaveFoodPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IFood",
                "file": "src/app/features/add-food/add-food.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "SearchIngredientOptionsPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/add-dish/add-dish.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SignInPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SignUpPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/auth/auth.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SwitchDatePayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/dashboard/dashboard.state-models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/features/add-dish/add-dish.state-models.ts": [
                {
                    "name": "ADD_INGREDIENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddDish] Add Ingredient'"
                },
                {
                    "name": "DELETE_INGREDIENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddDish] Delete Ingredient'"
                },
                {
                    "name": "LOAD_DISH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddDish] Load Dish'"
                },
                {
                    "name": "LOAD_RECIPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddDish] Load Recipe'"
                },
                {
                    "name": "OPTIONS_PAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "10"
                },
                {
                    "name": "SAVE_DISH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddDish] Save Dish'"
                },
                {
                    "name": "SEARCH_INGREDIENT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddDish] Search Ingredient Options'"
                }
            ],
            "src/app/features/dashboard/dashboard.state-models.ts": [
                {
                    "name": "ADD_MEAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[DASHBOARD] Add meal'"
                },
                {
                    "name": "REMOVE_MEAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[DASHBOARD] Remove meal'"
                },
                {
                    "name": "SWITCH_DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[DASHBOARD] Switch date'"
                }
            ],
            "src/app/commons/routes.ts": [
                {
                    "name": "addDish",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'add-dish'"
                },
                {
                    "name": "addFood",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'add-food'"
                },
                {
                    "name": "addMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'add-meal'"
                },
                {
                    "name": "completeProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'complete-profile'"
                },
                {
                    "name": "dashboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dashboard'"
                },
                {
                    "name": "foodsManagement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'foods'"
                },
                {
                    "name": "signIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'signin'"
                },
                {
                    "name": "signUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'signup'"
                }
            ],
            "src/app/features/auth/auth.state-models.ts": [
                {
                    "name": "CONFIGURE_PROFILE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AUTH] Configure profile'"
                },
                {
                    "name": "LOG_OUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AUTH] Log out'"
                },
                {
                    "name": "REFRESH_AUTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AUTH] Refresh auth action'"
                },
                {
                    "name": "SIGN_IN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AUTH] Sign in'"
                },
                {
                    "name": "SIGN_UP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AUTH] Sign up'"
                }
            ],
            "src/app/features/foods-management/foods-management.state-models.ts": [
                {
                    "name": "CREATE_FOOD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Create Food'"
                },
                {
                    "name": "DELETE_FOOD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Delete Food'"
                },
                {
                    "name": "EDIT_FOOD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Edit Food'"
                },
                {
                    "name": "LOAD_MORE_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Load More Products'"
                },
                {
                    "name": "LOAD_MORE_RECIPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Load More Recipes'"
                },
                {
                    "name": "LOAD_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Load Products'"
                },
                {
                    "name": "LOAD_RECIPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[FoodsManagement] Load Recipes'"
                }
            ],
            "src/app/state/profile.state-model.ts": [
                {
                    "name": "DEFAULT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'EN'"
                },
                {
                    "name": "LANGUAGE_CHANGED_EVENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Profile] Language changed'"
                }
            ],
            "src/app/features/add-meal/add-meal.state-models.ts": [
                {
                    "name": "DELETE_DISH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddMeal] Delete dish'"
                },
                {
                    "name": "LOAD_MEAL_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddMeal] Load meal options'"
                },
                {
                    "name": "LOAD_MORE_MEAL_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddMeal] Load more meal options'"
                }
            ],
            "src/app/commons/models/common.models.ts": [
                {
                    "name": "emptyPfcc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/models/common.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPfcc",
                    "defaultValue": "{\n  protein: 0,\n  fat: 0,\n  carbohydrates: 0,\n  calories: 0,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'https://pfcalc.org.ua',\n  ngxs: {\n    logging: false,\n    developmentMode: false,\n  },\n  navigation: {\n    maxHistorySize: 20,\n    defaultPage: 'dashboard',\n  },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'https://pfcalc.org.ua',\n  ngxs: {\n    logging: false,\n    developmentMode: true,\n  },\n  navigation: {\n    maxHistorySize: 999,\n    defaultPage: 'dashboard',\n  },\n  // apiUrl: 'http://localhost:8080'\n}"
                }
            ],
            "src/app/commons/pfcc-validators.ts": [
                {
                    "name": "fieldsMatches",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/pfcc-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(origin: string, ...toCompare: string[]) => {\n  return control => {\n    if (toCompare == null || toCompare.length == 0) {\n      console.warn('Fields to compare is not configured');\n      return null;\n    }\n\n    const originalValue = control.get(origin)?.value;\n    if (originalValue == null) {\n      return null;\n    }\n\n    for (const field of toCompare) {\n      const comparingControl = control.get(field);\n\n      if (comparingControl == null) {\n        throw new Error(`Can't find ${field} in provided form`);\n      }\n\n      const comparingValue = comparingControl.value || null;\n\n      if (comparingValue !== originalValue) {\n        return {\n          fieldsMatches: `Value of ${field} (${comparingValue}) doesn't match ${origin} (${originalValue})`,\n        };\n      }\n    }\n\n    return null;\n  };\n}"
                },
                {
                    "name": "pfccFormGroupIsNotEmpty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/pfcc-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "control => {\n  if (!(control instanceof FormGroup)\n  ) {\n    throw new Error('This validator can be applied only to FormGroup');\n  }\n\n  const proteinControl = control.get('protein');\n  const fatControl = control.get('fat');\n  const carbohydratesControl = control.get('carbohydrates');\n  const caloriesControl = control.get('calories');\n\n  if (proteinControl == null || fatControl == null || carbohydratesControl == null || caloriesControl == null) {\n    throw new Error('This validator can be applied only to FormGroup containing \"protein\", \"fat\", \"carbohydrates\" and \"calories\" FormControl-s');\n  }\n\n  const protein = proteinControl.value;\n  const fat = fatControl.value;\n  const carbohydrates = carbohydratesControl.value;\n  const calories = caloriesControl.value;\n\n  if (protein != null && typeof protein !== 'number') {\n    throw Error('Protein control value is not a number');\n  }\n  if (fat != null && typeof fat !== 'number') {\n    throw Error('Fat control value is not a number');\n  }\n  if (carbohydrates != null && typeof carbohydrates !== 'number') {\n    throw Error('Carbohydrates control value is not a number');\n  }\n  if (calories != null && typeof calories !== 'number') {\n    throw Error('Calories control value is not a number');\n  }\n\n  if (protein + fat + carbohydrates + calories === 0) {\n    return {\n      pfccIsZero: 'PFCC all zeroes',\n    };\n  }\n\n  return null;\n}"
                }
            ],
            "src/app/service/guards.ts": [
                {
                    "name": "isAuthenticatedGuardFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/guards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(): Observable<boolean> => {\n  const store = inject(Store);\n  return store.select(AuthState.isAuthenticated)\n    .pipe(\n      filter(isAuthenticated => isAuthenticated !== UnknownBoolean.UNKNOWN),\n      map(value => value === UnknownBoolean.TRUE),\n      tap(isAuthenticated => {\n        if (!isAuthenticated) {\n          store.dispatch(new Navigate([`/${fromRoutes.signIn}`]));\n        }\n      }),\n    );\n}"
                },
                {
                    "name": "isNotAuthenticatedGuardFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/guards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(): Observable<boolean> => {\n  const store = inject(Store);\n  return store.select(AuthState.isAuthenticated)\n    .pipe(\n      filter(isAuthenticated => isAuthenticated !== UnknownBoolean.UNKNOWN),\n      map(value => value === UnknownBoolean.FALSE),\n      tap(isNotAuthenticated => {\n        if (!isNotAuthenticated) {\n          store.dispatch(new Navigate([`/${fromRoutes.dashboard}`]));\n        }\n      }),\n    );\n}"
                },
                {
                    "name": "isTestEnvironment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/guards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanMatchFn",
                    "defaultValue": "(): boolean => {\n    return !environment.production\n}"
                },
                {
                    "name": "profileConfiguredGuardFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/guards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(): Observable<boolean> => {\n  const store = inject(Store);\n  return store.select(AuthState.profileConfigured)\n    .pipe(\n      filter(value => value !== UnknownBoolean.UNKNOWN),\n      map(value => value === UnknownBoolean.TRUE),\n      tap(isProfileConfigured => {\n        if (!isProfileConfigured) {\n          store.dispatch(new Navigate([`/${fromRoutes.completeProfile}`]));\n        }\n      }),\n    );\n\n}"
                }
            ],
            "src/app/commons/functions.ts": [
                {
                    "name": "mapToVoid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/commons/functions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OperatorFunction< | >",
                    "defaultValue": "() => map(_ => null)"
                }
            ],
            "src/app/state/navigation.state-model.ts": [
                {
                    "name": "NAVIGATE_BACK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/navigation.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"[Navigation] Navigate back\""
                }
            ],
            "src/app/features/add-food/add-food.state-models.ts": [
                {
                    "name": "RELOAD_INGREDIENT_OPTIONS_ACTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-food/add-food.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddFood] Reload ingredients options'"
                },
                {
                    "name": "SAVE_FOOD_ACTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/add-food/add-food.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[AddFood] Save food'"
                }
            ],
            "src/app/state/ui/ui.state-model.ts": [
                {
                    "name": "TOGGLE_SIDE_MENU",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/ui/ui.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[UI] Toggle side menu'"
                }
            ],
            "src/app/state/ui/ui.state.ts": [
                {
                    "name": "UI_STATE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/ui/ui.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'UI'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/commons/functions.ts": [
                {
                    "name": "ceil",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterDotSigns",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterDotSigns",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ceilPfcc",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterDotSigns",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        },
                        {
                            "name": "caloriesAfterDotSign",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "returnType": "IPfcc",
                    "jsdoctags": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterDotSigns",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caloriesAfterDotSign",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDefined",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAllPages",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "loadFunc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T[]>",
                    "jsdoctags": [
                        {
                            "name": "loadFunc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "multiplyPfcc",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "multiplier",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IPfcc",
                    "jsdoctags": [
                        {
                            "name": "pfcc",
                            "type": "IPfcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "multiplier",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sumPfccs",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "pfccs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "pfccs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withDefaults",
                    "file": "src/app/commons/functions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaults",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaults",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/commons/models/domain.models.ts": [
                {
                    "name": "isFoodType",
                    "file": "src/app/commons/models/domain.models.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "FoodType",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/features/add-dish/add-dish.component.ts": [
                {
                    "name": "AddDishFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FormGroup<literal type>",
                    "file": "src/app/features/add-dish/add-dish.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "IngredientFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FormGroup<literal type>",
                    "file": "src/app/features/add-dish/add-dish.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/features/add-food/add-food.component.ts": [
                {
                    "name": "AddFoodForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-food/add-food.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AddFoodIngredientForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FormGroup<literal type>",
                    "file": "src/app/features/add-food/add-food.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "AddFoodMeasurementForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FormGroup<literal type>",
                    "file": "src/app/features/add-food/add-food.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/features/add-dish/add-dish.state-models.ts": [
                {
                    "name": "AddIngredientPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "void",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 114
                },
                {
                    "name": "DeleteIngredientPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 146
                },
                {
                    "name": "IAddDishState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "IAddDishStateIngredient",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LoadDishPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 146
                },
                {
                    "name": "LoadRecipePayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 146
                },
                {
                    "name": "SaveDishPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IDishToCreate",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "SearchIngredientOptionsPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-dish/add-dish.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/features/dashboard/dashboard.state-models.ts": [
                {
                    "name": "AddMealPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<IMeal | id>",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "IDashboardState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "RemoveMealPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SwitchDatePayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/dashboard/dashboard.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/features/auth/auth.state-models.ts": [
                {
                    "name": "ConfigureProfilePayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SignInPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SignUpPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/auth/auth.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/features/foods-management/foods-management.state-models.ts": [
                {
                    "name": "CreateFoodActionPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<IFood | \"id\" | \"ownedByUser\">",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "DeleteFoodActionPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 146
                },
                {
                    "name": "EditFoodActionPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<IFood | ownedByUser>",
                    "file": "src/app/features/foods-management/foods-management.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/features/add-meal/add-meal.state-models.ts": [
                {
                    "name": "DeleteDishPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 146
                },
                {
                    "name": "IAddMealState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "IMealOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LoadMealOptionsPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MealOptionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"DISH\" | FoodType",
                    "file": "src/app/features/add-meal/add-meal.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/commons/models/domain.models.ts": [
                {
                    "name": "FoodType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"INGREDIENT\" | \"RECIPE\"",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IFood",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "IIngredient",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "IMeasurement",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/commons/models/domain.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/features/add-food/add-food.state-models.ts": [
                {
                    "name": "IAddFoodState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/add-food/add-food.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ReloadIngredientOptionsPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "src/app/features/add-food/add-food.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                },
                {
                    "name": "SaveFoodPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IFood",
                    "file": "src/app/features/add-food/add-food.state-models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/commons/models/common.models.ts": [
                {
                    "name": "IApiResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/commons/models/common.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "src/app/state/profile.state-model.ts": [
                {
                    "name": "IProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/profile.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LanguageChangedEventPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Language",
                    "file": "src/app/state/profile.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/commons/models/auth.models.ts": [
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"EN\" | \"UA\"",
                    "file": "src/app/commons/models/auth.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/state/navigation.state-model.ts": [
                {
                    "name": "NavigateBackPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/navigation.state-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ceil",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ceilPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isDefined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loadAllPages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "multiplyPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sumPfccs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "withDefaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/functions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapToVoid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthTokensResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnknownBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApiError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/common.models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyPfcc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDish",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDishToCreate",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMeal",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfile",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/domain.models.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isFoodType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/models/state.models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileLoadedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/pfcc-missing-translation-handler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PfccMissingTranslationHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/pfcc-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fieldsMatches",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/pfcc-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pfccFormGroupIsNotEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addDish",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addFood",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "foodsManagement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commons/routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog-page-heading/dialog-page-heading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogPageHeadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge-circle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "GaugeCircleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge-component.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGaugeCircleConf",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge-component.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGaugeTrackConf",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GaugeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/gauge/gauge.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGaugeInternalTrackConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/heading/heading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nutrition-gauge/nutrition-gauge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NutritionGaugeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddDishComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_INGREDIENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_INGREDIENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_DISH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_RECIPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OPTIONS_PAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SAVE_DISH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_INGREDIENT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-dish/add-dish.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddDishState",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-food/add-food.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddFoodComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-food/add-food.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RELOAD_INGREDIENT_OPTIONS_ACTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-food/add-food.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SAVE_FOOD_ACTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-food/add-food.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddFoodState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-meal/add-meal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMealComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-meal/add-meal.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_DISH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-meal/add-meal.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_MEAL_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-meal/add-meal.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_MORE_MEAL_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/add-meal/add-meal.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddMealState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileConfiguredSuccessfullyEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIGURE_PROFILE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOG_OUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REFRESH_AUTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGN_IN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGN_UP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/auth.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/configure-profile/configure-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigureProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/sign-in-page/sign-in-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/sign-up-page/sign-up-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_MEAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REMOVE_MEAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SWITCH_DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FoodsManagementPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFoodsManagementState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadFoodsActionPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_FOOD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_FOOD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EDIT_FOOD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_MORE_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_MORE_RECIPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state-models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_RECIPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/foods-management/foods-management.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FoodsManagementState",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/test-page/test-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/service/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/service/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/service/base-url.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "BaseUrlInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/guards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isAuthenticatedGuardFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/guards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNotAuthenticatedGuardFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/guards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isTestEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/guards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profileConfiguredGuardFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/local-store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStoreService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/navigation.state-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavigationEntry",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/navigation.state-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavigationState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/navigation.state-model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATE_BACK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/navigation.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile.state-model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile.state-model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANGUAGE_CHANGED_EVENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/state/ui/ui.state-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUiStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/ui/ui.state-model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOGGLE_SIDE_MENU",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/ui/ui.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UiState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/ui/ui.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_STATE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}